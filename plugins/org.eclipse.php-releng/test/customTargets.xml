<project name="Build specific targets and properties" default="noDefault">

	<!-- ===================================================================== -->
	<!-- Run a given ${target} on all elements being built -->
	<!-- Add on <ant> task for each top level element being built. -->
	<!-- ===================================================================== -->
	<target name="allElements">

		<ant antfile="${genericTargets}" target="${target}">
			<property name="type" value="feature" />
			<property name="id" value="org.eclipse.php.test_feature" />
		</ant>
	</target>

	<!-- ===================================================================== -->
	<!-- Check out map files from correct repository -->
	<!-- Replace values for mapsCheckoutTag as desired. -->
	<!-- ===================================================================== -->
	<target name="getMapFiles" depends="checkLocalMaps" unless="skipMaps">
		<property name="mapsCheckoutTag" value="HEAD" />
		<cvs cvsRoot="${mapsRepo}" package="${mapsRoot}" dest="${buildDirectory}/maps" tag="${mapsCheckoutTag}" />
	</target>

	<target name="checkLocalMaps">
		<available property="skipMaps" file="${buildDirectory}/maps" />
	</target>

	<target name="tagMapFiles" if="tagMaps">
		<cvs dest="${buildDirectory}/maps/${mapsRoot}" command="tag ${mapsTagTag}" />
	</target>

	<!-- ===================================================================== -->

	<target name="clean" unless="noclean">
		<antcall target="allElements">
			<param name="target" value="cleanElement" />
		</antcall>
	</target>

	<target name="gatherLogs">
		<mkdir dir="${buildDirectory}/${buildLabel}/compilelogs" />
		<antcall target="allElements">
			<param name="target" value="gatherLogs" />
		</antcall>
		<unzip dest="${buildDirectory}/${buildLabel}/compilelogs" overwrite="true">
			<fileset dir="${buildDirectory}/features">
				<include name="**/*.log.zip" />
			</fileset>
		</unzip>
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before setup -->
	<!-- ===================================================================== -->
	<target name="preSetup">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after setup but before starting the build proper -->
	<!-- ===================================================================== -->
	<target name="postSetup">
		<ant antfile="${builder}/../dependency.xml">
			<property name="dependency.properties" value="${buildDirectory}/maps/org.eclipse.pdt/plugins/org.eclipse.php-releng/maps/dependencies.properties" />
			<property name="base.install.dir" value="${buildDirectory}/../" />
			<property name="dependencyTargets" value="${builder}/../dependency/build.xml" />
			<property name="local.cache.dir" value="${buildDirectory}/../" />
		</ant>
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before fetching the build elements -->
	<!-- ===================================================================== -->
	<target name="preFetch">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after fetching the build elements -->
	<!-- ===================================================================== -->
	<target name="postFetch">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before generating the build scripts. -->
	<!-- ===================================================================== -->
	<target name="preGenerate">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after generating the build scripts. -->
	<!-- ===================================================================== -->
	<target name="postGenerate">
		<antcall target="clean" />
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before running the build.xmls for the elements being built. -->
	<!-- ===================================================================== -->
	<target name="preProcess">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after running the build.xmls for the elements being built. -->
	<!-- ===================================================================== -->
	<target name="postProcess">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before running assemble. -->
	<!-- ===================================================================== -->
	<target name="preAssemble">
	</target>

	<target name="assemble.org.eclipse.php.test_feature">
		<ant antfile="${assembleScriptName}" />
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after  running assemble. -->
	<!-- ===================================================================== -->
	<target name="postAssemble">

	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before running package. -->
	<!-- ===================================================================== -->
	<target name="prePackage">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after  running package. -->
	<!-- ===================================================================== -->
	<target name="postPackage">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after the build is done. -->
	<!-- ===================================================================== -->
	<target name="postBuild">
		<antcall target="packageTestFramework" />
	</target>

	<!-- ===================================================================== -->
	<!-- This terget package automated test framework used in Eclipse php builds -->
	<!-- ===================================================================== -->
	<target name="packageTestFramework">
		<property name="workingDirectory" value="${buildDirectory}/test.assembly" />

		<!--unzip the junit tests-->
		<exec dir="${buildDirectory}/${buildLabel}" executable="unzip">
			<arg line="-o -qq org.eclipse.php.test*.zip -d ${workingDirectory}" />
		</exec>

		<!-- create top level testing directory-->
		<mkdir dir="${workingDirectory}/pdt-testing" />

		<!--eclipse.home is relative to the scripts directory in the org.eclipse.pde.build plugin.  
		Assume the plugins used in the classpath are in the same directory as org.eclipse.pde.build-->
		<property name="eclipse.home" value="../../.." />

		<!--copy label.properties file for use in performance testing-->
		<copy file="${buildDirectory}/label.properties" tofile="${workingDirectory}/pdt-testing/label.properties" />

		<property name="test.properties" value="${workingDirectory}/pdt-testing/test.properties" />

		<!--generate test.properties.  Custom Ant task contributed by org.eclipse.build.tools in org.eclipse.releng.basebuilder.-->
		<generateTestProperties buildDirectory="${buildDirectory}" featureId="org.eclipse.php.test_feature" outputFile="${test.properties}" />

		<!--load the property file created with the directory names for all test plugins-->
		<property file="${test.properties}" />

		<property file="${buildDirectory}/finalPluginsVersions.properties" />

		<!-- TODO : HACK until https://bugs.eclipse.org/bugs/show_bug.cgi?id=167452 addressed
		<zip destfile="${workingDirectory}/eclipse/startup.jar">
			<fileset dir="${buildDirectory}/plugins/org.eclipse.equinox.launcher/@dot" />
			<fileset dir="${buildDirectory}/plugins/org.eclipse.equinox.launcher" includes="META-INF/" />
		</zip> -->

		<!-- Copy test php plugin to the running test env.-->
		<copy todir="${buildDirectory}/../">
			<fileset dir="${workingDirectory}/" />
		</copy>

		<!-- rezip the JUnit plugin tests -->
		<exec dir="${workingDirectory}" executable="zip">
			<arg line="-r -q pdt-junit-tests-${buildId}.zip eclipse" />
		</exec>

		<delete dir="${workingDirectory}/eclipse" includeEmptyDirs="true" />

		<!--Copy scripts and doc used in the automated testing to the testing directory-->
		<copy todir="${workingDirectory}/pdt-testing">
			<fileset dir="${builderDirectory}/testScripts" />
		</copy>

		<!-- convert runtestsfiles to dos just in case -->
		<exec executable="dos2unix" dir="${workingDirectory}/pdt-testing">
			<arg line="runtests" />
		</exec>

		<move file="${workingDirectory}/pdt-junit-tests-${buildId}.zip" todir="${workingDirectory}/pdt-testing" />

		<!--Copy scripts and doc used in the automated testing to the running test env.-->
		<copy todir="${buildDirectory}/../">
			<fileset dir="${workingDirectory}/pdt-testing" />
		</copy>

		<!--set execute permission on *nix shell script-->
		<chmod file="${workingDirectory}/pdt-testing/runtests" perm="755" />
		<property name="postingDirectory" value="${buildDirectory}" />

		<!--create zip file of the automated testing framework-->
		<exec dir="${workingDirectory}" executable="zip">
			<arg line="-r -q ${postingDirectory}/${buildLabel}/pdt-Automated-Tests-${buildId}.zip pdt-testing" />
		</exec>

		<mkdir dir="${postingDirectory}/${buildLabel}/checksum" />
		<checksum file="${postingDirectory}/${buildLabel}/pdt-Automated-Tests-${buildId}.zip" property="md5" />
		<checksum file="${postingDirectory}/${buildLabel}/pdt-Automated-Tests-${buildId}.zip" algorithm="SHA" property="sha" />
		<echo message="${md5} *eclipse-Automated-Tests-${buildId}.zip" file="${postingDirectory}/${buildLabel}/checksum/pdt-Automated-Tests-${buildId}.zip.md5" />
		<echo message="${sha} *eclipse-Automated-Tests-${buildId}.zip" file="${postingDirectory}/${buildLabel}/checksum/pdt-Automated-Tests-${buildId}.zip.sha1" />
		<delete file="${buildDirectory}/${buildLabel}/pdt-junit-tests-${buildId}.zip" />

		<!-- Create symblink to the @dot package-->
		<exec executable="ln">
			<arg line="-s /opt/users/phpBuild/src/eclipse/plugins/org.eclipse.php/@dot /opt/users/phpBuild/src/eclipse/plugins/org.eclipse.php/bin" />
		</exec>

		<exec executable="ln">
			<arg line="-s /opt/users/phpBuild/src/eclipse/plugins/org.eclipse.php.debug.core/@dot /opt/users/phpBuild/src/eclipse/plugins/org.eclipse.php.debug.core/bin" />
		</exec>

		<exec executable="ln">
			<arg line="-s /opt/users/phpBuild/src/eclipse/plugins/org.eclipse.php.debug.daemon/@dot /opt/users/phpBuild/src/eclipse/plugins/org.eclipse.php.debug.daemon/bin" />
		</exec>

		<exec executable="ln">
			<arg line="-s /opt/users/phpBuild/src/eclipse/plugins/org.eclipse.php.debug.ui/@dot /opt/users/phpBuild/src/eclipse/plugins/org.eclipse.php.debug.ui/bin" />
		</exec>

		<exec executable="ln">
			<arg line="-s /opt/users/phpBuild/src/eclipse/plugins/org.eclipse.php.help/@dot /opt/users/phpBuild/src/eclipse/plugins/org.eclipse.php.help/bin" />
		</exec>

		<exec executable="ln">
			<arg line="-s /opt/users/phpBuild/src/eclipse/plugins/org.eclipse.php.server.core/@dot /opt/users/phpBuild/src/eclipse/plugins/org.eclipse.php.server.core/bin" />
		</exec>

		<exec executable="ln">
			<arg line="-s /opt/users/phpBuild/src/eclipse/plugins/org.eclipse.php.server.ui/@dot /opt/users/phpBuild/src/eclipse/plugins/org.eclipse.php.server.ui/bin" />
		</exec>

		<exec executable="ln">
			<arg line="-s /opt/users/phpBuild/src/eclipse/plugins/org.eclipse.php.test/@dot /opt/users/phpBuild/src/eclipse/plugins/org.eclipse.php.test/bin" />
		</exec>

		<exec executable="ln">
			<arg line="-s /opt/users/phpBuild/src/eclipse/plugins/org.eclipse.php.core/@dot /opt/users/phpBuild/src/eclipse/plugins/org.eclipse.php.core/bin" />
		</exec>

		<exec executable="ln">
			<arg line="-s /opt/users/phpBuild/src/eclipse/plugins/org.eclipse.php.ui/@dot /opt/users/phpBuild/src/eclipse/plugins/org.eclipse.php.ui/bin" />
		</exec>

	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do to test the build results -->
	<!-- ===================================================================== -->
	<target name="test">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do to publish the build results -->
	<!-- ===================================================================== -->
	<target name="publish">


	</target>

	<!-- ===================================================================== -->
	<!-- Default target                                                        -->
	<!-- ===================================================================== -->
	<target name="noDefault">
		<echo message="You must specify a target when invoking this file" />
	</target>

</project>
