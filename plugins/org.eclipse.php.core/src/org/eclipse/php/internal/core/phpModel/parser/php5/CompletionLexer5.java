/* The following code was generated by JFlex 1.3.5 on 5/1/08 2:22 PM */

/*******************************************************************************
 * Copyright (c) 2006 Zend Corporation and IBM Corporation.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Zend and IBM - Initial implementation
 *******************************************************************************/

package org.eclipse.php.internal.core.phpModel.parser.php5;

import java_cup.runtime.Symbol;
import java_cup.sym;
import org.eclipse.php.internal.core.util.collections.IntHashtable;
import org.eclipse.php.internal.core.phpModel.parser.CompletionLexer;
import org.eclipse.php.internal.core.phpModel.parser.ParserClient;
import org.eclipse.php.internal.core.phpModel.parser.StateStack;
import java.io.IOException;
import java.util.ArrayList;
import java.util.regex.Matcher;
import java.util.regex.Pattern;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.3.5
 * on 5/1/08 2:22 PM from the specification file
 * <tt>file:/C:/Java3/org.eclipse.php.core/Resources/parserTools/parser/php5/completion_scanner.flex</tt>
 */
public class CompletionLexer5 extends CompletionLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  final public static int YYEOF = -1;

  /** initial size of the lookahead buffer */
  final private static int YY_BUFFERSIZE = 16384;

  /** lexical states */
  final public static int ST_DOCBLOCK = 11;
  final public static int ST_IN_SCRIPTING = 1;
  final public static int ST_LOOKING_FOR_PROPERTY = 7;
  final public static int ST_ONE_LINE_COMMENT = 12;
  final public static int ST_COMMENT = 10;
  final public static int ST_BACKQUOTE = 3;
  final public static int ST_DOUBLE_QUOTES = 2;
  final public static int ST_START_HEREDOC = 5;
  final public static int YYINITIAL = 0;
  final public static int ST_VAR_OFFSET = 9;
  final public static int ST_LOOKING_FOR_VARNAME = 8;
  final public static int ST_HEREDOC = 4;
  final public static int ST_END_HEREDOC = 6;

  /** 
   * Translates characters to character classes
   */
  final private static String yycmap_packed = 
    "\11\0\1\12\1\13\2\0\1\11\22\0\1\12\1\57\1\15\1\100"+
    "\1\14\1\63\1\64\1\77\1\50\1\52\1\61\1\4\1\67\1\44"+
    "\1\2\1\62\1\5\11\1\1\46\1\21\1\60\1\56\1\45\1\73"+
    "\1\74\1\35\1\7\1\30\1\24\1\3\1\25\1\51\1\36\1\22"+
    "\1\53\1\41\1\40\1\43\1\27\1\31\1\42\1\55\1\33\1\32"+
    "\1\23\1\26\1\47\1\37\1\6\1\34\1\10\1\70\1\16\1\71"+
    "\1\66\1\54\1\17\1\35\1\7\1\30\1\24\1\3\1\25\1\51"+
    "\1\36\1\22\1\53\1\41\1\40\1\43\1\27\1\31\1\42\1\55"+
    "\1\33\1\76\1\23\1\26\1\47\1\37\1\6\1\34\1\10\1\20"+
    "\1\65\1\75\1\72\201\10\uff00\0";

  /** 
   * Translates characters to character classes
   */
  final private static char [] yycmap = yy_unpack_cmap(yycmap_packed);

  /** 
   * Translates a state to a row index in the transition table
   */
  final private static int yy_rowMap [] = { 
        0,    65,   130,   195,   260,   325,   390,   455,   520,   585, 
      650,   715,   780,   845,   910,   975,  1040,  1105,  1170,  1235, 
     1300,  1365,  1430,  1495,  1560,  1625,  1690,   975,   975,   975, 
     1755,  1820,  1885,  1950,  2015,  2080,  2145,  2210,  2275,  2340, 
     2405,  2470,  2535,  2600,  2665,  2730,  2795,  2860,  2925,  2990, 
      975,  3055,  3120,  3185,  3250,  3315,  3380,  3445,  3510,  3575, 
     3640,   975,   975,   975,   975,  3705,   975,   975,  3770,   975, 
     3835,  3900,   975,  3965,  4030,  4095,  4160,  4225,   975,  4290, 
     4355,  4420,  4485,  4550,  4615,   975,  4680,   975,   975,  4745, 
     4810,   975,  4875,  4940,   975,   975,  5005,   975,   975,   975, 
      975,   975,   975,   975,   975,   975,   975,   975,   975,   975, 
      975,   975,   975,   975,   975,   975,   975,  5070,  5135,   975, 
     5200,  5265,  5330,  5395,   975,   975,  5460,  5525,  5590,  5655, 
     5720,  5785,  5850,   975,  5915,  5980,  6045,  6110,  6175,  6240, 
      975,   975,  6305,  6370,  6435,  6500,  3770,  6565,  1690,  6630, 
      975,  6695,  6760,  1495,  6825,  6890,  6955,  7020,  7085,  7150, 
     7215,  1495,  7280,  7345,  7410,  7475,  7540,  7605,  7670,  7735, 
     7800,  7865,  1495,  7930,  7995,  8060,  8125,  8190,  1495,  8255, 
     8320,  8385,  8450,  8515,   975,   975,   975,  8580,   975,   975, 
     8645,  8710,  2925,  8775,  8840,  8905,  8970,  9035,  9100,  9165, 
     9230,  9295,  9360,   975,  9425,  9490,   975,   975,  9555,  9620, 
      975,   975,  9685,  9750,   975,   975,   975,   975,   975,   975, 
     9815,  9880,  9945,  3965, 10010, 10075,  9945,   975,   975,   975, 
    10010, 10140,  4225, 10205, 10140,   975, 10205, 10270,  4550, 10335, 
    10400, 10270, 10335,  4680,   975, 10465,   975, 10530, 10595,   975, 
      975,   975,   975,   975, 10660, 10725, 10790, 10790, 10855, 10920, 
    10985, 11050, 11115, 11180, 11245,  6305,  1495, 11310, 11375, 11440, 
    11505, 11570, 11635, 11700,  1495, 11765, 11830, 11895,  1495, 11960, 
    12025, 12090, 12155,  1495,  1495, 12220, 12285, 12350, 12415, 12480, 
    12545, 12610, 12675, 12740, 12805,  1495, 12870, 12935, 13000, 13065, 
    13130, 13195,   975,  1495, 13260, 13325, 13390, 13455, 13520, 13585, 
    13650, 13715, 13780, 13845, 13910, 13975, 14040, 14105, 14170, 14235, 
      975,   975,   975, 14300, 14365, 14430, 14495, 14560, 14625,   975, 
    14690,   975, 14755,   975,   975, 14820, 10595, 14885, 14950, 15015, 
    15080, 15145, 15210, 15275, 15340,  1495, 15405, 15470,  1495, 15535, 
    15600, 15665, 15730, 15795, 15860, 15925, 15990, 16055, 16120, 16185, 
    16250, 16315, 16380, 16445, 16510, 16575,  1495, 16640, 16705, 16770, 
    16835, 16900, 16965, 17030, 17095, 17160,  1495, 17225, 17290, 17355, 
    17420, 17485, 17550, 17615, 17680, 17745, 17810, 17875, 17940, 18005, 
    18070, 18135, 18200, 18265, 18330, 18395, 18460, 18525, 18590, 18655, 
      975, 18720, 18785, 18850, 18915, 18980,  1495, 19045, 19110, 19175, 
    19240, 19305,  1495,  1495, 19370, 19435, 19500,  1495, 19565,  1495, 
    19630, 19695, 19760,  1495, 19825, 19890,  1495, 19955,  1495,  1495, 
     1495,  1495, 20020, 20085, 20150, 20215, 20280,  1495,  1495, 20345, 
     1495, 20410, 20475, 20540, 20605, 20670, 20735,   975, 20800, 20865, 
    20930, 20995, 21060, 21125, 21190, 21255, 21320, 21385, 21450, 21515, 
    21580, 21645, 21710,   975, 21775, 21840,   975, 21905,   975, 21970, 
    22035, 22100, 22165, 22230, 22295,  1495, 22360, 22425, 22490, 22555, 
     1495, 22620, 22685, 22750, 22815, 22880,  1495,  1495,  1495, 22945, 
    23010,  1495, 23075, 23140, 23205, 23270, 23335,   975, 23400, 23465, 
    23530, 23595, 23660,   975, 23725,  1495, 23790, 23855, 23920, 23985, 
    24050, 24115, 24180, 24245, 24310,  1495, 24375, 24440, 24505, 24570, 
    24635, 24700, 24765, 24830,  1495,  1495, 24895,  1495, 24960, 25025, 
    25090,  1495, 25155, 25220, 25285, 25350,   975, 25415,   975, 25480, 
    25545, 25610, 25675, 25740, 25805, 25870, 25935, 26000, 26065, 26130, 
    26195,  1495, 26260, 26325, 26390, 26455,  1495,  1495, 26520,  1495, 
    26585,   975,   975,  1495, 26650, 26715, 26780,  1495, 26845, 26910, 
    26975, 27040, 27105, 27170, 27235,  1495,  1495, 27300, 27365, 27430, 
    27495,  1495, 27560,  1495, 27625, 27690, 27755, 27820,  1495,  1495, 
    27885,  1495,  1495, 27950, 28015, 28080,  1495, 28145, 28210, 28275, 
    28340, 28405, 28470, 28535, 28600, 28665,  1495,  1495,  1495, 28730, 
      975, 28795, 28860, 28925, 28990, 29055,  1495, 29120, 29185, 29250, 
    29315, 29380, 29445, 29510, 29575, 29640, 29705, 29770, 29835,   975, 
    29900
  };

  /** 
   * The packed transition table of the DFA (part 0)
   */
  final private static String yy_packed0 = 
    "\60\16\1\17\20\16\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\3\31\1\32\1\33\1\20"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\30\1\51\1\30"+
    "\1\52\1\53\1\30\1\54\1\30\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\30\1\64\1\30\1\65"+
    "\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75"+
    "\1\76\1\77\1\100\1\101\1\102\1\103\1\104\1\47"+
    "\1\105\1\106\14\107\1\110\1\111\1\112\1\107\1\113"+
    "\60\107\14\114\1\115\1\114\1\116\1\117\1\120\60\114"+
    "\11\121\1\122\1\121\1\122\1\123\1\121\1\124\1\121"+
    "\1\125\60\121\3\126\1\127\2\126\3\127\11\126\22\127"+
    "\3\126\1\127\1\126\1\127\1\126\3\127\20\126\1\127"+
    "\2\126\101\130\3\131\1\132\2\131\3\132\11\131\22\132"+
    "\1\133\2\131\1\132\1\131\1\132\1\131\3\132\20\131"+
    "\1\132\2\131\3\134\1\135\2\134\3\135\11\134\22\135"+
    "\3\134\1\135\1\134\1\135\1\134\3\135\20\134\1\135"+
    "\2\134\1\20\1\136\1\137\1\30\1\140\1\141\3\30"+
    "\3\142\1\32\1\143\1\142\1\144\1\145\1\36\22\30"+
    "\1\146\1\147\1\150\1\30\1\151\1\30\1\63\3\30"+
    "\1\152\1\153\1\154\1\155\1\156\1\157\1\160\1\161"+
    "\1\162\1\76\1\77\1\163\1\101\1\164\1\103\1\165"+
    "\1\30\2\142\61\166\1\167\17\166\11\170\1\171\47\170"+
    "\1\172\17\170\11\173\1\174\1\173\1\175\31\173\1\176"+
    "\15\173\1\177\7\173\1\177\5\173\60\16\1\200\100\16"+
    "\1\0\2\16\1\201\7\16\1\202\2\16\1\203\2\16"+
    "\102\0\1\21\1\204\1\205\1\0\1\21\74\0\1\204"+
    "\3\0\1\204\50\0\1\206\23\0\1\30\1\0\1\30"+
    "\1\0\1\30\1\207\2\30\11\0\5\30\1\210\1\211"+
    "\7\30\1\212\2\30\1\213\3\0\1\214\1\0\1\30"+
    "\1\0\3\30\20\0\1\30\6\0\1\215\51\0\1\216"+
    "\23\0\1\21\1\204\1\205\1\0\1\21\1\217\73\0"+
    "\1\30\1\0\1\30\1\0\4\30\11\0\7\30\1\220"+
    "\12\30\3\0\1\30\1\0\1\30\1\0\3\30\20\0"+
    "\1\30\3\0\1\30\1\0\1\30\1\0\4\30\4\0"+
    "\1\33\4\0\11\30\1\221\10\30\3\0\1\30\1\0"+
    "\1\30\1\0\3\30\2\0\1\222\15\0\1\30\1\223"+
    "\2\0\1\30\1\0\1\30\1\0\4\30\11\0\22\30"+
    "\3\0\1\30\1\0\1\30\1\0\3\30\20\0\1\30"+
    "\13\0\3\31\70\0\1\224\2\0\3\224\11\0\22\224"+
    "\3\0\1\224\1\0\1\224\1\0\3\224\20\0\1\224"+
    "\2\0\14\225\1\226\1\227\1\230\1\225\1\231\60\225"+
    "\1\0\1\30\1\0\1\30\1\0\4\30\11\0\3\30"+
    "\1\232\1\30\1\233\2\30\1\234\10\30\1\235\3\0"+
    "\1\30\1\0\1\30\1\0\3\30\20\0\1\234\3\0"+
    "\1\30\1\0\1\30\1\0\4\30\11\0\11\30\1\236"+
    "\2\30\1\237\5\30\3\0\1\30\1\0\1\30\1\0"+
    "\3\30\20\0\1\30\3\0\1\30\1\0\1\240\1\0"+
    "\4\30\11\0\1\241\6\30\1\242\12\30\3\0\1\30"+
    "\1\0\1\30\1\0\3\30\20\0\1\30\3\0\1\30"+
    "\1\0\1\30\1\0\4\30\11\0\1\243\3\30\1\244"+
    "\2\30\1\245\12\30\3\0\1\30\1\0\1\30\1\0"+
    "\3\30\20\0\1\30\3\0\1\30\1\0\1\30\1\0"+
    "\4\30\11\0\5\30\1\246\2\30\1\247\11\30\3\0"+
    "\1\30\1\0\1\30\1\0\3\30\20\0\1\247\3\0"+
    "\1\30\1\0\1\250\1\0\4\30\11\0\22\30\3\0"+
    "\1\30\1\0\1\30\1\0\3\30\20\0\1\30\3\0"+
    "\1\30\1\0\1\30\1\0\4\30\11\0\3\30\1\251"+
    "\3\30\1\252\3\30\1\253\2\30\1\254\3\30\3\0"+
    "\1\30\1\0\1\30\1\0\3\30\20\0\1\30\3\0"+
    "\1\30\1\0\1\30\1\0\4\30\11\0\11\30\1\255"+
    "\10\30\3\0\1\30\1\0\1\30\1\0\3\30\20\0"+
    "\1\30\3\0\1\30\1\0\1\30\1\0\4\30\11\0"+
    "\1\30\1\256\13\30\1\257\4\30\3\0\1\30\1\0"+
    "\1\30\1\0\3\30\20\0\1\30\3\0\1\30\1\0"+
    "\1\260\1\0\4\30\11\0\22\30\3\0\1\30\1\0"+
    "\1\30\1\0\3\30\20\0\1\30\3\0\1\30\1\0"+
    "\1\30\1\0\2\30\1\261\1\30\11\0\5\30\1\262"+
    "\2\30\1\263\1\264\10\30\3\0\1\30\1\0\1\30"+
    "\1\0\3\30\20\0\1\263\3\0\1\30\1\0\1\30"+
    "\1\0\4\30\11\0\14\30\1\265\5\30\3\0\1\30"+
    "\1\0\1\30\1\0\3\30\20\0\1\30\3\0\1\30"+
    "\1\0\1\30\1\0\4\30\11\0\1\266\21\30\3\0"+
    "\1\30\1\0\1\30\1\0\3\30\20\0\1\30\3\0"+
    "\1\30\1\0\1\30\1\0\4\30\11\0\4\30\1\267"+
    "\4\30\1\270\10\30\3\0\1\30\1\0\1\30\1\0"+
    "\3\30\20\0\1\30\46\0\1\271\1\272\10\0\1\273"+
    "\67\0\1\274\10\0\1\275\70\0\1\276\33\0\1\30"+
    "\1\0\1\30\1\0\4\30\11\0\13\30\1\277\6\30"+
    "\3\0\1\30\1\0\1\30\1\0\3\30\20\0\1\30"+
    "\11\0\1\300\2\0\1\301\7\0\1\302\1\0\1\303"+
    "\1\304\1\305\2\0\1\306\1\307\1\310\1\0\1\311"+
    "\40\0\1\307\3\0\1\30\1\0\1\30\1\0\4\30"+
    "\11\0\16\30\1\312\3\30\3\0\1\30\1\0\1\30"+
    "\1\0\3\30\20\0\1\30\3\0\1\30\1\0\1\30"+
    "\1\0\4\30\11\0\22\30\3\0\1\30\1\0\1\30"+
    "\1\0\1\30\1\313\1\30\20\0\1\30\47\0\1\314"+
    "\10\0\1\315\100\0\1\316\67\0\1\317\10\0\1\320"+
    "\1\0\1\321\1\0\1\322\74\0\1\323\100\0\1\324"+
    "\2\0\1\325\1\106\63\0\1\326\10\0\1\327\100\0"+
    "\1\330\5\0\1\331\72\0\1\332\6\0\1\333\71\0"+
    "\1\334\67\0\1\335\33\0\16\223\1\336\60\223\1\227"+
    "\1\223\14\107\1\337\1\0\1\340\1\107\1\341\63\107"+
    "\1\342\2\107\3\342\3\107\1\343\1\344\1\340\1\107"+
    "\1\345\1\107\22\342\3\107\1\342\1\107\1\342\1\107"+
    "\3\342\20\107\1\342\117\107\1\346\1\344\1\340\1\107"+
    "\1\347\60\107\14\114\1\350\1\114\1\351\1\0\1\352"+
    "\63\114\1\342\2\114\3\342\3\114\1\353\1\114\1\351"+
    "\1\354\1\345\1\114\22\342\3\114\1\342\1\114\1\342"+
    "\1\114\3\342\20\114\1\342\117\114\1\346\1\114\1\351"+
    "\1\354\1\355\60\114\11\121\1\122\1\121\1\122\1\356"+
    "\1\121\1\357\1\121\1\360\63\121\1\361\2\121\3\361"+
    "\1\122\1\121\1\122\1\356\1\121\1\357\1\121\1\360"+
    "\1\121\22\361\3\121\1\361\1\121\1\361\1\121\3\361"+
    "\20\121\1\361\5\121\1\342\2\121\3\342\1\122\1\121"+
    "\1\122\1\362\1\121\1\357\1\121\1\345\1\121\22\342"+
    "\3\121\1\342\1\121\1\342\1\121\3\342\20\121\1\342"+
    "\13\121\1\122\1\121\1\122\76\121\1\122\1\121\1\122"+
    "\1\346\1\121\1\357\1\121\1\363\60\121\1\0\1\364"+
    "\1\0\1\364\1\0\4\364\1\365\1\0\1\365\5\0"+
    "\1\366\22\364\3\0\1\364\1\0\1\364\1\0\3\364"+
    "\20\0\1\364\3\0\1\132\1\0\1\132\1\0\4\132"+
    "\11\0\22\132\3\0\1\132\1\0\1\132\1\0\3\132"+
    "\20\0\1\132\47\0\1\367\34\0\1\135\1\0\1\135"+
    "\1\0\4\135\11\0\22\135\3\0\1\135\1\0\1\135"+
    "\1\0\3\135\20\0\1\135\3\0\1\136\3\0\1\136"+
    "\74\0\1\370\3\0\1\370\1\371\72\0\61\166\1\0"+
    "\17\166\62\0\1\372\31\0\1\170\147\0\1\373\16\0"+
    "\11\173\1\175\1\173\1\175\31\173\1\175\15\173\1\175"+
    "\7\173\1\175\5\173\13\0\1\374\132\0\1\375\33\0"+
    "\60\16\1\0\2\16\1\0\7\16\1\0\2\16\1\0"+
    "\2\16\56\0\1\376\64\0\1\377\13\0\1\376\52\0"+
    "\1\u0100\51\0\1\204\1\0\1\205\1\0\1\204\74\0"+
    "\1\u0101\2\0\1\u0102\1\u0101\36\0\1\u0102\35\0\1\30"+
    "\1\0\1\30\1\0\4\30\11\0\1\u0103\1\u0104\20\30"+
    "\3\0\1\30\1\0\1\30\1\0\3\30\20\0\1\30"+
    "\3\0\1\30\1\0\1\30\1\0\4\30\11\0\2\30"+
    "\1\u0105\17\30\3\0\1\30\1\0\1\30\1\0\3\30"+
    "\20\0\1\30\3\0\1\30\1\0\1\30\1\0\4\30"+
    "\11\0\14\30\1\u0106\5\30\3\0\1\30\1\0\1\30"+
    "\1\0\3\30\20\0\1\30\3\0\1\30\1\0\1\30"+
    "\1\0\4\30\11\0\10\30\1\u0107\11\30\3\0\1\30"+
    "\1\0\1\30\1\0\3\30\20\0\1\u0107\3\0\1\30"+
    "\1\0\1\30\1\0\4\30\11\0\20\30\1\u0108\1\30"+
    "\3\0\1\30\1\0\1\30\1\0\3\30\20\0\1\30"+
    "\3\0\1\30\1\0\1\30\1\0\4\30\11\0\13\30"+
    "\1\u0109\6\30\3\0\1\30\1\0\1\30\1\0\3\30"+
    "\20\0\1\30\3\0\1\u010a\1\0\1\u010a\1\0\1\u010a"+
    "\1\0\1\u010a\14\0\2\u010a\2\0\1\u010a\4\0\1\u010a"+
    "\44\0\1\30\1\0\1\30\1\0\4\30\11\0\11\30"+
    "\1\u010b\10\30\3\0\1\30\1\0\1\30\1\0\3\30"+
    "\20\0\1\30\3\0\1\30\1\0\1\u010c\1\0\4\30"+
    "\11\0\22\30\3\0\1\30\1\0\1\30\1\0\3\30"+
    "\20\0\1\30\62\0\1\u010d\21\0\1\224\1\0\1\224"+
    "\1\0\4\224\11\0\22\224\3\0\1\224\1\0\1\224"+
    "\1\0\3\224\20\0\1\224\2\0\3\225\1\0\2\225"+
    "\3\0\3\225\1\226\1\227\1\230\1\225\1\0\1\225"+
    "\22\0\3\225\1\0\1\225\1\0\1\225\3\0\20\225"+
    "\1\0\117\225\1\0\1\227\1\230\1\225\1\231\60\225"+
    "\1\0\1\30\1\0\1\30\1\0\4\30\11\0\1\30"+
    "\1\u010e\4\30\1\u010f\1\30\1\u0110\11\30\3\0\1\30"+
    "\1\0\1\30\1\0\3\30\20\0\1\u0110\3\0\1\30"+
    "\1\0\1\30\1\0\4\30\11\0\10\30\1\u0111\11\30"+
    "\3\0\1\30\1\0\1\30\1\0\3\30\20\0\1\u0111"+
    "\3\0\1\30\1\0\1\30\1\0\4\30\11\0\20\30"+
    "\1\u0112\1\30\3\0\1\30\1\0\1\30\1\0\3\30"+
    "\20\0\1\30\3\0\1\30\1\0\1\30\1\0\4\30"+
    "\11\0\12\30\1\u0113\7\30\3\0\1\30\1\0\1\30"+
    "\1\0\3\30\20\0\1\30\3\0\1\30\1\0\1\30"+
    "\1\0\4\30\11\0\11\30\1\u0114\10\30\3\0\1\30"+
    "\1\0\1\30\1\0\3\30\20\0\1\30\3\0\1\30"+
    "\1\0\1\30\1\0\4\30\11\0\3\30\1\u0115\2\30"+
    "\1\u0116\13\30\3\0\1\30\1\0\1\30\1\0\3\30"+
    "\20\0\1\30\3\0\1\30\1\0\1\u0117\1\0\4\30"+
    "\11\0\22\30\3\0\1\30\1\0\1\30\1\0\3\30"+
    "\20\0\1\30\3\0\1\30\1\0\1\30\1\0\4\30"+
    "\11\0\5\30\1\u0118\14\30\3\0\1\30\1\0\1\30"+
    "\1\0\3\30\20\0\1\30\3\0\1\30\1\0\1\30"+
    "\1\0\4\30\11\0\5\30\1\u0119\14\30\3\0\1\30"+
    "\1\0\1\30\1\0\3\30\20\0\1\30\3\0\1\30"+
    "\1\0\1\30\1\0\4\30\11\0\11\30\1\u011a\10\30"+
    "\3\0\1\30\1\0\1\30\1\0\3\30\20\0\1\30"+
    "\3\0\1\30\1\0\1\30\1\0\4\30\11\0\10\30"+
    "\1\u011b\11\30\3\0\1\30\1\0\1\30\1\0\3\30"+
    "\20\0\1\u011b\3\0\1\30\1\0\1\u011c\1\0\4\30"+
    "\11\0\22\30\3\0\1\30\1\0\1\30\1\0\3\30"+
    "\20\0\1\30\3\0\1\30\1\0\1\30\1\0\4\30"+
    "\11\0\15\30\1\u011d\4\30\3\0\1\30\1\0\1\30"+
    "\1\0\3\30\20\0\1\30\3\0\1\30\1\0\1\30"+
    "\1\0\4\30\11\0\4\30\1\244\15\30\3\0\1\30"+
    "\1\0\1\30\1\0\3\30\20\0\1\30\3\0\1\30"+
    "\1\0\1\30\1\0\4\30\11\0\5\30\1\u011e\14\30"+
    "\3\0\1\30\1\0\1\30\1\0\3\30\20\0\1\30"+
    "\3\0\1\30\1\0\1\30\1\0\4\30\11\0\1\30"+
    "\1\u011f\6\30\1\u0120\11\30\3\0\1\30\1\0\1\30"+
    "\1\0\3\30\20\0\1\u0120\3\0\1\30\1\0\1\30"+
    "\1\0\4\30\11\0\7\30\1\u0121\3\30\1\u0122\6\30"+
    "\3\0\1\30\1\0\1\30\1\0\3\30\20\0\1\30"+
    "\3\0\1\30\1\0\1\30\1\0\4\30\11\0\13\30"+
    "\1\u0123\6\30\3\0\1\30\1\0\1\30\1\0\3\30"+
    "\20\0\1\30\3\0\1\30\1\0\1\30\1\0\4\30"+
    "\11\0\1\u0124\21\30\3\0\1\30\1\0\1\30\1\0"+
    "\3\30\20\0\1\30\3\0\1\30\1\0\1\30\1\0"+
    "\4\30\11\0\1\30\1\u0125\20\30\3\0\1\30\1\0"+
    "\1\30\1\0\2\30\1\u0126\20\0\1\30\3\0\1\30"+
    "\1\0\1\30\1\0\4\30\11\0\10\30\1\u0127\11\30"+
    "\3\0\1\30\1\0\1\30\1\0\3\30\20\0\1\u0127"+
    "\3\0\1\30\1\0\1\30\1\0\4\30\11\0\2\30"+
    "\1\u0128\17\30\3\0\1\30\1\0\1\30\1\0\3\30"+
    "\20\0\1\30\3\0\1\30\1\0\1\30\1\0\4\30"+
    "\11\0\11\30\1\u0129\10\30\3\0\1\30\1\0\1\30"+
    "\1\0\3\30\20\0\1\30\3\0\1\30\1\0\1\30"+
    "\1\0\4\30\11\0\1\u012a\21\30\3\0\1\30\1\0"+
    "\1\30\1\0\3\30\20\0\1\30\3\0\1\30\1\0"+
    "\1\30\1\0\4\30\11\0\10\30\1\u012b\11\30\3\0"+
    "\1\30\1\0\1\30\1\0\3\30\20\0\1\u012b\3\0"+
    "\1\30\1\0\1\30\1\0\2\30\1\u012c\1\30\11\0"+
    "\22\30\3\0\1\30\1\0\1\30\1\0\3\30\20\0"+
    "\1\30\3\0\1\30\1\0\1\30\1\0\4\30\11\0"+
    "\1\u012d\6\30\1\u012e\12\30\3\0\1\30\1\0\1\30"+
    "\1\0\3\30\20\0\1\30\60\0\1\u012f\23\0\1\30"+
    "\1\0\1\30\1\0\4\30\11\0\11\30\1\u0130\10\30"+
    "\3\0\1\30\1\0\1\30\1\0\3\30\20\0\1\30"+
    "\24\0\1\u0131\6\0\1\u0132\76\0\1\u0133\102\0\1\u0134"+
    "\107\0\1\u0135\67\0\1\u0136\60\0\1\u0137\114\0\1\u0138"+
    "\60\0\1\u0139\130\0\1\u013a\46\0\1\30\1\0\1\30"+
    "\1\0\4\30\11\0\7\30\1\u013b\12\30\3\0\1\30"+
    "\1\0\1\30\1\0\3\30\20\0\1\30\3\0\1\30"+
    "\1\0\1\30\1\0\4\30\11\0\3\30\1\u013c\2\30"+
    "\1\u013d\5\30\1\u013e\1\30\1\u013f\2\30\1\u0140\3\0"+
    "\1\30\1\0\1\30\1\0\3\30\20\0\1\30\60\0"+
    "\1\u0141\100\0\1\u0142\100\0\1\u0143\1\0\1\u0144\52\0"+
    "\1\u0145\43\0\1\u0145\13\0\3\u0146\45\0\1\u0147\12\0"+
    "\1\u0148\15\0\1\u0149\1\0\1\u014a\76\0\1\u014b\1\0"+
    "\1\u014c\65\0\101\223\3\107\1\0\2\107\3\0\3\107"+
    "\1\343\1\344\1\340\1\107\1\0\1\107\22\0\3\107"+
    "\1\0\1\107\1\0\1\107\3\0\20\107\1\0\16\107"+
    "\1\0\1\344\1\340\1\107\1\347\60\107\1\0\1\342"+
    "\1\0\1\342\1\0\4\342\11\0\22\342\1\u014d\2\0"+
    "\1\342\1\0\1\342\1\0\3\342\12\0\1\u014e\5\0"+
    "\1\342\2\0\3\114\1\0\2\114\3\0\3\114\1\353"+
    "\1\114\1\351\1\354\1\0\1\114\22\0\3\114\1\0"+
    "\1\114\1\0\1\114\3\0\20\114\1\0\16\114\1\0"+
    "\1\114\1\351\1\354\1\355\60\114\3\121\1\0\2\121"+
    "\3\0\1\122\1\121\1\122\1\362\1\121\1\357\1\121"+
    "\1\0\1\121\22\0\3\121\1\0\1\121\1\0\1\121"+
    "\3\0\20\121\1\0\13\121\1\122\1\121\1\122\1\0"+
    "\1\121\1\357\1\121\1\363\61\121\1\361\1\121\1\361"+
    "\1\121\4\361\1\u014f\1\121\1\u014f\1\356\1\121\1\357"+
    "\1\121\1\360\1\u0150\22\361\3\121\1\361\1\121\1\361"+
    "\1\121\3\361\20\121\1\361\2\121\11\0\1\365\1\0"+
    "\1\365\66\0\1\370\3\0\1\370\74\0\1\u0151\1\0"+
    "\1\u0151\1\0\1\u0151\1\0\1\u0151\14\0\2\u0151\2\0"+
    "\1\u0151\4\0\1\u0151\101\0\1\u0152\75\0\1\u0153\46\0"+
    "\1\u0101\3\0\1\u0101\74\0\1\30\1\0\1\30\1\0"+
    "\4\30\11\0\1\30\1\u0117\20\30\3\0\1\30\1\0"+
    "\1\30\1\0\3\30\20\0\1\30\3\0\1\30\1\0"+
    "\1\u0154\1\0\4\30\11\0\22\30\3\0\1\30\1\0"+
    "\1\30\1\0\3\30\20\0\1\30\3\0\1\30\1\0"+
    "\1\30\1\0\4\30\11\0\1\u0155\1\30\1\u0156\1\u0157"+
    "\4\30\1\u0158\4\30\1\u0159\4\30\3\0\1\30\1\0"+
    "\1\30\1\0\3\30\20\0\1\u0158\3\0\1\30\1\0"+
    "\1\30\1\0\4\30\11\0\7\30\1\u015a\12\30\3\0"+
    "\1\30\1\0\1\30\1\0\3\30\20\0\1\30\3\0"+
    "\1\30\1\0\1\u015b\1\0\4\30\11\0\22\30\3\0"+
    "\1\30\1\0\1\30\1\0\3\30\20\0\1\30\3\0"+
    "\1\30\1\0\1\30\1\0\4\30\11\0\1\30\1\u015c"+
    "\20\30\3\0\1\30\1\0\1\30\1\0\3\30\20\0"+
    "\1\30\3\0\1\30\1\0\1\30\1\0\4\30\11\0"+
    "\16\30\1\u015d\3\30\3\0\1\30\1\0\1\30\1\0"+
    "\3\30\20\0\1\30\3\0\1\30\1\0\1\30\1\0"+
    "\4\30\11\0\13\30\1\u015e\6\30\3\0\1\30\1\0"+
    "\1\30\1\0\3\30\20\0\1\30\62\0\1\u0144\21\0"+
    "\1\30\1\0\1\u015f\1\0\4\30\11\0\22\30\3\0"+
    "\1\30\1\0\1\30\1\0\3\30\20\0\1\30\3\0"+
    "\1\30\1\0\1\30\1\0\4\30\11\0\16\30\1\u0160"+
    "\3\30\3\0\1\30\1\0\1\30\1\0\3\30\20\0"+
    "\1\30\3\0\1\30\1\0\1\30\1\0\4\30\11\0"+
    "\1\30\1\u0161\20\30\3\0\1\30\1\0\1\30\1\0"+
    "\3\30\20\0\1\30\3\0\1\30\1\0\1\u0162\1\0"+
    "\4\30\11\0\22\30\3\0\1\30\1\0\1\30\1\0"+
    "\3\30\20\0\1\30\3\0\1\30\1\0\1\30\1\0"+
    "\4\30\11\0\16\30\1\u0163\3\30\3\0\1\30\1\0"+
    "\1\30\1\0\3\30\20\0\1\30\3\0\1\30\1\0"+
    "\1\30\1\0\4\30\11\0\7\30\1\u0164\12\30\3\0"+
    "\1\30\1\0\1\30\1\0\3\30\20\0\1\30\3\0"+
    "\1\30\1\0\1\30\1\0\4\30\11\0\1\u0165\12\30"+
    "\1\u0166\6\30\3\0\1\30\1\0\1\30\1\0\3\30"+
    "\20\0\1\30\3\0\1\30\1\0\1\30\1\0\4\30"+
    "\11\0\16\30\1\u0167\3\30\3\0\1\30\1\0\1\30"+
    "\1\0\3\30\20\0\1\30\3\0\1\30\1\0\1\30"+
    "\1\0\4\30\11\0\13\30\1\u0168\6\30\3\0\1\30"+
    "\1\0\1\30\1\0\3\30\20\0\1\30\3\0\1\30"+
    "\1\0\1\30\1\0\4\30\11\0\6\30\1\u0169\13\30"+
    "\3\0\1\30\1\0\1\30\1\0\3\30\20\0\1\30"+
    "\3\0\1\30\1\0\1\u016a\1\0\4\30\11\0\22\30"+
    "\3\0\1\30\1\0\1\30\1\0\3\30\20\0\1\30"+
    "\3\0\1\30\1\0\1\u016b\1\0\4\30\11\0\22\30"+
    "\3\0\1\30\1\0\1\30\1\0\3\30\20\0\1\30"+
    "\3\0\1\30\1\0\1\30\1\0\4\30\11\0\1\30"+
    "\1\u016c\6\30\1\u016d\11\30\3\0\1\30\1\0\1\30"+
    "\1\0\3\30\20\0\1\u016d\3\0\1\30\1\0\1\30"+
    "\1\0\4\30\11\0\6\30\1\u016e\13\30\3\0\1\30"+
    "\1\0\1\30\1\0\3\30\20\0\1\30\3\0\1\30"+
    "\1\0\1\u016f\1\0\4\30\11\0\22\30\3\0\1\30"+
    "\1\0\1\30\1\0\3\30\20\0\1\30\3\0\1\30"+
    "\1\0\1\30\1\0\4\30\11\0\5\30\1\u0170\14\30"+
    "\3\0\1\30\1\0\1\30\1\0\3\30\20\0\1\30"+
    "\3\0\1\30\1\0\1\30\1\0\4\30\11\0\10\30"+
    "\1\u0171\11\30\3\0\1\30\1\0\1\30\1\0\3\30"+
    "\20\0\1\u0171\3\0\1\30\1\0\1\30\1\0\4\30"+
    "\11\0\1\30\1\u0172\20\30\3\0\1\30\1\0\1\30"+
    "\1\0\3\30\20\0\1\30\3\0\1\30\1\0\1\30"+
    "\1\0\4\30\11\0\1\30\1\u0173\20\30\3\0\1\30"+
    "\1\0\1\30\1\0\3\30\20\0\1\30\3\0\1\30"+
    "\1\0\1\30\1\0\4\30\11\0\4\30\1\u0174\15\30"+
    "\3\0\1\30\1\0\1\30\1\0\3\30\20\0\1\30"+
    "\3\0\1\30\1\0\1\30\1\0\4\30\11\0\4\30"+
    "\1\u0175\15\30\3\0\1\30\1\0\1\30\1\0\3\30"+
    "\20\0\1\30\3\0\1\30\1\0\1\30\1\0\4\30"+
    "\11\0\1\30\1\u0176\20\30\3\0\1\30\1\0\1\30"+
    "\1\0\3\30\20\0\1\30\3\0\1\30\1\0\1\30"+
    "\1\0\4\30\11\0\13\30\1\u0177\6\30\3\0\1\30"+
    "\1\0\1\30\1\0\3\30\20\0\1\30\3\0\1\30"+
    "\1\0\1\30\1\0\4\30\11\0\16\30\1\u0178\3\30"+
    "\3\0\1\30\1\0\1\30\1\0\3\30\20\0\1\30"+
    "\3\0\1\30\1\0\1\30\1\0\4\30\11\0\1\30"+
    "\1\u0179\20\30\3\0\1\30\1\0\1\30\1\0\3\30"+
    "\20\0\1\30\3\0\1\30\1\0\1\30\1\0\4\30"+
    "\11\0\16\30\1\u017a\3\30\3\0\1\30\1\0\1\30"+
    "\1\0\3\30\20\0\1\30\3\0\1\30\1\0\1\30"+
    "\1\0\4\30\11\0\5\30\1\u017b\14\30\3\0\1\u017c"+
    "\1\0\1\30\1\0\3\30\20\0\1\30\3\0\1\30"+
    "\1\0\1\30\1\0\4\30\11\0\1\30\1\u017d\20\30"+
    "\3\0\1\30\1\0\1\30\1\0\3\30\20\0\1\30"+
    "\31\0\1\u017e\102\0\1\u017f\72\0\1\u0180\103\0\1\u0181"+
    "\103\0\1\u0182\101\0\1\u0183\43\0\1\u0183\55\0\1\u0184"+
    "\60\0\1\u0185\102\0\1\u0186\76\0\1\u0187\46\0\1\30"+
    "\1\0\1\30\1\0\2\30\1\u0188\1\30\11\0\22\30"+
    "\3\0\1\30\1\0\1\30\1\0\3\30\20\0\1\30"+
    "\3\0\1\30\1\0\1\30\1\0\4\30\11\0\1\u0189"+
    "\3\30\1\u018a\15\30\3\0\1\30\1\0\1\30\1\0"+
    "\3\30\20\0\1\30\3\0\1\30\1\0\1\30\1\0"+
    "\4\30\11\0\16\30\1\u018b\3\30\3\0\1\30\1\0"+
    "\1\30\1\0\3\30\20\0\1\30\3\0\1\30\1\0"+
    "\1\30\1\0\4\30\11\0\13\30\1\u018c\6\30\3\0"+
    "\1\30\1\0\1\30\1\0\3\30\20\0\1\30\3\0"+
    "\1\30\1\0\1\30\1\0\4\30\11\0\1\u018d\21\30"+
    "\3\0\1\30\1\0\1\30\1\0\3\30\20\0\1\30"+
    "\3\0\1\30\1\0\1\u018e\1\0\4\30\11\0\22\30"+
    "\3\0\1\30\1\0\1\30\1\0\3\30\20\0\1\30"+
    "\5\0\1\u018f\2\0\3\u018f\1\0\1\u0144\7\0\22\u018f"+
    "\3\0\1\u018f\1\0\1\u018f\1\0\3\u018f\20\0\1\u018f"+
    "\32\0\1\u0190\61\0\3\u0146\60\0\1\u0148\66\0\1\u0191"+
    "\65\0\1\u0192\44\0\1\u014a\100\0\1\u014c\132\0\1\u0193"+
    "\33\0\11\121\1\u014f\1\121\1\u014f\1\356\1\121\1\357"+
    "\1\121\1\360\60\121\42\0\1\u0194\60\0\1\u0195\57\0"+
    "\1\30\1\0\1\30\1\0\4\30\11\0\5\30\1\u0196"+
    "\14\30\3\0\1\30\1\0\1\30\1\0\3\30\20\0"+
    "\1\30\3\0\1\30\1\0\1\30\1\0\4\30\11\0"+
    "\3\30\1\u0197\16\30\3\0\1\30\1\0\1\30\1\0"+
    "\3\30\20\0\1\30\3\0\1\30\1\0\1\u0198\1\0"+
    "\4\30\11\0\22\30\3\0\1\30\1\0\1\30\1\0"+
    "\3\30\20\0\1\30\3\0\1\30\1\0\1\30\1\0"+
    "\4\30\11\0\7\30\1\u0199\12\30\3\0\1\30\1\0"+
    "\1\30\1\0\3\30\20\0\1\30\3\0\1\30\1\0"+
    "\1\30\1\0\4\30\11\0\15\30\1\u019a\4\30\3\0"+
    "\1\30\1\0\1\30\1\0\3\30\20\0\1\30\3\0"+
    "\1\30\1\0\1\30\1\0\4\30\11\0\14\30\1\u019b"+
    "\5\30\3\0\1\30\1\0\1\30\1\0\3\30\20\0"+
    "\1\30\3\0\1\30\1\0\1\30\1\0\4\30\11\0"+
    "\1\u019c\21\30\3\0\1\30\1\0\1\30\1\0\3\30"+
    "\20\0\1\30\3\0\1\30\1\0\1\30\1\0\4\30"+
    "\11\0\12\30\1\u019d\7\30\3\0\1\30\1\0\1\30"+
    "\1\0\3\30\20\0\1\30\3\0\1\30\1\0\1\30"+
    "\1\0\4\30\11\0\17\30\1\u019e\2\30\3\0\1\30"+
    "\1\0\1\30\1\0\3\30\20\0\1\30\3\0\1\30"+
    "\1\0\1\30\1\0\4\30\11\0\11\30\1\u019f\10\30"+
    "\3\0\1\30\1\0\1\30\1\0\3\30\20\0\1\30"+
    "\3\0\1\30\1\0\1\30\1\0\4\30\11\0\4\30"+
    "\1\u01a0\15\30\3\0\1\30\1\0\1\30\1\0\3\30"+
    "\20\0\1\30\3\0\1\30\1\0\1\30\1\0\4\30"+
    "\11\0\13\30\1\u01a1\6\30\3\0\1\30\1\0\1\30"+
    "\1\0\3\30\20\0\1\30\3\0\1\30\1\0\1\30"+
    "\1\0\4\30\11\0\1\30\1\u01a2\20\30\3\0\1\30"+
    "\1\0\1\30\1\0\3\30\20\0\1\30\3\0\1\30"+
    "\1\0\1\u01a3\1\0\4\30\11\0\22\30\3\0\1\30"+
    "\1\0\1\30\1\0\3\30\20\0\1\30\3\0\1\30"+
    "\1\0\1\30\1\0\4\30\11\0\15\30\1\u01a4\4\30"+
    "\3\0\1\30\1\0\1\30\1\0\3\30\20\0\1\30"+
    "\3\0\1\30\1\0\1\30\1\0\4\30\11\0\5\30"+
    "\1\u01a5\14\30\3\0\1\30\1\0\1\30\1\0\3\30"+
    "\20\0\1\30\3\0\1\30\1\0\1\30\1\0\4\30"+
    "\11\0\4\30\1\u01a6\15\30\3\0\1\30\1\0\1\30"+
    "\1\0\3\30\20\0\1\30\3\0\1\30\1\0\1\30"+
    "\1\0\4\30\11\0\13\30\1\u01a7\6\30\3\0\1\30"+
    "\1\0\1\30\1\0\3\30\20\0\1\30\3\0\1\30"+
    "\1\0\1\30\1\0\4\30\11\0\16\30\1\u01a8\3\30"+
    "\3\0\1\30\1\0\1\30\1\0\3\30\20\0\1\30"+
    "\3\0\1\30\1\0\1\30\1\0\4\30\11\0\1\30"+
    "\1\u01a9\20\30\3\0\1\30\1\0\1\30\1\0\3\30"+
    "\20\0\1\30\3\0\1\30\1\0\1\30\1\0\4\30"+
    "\11\0\13\30\1\u01aa\6\30\3\0\1\30\1\0\1\30"+
    "\1\0\3\30\20\0\1\30\3\0\1\30\1\0\1\30"+
    "\1\0\4\30\11\0\1\30\1\u01ab\20\30\3\0\1\30"+
    "\1\0\1\30\1\0\3\30\20\0\1\30\3\0\1\30"+
    "\1\0\1\30\1\0\4\30\11\0\1\u01ac\21\30\3\0"+
    "\1\30\1\0\1\30\1\0\3\30\20\0\1\30\3\0"+
    "\1\30\1\0\1\30\1\0\4\30\11\0\1\30\1\u01ad"+
    "\20\30\3\0\1\30\1\0\1\30\1\0\3\30\20\0"+
    "\1\30\3\0\1\30\1\0\1\30\1\0\4\30\11\0"+
    "\14\30\1\u01ae\5\30\3\0\1\30\1\0\1\30\1\0"+
    "\3\30\20\0\1\30\3\0\1\30\1\0\1\u01af\1\0"+
    "\4\30\11\0\22\30\3\0\1\30\1\0\1\30\1\0"+
    "\3\30\20\0\1\30\3\0\1\30\1\0\1\30\1\0"+
    "\4\30\11\0\10\30\1\u01b0\11\30\3\0\1\30\1\0"+
    "\1\30\1\0\3\30\20\0\1\u01b0\3\0\1\30\1\0"+
    "\1\30\1\0\4\30\11\0\1\u01b1\21\30\3\0\1\30"+
    "\1\0\1\30\1\0\3\30\20\0\1\30\3\0\1\30"+
    "\1\0\1\30\1\0\4\30\11\0\6\30\1\u01b2\13\30"+
    "\3\0\1\30\1\0\1\30\1\0\3\30\20\0\1\30"+
    "\3\0\1\30\1\0\1\30\1\0\4\30\11\0\11\30"+
    "\1\u01b3\10\30\3\0\1\30\1\0\1\30\1\0\3\30"+
    "\20\0\1\30\3\0\1\30\1\0\1\30\1\0\4\30"+
    "\11\0\1\u01b4\21\30\3\0\1\30\1\0\1\30\1\0"+
    "\3\30\20\0\1\30\3\0\1\30\1\0\1\30\1\0"+
    "\4\30\11\0\11\30\1\u01b5\10\30\3\0\1\30\1\0"+
    "\1\30\1\0\3\30\20\0\1\30\3\0\1\30\1\0"+
    "\1\30\1\0\4\30\11\0\12\30\1\u01b6\7\30\3\0"+
    "\1\30\1\0\1\30\1\0\3\30\20\0\1\30\3\0"+
    "\1\30\1\0\1\u01b7\1\0\4\30\11\0\22\30\3\0"+
    "\1\30\1\0\1\30\1\0\3\30\20\0\1\30\3\0"+
    "\1\30\1\0\1\30\1\0\4\30\11\0\1\u01b8\21\30"+
    "\3\0\1\30\1\0\1\30\1\0\3\30\20\0\1\30"+
    "\3\0\1\30\1\0\1\30\1\0\4\30\11\0\1\30"+
    "\1\u01b9\20\30\3\0\1\30\1\0\1\30\1\0\3\30"+
    "\20\0\1\30\3\0\1\30\1\0\1\30\1\0\4\30"+
    "\11\0\13\30\1\u01ba\6\30\3\0\1\30\1\0\1\30"+
    "\1\0\3\30\20\0\1\30\3\0\1\30\1\0\1\u01bb"+
    "\1\0\4\30\11\0\22\30\3\0\1\30\1\0\1\30"+
    "\1\0\3\30\20\0\1\30\37\0\1\u01bc\103\0\1\u01bd"+
    "\43\0\1\u01be\6\0\1\u01bf\37\0\1\u01c0\35\0\1\u01c1"+
    "\126\0\1\u01c2\46\0\1\u01c3\100\0\1\u01c4\117\0\1\u01c5"+
    "\116\0\1\u01c6\75\0\1\u01c7\44\0\1\30\1\0\1\30"+
    "\1\0\4\30\11\0\13\30\1\u01c8\6\30\3\0\1\30"+
    "\1\0\1\30\1\0\3\30\20\0\1\30\3\0\1\30"+
    "\1\0\1\30\1\0\4\30\11\0\16\30\1\u01c9\3\30"+
    "\3\0\1\30\1\0\1\30\1\0\3\30\20\0\1\30"+
    "\3\0\1\30\1\0\1\30\1\0\4\30\11\0\5\30"+
    "\1\u01ca\14\30\3\0\1\30\1\0\1\30\1\0\3\30"+
    "\20\0\1\30\3\0\1\30\1\0\1\30\1\0\4\30"+
    "\11\0\13\30\1\u01cb\6\30\3\0\1\30\1\0\1\30"+
    "\1\0\3\30\20\0\1\30\3\0\1\30\1\0\1\30"+
    "\1\0\4\30\11\0\16\30\1\u01cc\3\30\3\0\1\30"+
    "\1\0\1\30\1\0\3\30\20\0\1\30\3\0\1\30"+
    "\1\0\1\30\1\0\4\30\11\0\5\30\1\u01cd\14\30"+
    "\3\0\1\30\1\0\1\30\1\0\3\30\20\0\1\30"+
    "\3\0\1\30\1\0\1\30\1\0\4\30\11\0\1\30"+
    "\1\u01ce\20\30\3\0\1\30\1\0\1\30\1\0\3\30"+
    "\20\0\1\30\3\0\1\u018f\1\0\1\u018f\1\0\4\u018f"+
    "\1\u01cf\1\0\1\u01d0\6\0\22\u018f\3\0\1\u018f\1\0"+
    "\1\u018f\1\0\3\u018f\20\0\1\u018f\35\0\1\u01d1\102\0"+
    "\1\u01d2\46\0\1\u01d3\2\0\3\u01d3\11\0\22\u01d3\3\0"+
    "\1\u01d3\1\0\1\u01d3\1\0\3\u01d3\20\0\1\u01d3\13\0"+
    "\1\u01d4\2\u01d5\127\0\1\u01d6\37\0\1\30\1\0\1\30"+
    "\1\0\4\30\11\0\2\30\1\u01d7\17\30\3\0\1\30"+
    "\1\0\1\30\1\0\3\30\20\0\1\30\3\0\1\30"+
    "\1\0\1\30\1\0\4\30\11\0\6\30\1\u01d8\13\30"+
    "\3\0\1\30\1\0\1\30\1\0\3\30\20\0\1\30"+
    "\3\0\1\30\1\0\1\30\1\0\4\30\11\0\11\30"+
    "\1\u01d9\10\30\3\0\1\30\1\0\1\30\1\0\3\30"+
    "\20\0\1\30\3\0\1\30\1\0\1\30\1\0\4\30"+
    "\11\0\1\u01da\21\30\3\0\1\30\1\0\1\30\1\0"+
    "\3\30\20\0\1\30\3\0\1\30\1\0\1\30\1\0"+
    "\4\30\11\0\1\u01db\21\30\3\0\1\30\1\0\1\30"+
    "\1\0\3\30\20\0\1\30\3\0\1\30\1\0\1\30"+
    "\1\0\4\30\11\0\3\30\1\u01dc\16\30\3\0\1\30"+
    "\1\0\1\30\1\0\3\30\20\0\1\30\3\0\1\30"+
    "\1\0\1\30\1\0\4\30\11\0\3\30\1\u01dd\16\30"+
    "\3\0\1\30\1\0\1\30\1\0\3\30\20\0\1\30"+
    "\3\0\1\30\1\0\1\30\1\0\4\30\11\0\2\30"+
    "\1\u01de\17\30\3\0\1\30\1\0\1\30\1\0\3\30"+
    "\20\0\1\30\3\0\1\30\1\0\1\30\1\0\4\30"+
    "\11\0\5\30\1\u01df\14\30\3\0\1\30\1\0\1\30"+
    "\1\0\3\30\20\0\1\30\3\0\1\30\1\0\1\30"+
    "\1\0\4\30\11\0\21\30\1\u01e0\3\0\1\30\1\0"+
    "\1\30\1\0\3\30\20\0\1\30\3\0\1\30\1\0"+
    "\1\u01e1\1\0\4\30\11\0\22\30\3\0\1\30\1\0"+
    "\1\30\1\0\3\30\20\0\1\30\3\0\1\30\1\0"+
    "\1\30\1\0\4\30\11\0\16\30\1\u01e2\3\30\3\0"+
    "\1\30\1\0\1\30\1\0\3\30\20\0\1\30\3\0"+
    "\1\30\1\0\1\30\1\0\4\30\11\0\11\30\1\u01e3"+
    "\10\30\3\0\1\30\1\0\1\30\1\0\3\30\20\0"+
    "\1\30\3\0\1\30\1\0\1\30\1\0\4\30\11\0"+
    "\1\u01e4\21\30\3\0\1\30\1\0\1\30\1\0\3\30"+
    "\20\0\1\30\3\0\1\30\1\0\1\30\1\0\4\30"+
    "\11\0\6\30\1\u01e5\13\30\3\0\1\30\1\0\1\30"+
    "\1\0\3\30\20\0\1\30\3\0\1\30\1\0\1\30"+
    "\1\0\4\30\11\0\5\30\1\u01e6\14\30\3\0\1\30"+
    "\1\0\1\30\1\0\3\30\20\0\1\30\3\0\1\30"+
    "\1\0\1\30\1\0\4\30\11\0\6\30\1\u01e7\13\30"+
    "\3\0\1\30\1\0\1\30\1\0\3\30\20\0\1\30"+
    "\3\0\1\30\1\0\1\30\1\0\4\30\11\0\14\30"+
    "\1\u01e8\5\30\3\0\1\30\1\0\1\30\1\0\3\30"+
    "\20\0\1\30\3\0\1\30\1\0\1\30\1\0\4\30"+
    "\11\0\5\30\1\u01e9\14\30\3\0\1\30\1\0\1\30"+
    "\1\0\3\30\20\0\1\30\3\0\1\30\1\0\1\30"+
    "\1\0\4\30\11\0\11\30\1\u01ea\10\30\3\0\1\30"+
    "\1\0\1\30\1\0\3\30\20\0\1\30\3\0\1\30"+
    "\1\0\1\30\1\0\4\30\11\0\13\30\1\u01eb\6\30"+
    "\3\0\1\30\1\0\1\30\1\0\3\30\20\0\1\30"+
    "\3\0\1\30\1\0\1\30\1\0\4\30\11\0\6\30"+
    "\1\u01ec\13\30\3\0\1\30\1\0\1\30\1\0\3\30"+
    "\20\0\1\30\3\0\1\30\1\0\1\30\1\0\4\30"+
    "\11\0\1\30\1\u01ed\20\30\3\0\1\30\1\0\1\30"+
    "\1\0\3\30\20\0\1\30\3\0\1\30\1\0\1\30"+
    "\1\0\4\30\11\0\6\30\1\u01ee\13\30\3\0\1\30"+
    "\1\0\1\30\1\0\3\30\20\0\1\30\35\0\1\u01ef"+
    "\50\0\1\u01f0\6\0\1\u01f1\37\0\1\u01f2\77\0\1\u01f3"+
    "\41\0\1\u01bf\37\0\1\u01c0\66\0\1\u01f4\63\0\1\u01c6"+
    "\100\0\1\u01f5\105\0\1\u01f6\77\0\1\u01f7\63\0\1\u01c6"+
    "\37\0\1\u01f8\62\0\1\u01f9\45\0\1\30\1\0\1\30"+
    "\1\0\4\30\11\0\16\30\1\u01fa\3\30\3\0\1\30"+
    "\1\0\1\30\1\0\3\30\20\0\1\30\3\0\1\30"+
    "\1\0\1\u01fb\1\0\4\30\11\0\22\30\3\0\1\30"+
    "\1\0\1\30\1\0\3\30\20\0\1\30\3\0\1\30"+
    "\1\0\1\30\1\0\4\30\11\0\6\30\1\u01fc\13\30"+
    "\3\0\1\30\1\0\1\30\1\0\3\30\20\0\1\30"+
    "\3\0\1\30\1\0\1\30\1\0\4\30\11\0\10\30"+
    "\1\u01fd\11\30\3\0\1\30\1\0\1\30\1\0\3\30"+
    "\20\0\1\u01fd\3\0\1\30\1\0\1\30\1\0\4\30"+
    "\11\0\1\30\1\u01fe\20\30\3\0\1\30\1\0\1\30"+
    "\1\0\3\30\20\0\1\30\3\0\1\30\1\0\1\u01ff"+
    "\1\0\4\30\11\0\22\30\3\0\1\30\1\0\1\30"+
    "\1\0\3\30\20\0\1\30\3\0\1\30\1\0\1\30"+
    "\1\0\4\30\11\0\14\30\1\u0200\5\30\3\0\1\30"+
    "\1\0\1\30\1\0\3\30\20\0\1\30\15\0\1\u01d0"+
    "\107\0\1\u0201\111\0\1\u0202\60\0\1\u01d5\110\0\1\u0203"+
    "\56\0\1\30\1\0\1\30\1\0\4\30\11\0\10\30"+
    "\1\u0204\11\30\3\0\1\30\1\0\1\30\1\0\3\30"+
    "\20\0\1\u0204\3\0\1\30\1\0\1\30\1\0\4\30"+
    "\11\0\16\30\1\u0205\3\30\3\0\1\30\1\0\1\30"+
    "\1\0\3\30\20\0\1\30\3\0\1\30\1\0\1\u0206"+
    "\1\0\4\30\11\0\22\30\3\0\1\30\1\0\1\30"+
    "\1\0\3\30\20\0\1\30\3\0\1\30\1\0\1\30"+
    "\1\0\4\30\11\0\1\30\1\u0207\20\30\3\0\1\30"+
    "\1\0\1\30\1\0\3\30\20\0\1\30\3\0\1\30"+
    "\1\0\1\30\1\0\4\30\11\0\16\30\1\u0208\3\30"+
    "\3\0\1\30\1\0\1\30\1\0\3\30\20\0\1\30"+
    "\3\0\1\30\1\0\1\30\1\0\4\30\11\0\13\30"+
    "\1\u0209\6\30\3\0\1\30\1\0\1\30\1\0\3\30"+
    "\20\0\1\30\3\0\1\30\1\0\1\u020a\1\0\4\30"+
    "\11\0\22\30\3\0\1\30\1\0\1\30\1\0\3\30"+
    "\20\0\1\30\3\0\1\30\1\0\1\30\1\0\4\30"+
    "\11\0\6\30\1\u020b\13\30\3\0\1\30\1\0\1\30"+
    "\1\0\3\30\20\0\1\30\3\0\1\30\1\0\1\u020c"+
    "\1\0\4\30\11\0\22\30\3\0\1\30\1\0\1\30"+
    "\1\0\3\30\20\0\1\30\3\0\1\30\1\0\1\30"+
    "\1\0\4\30\11\0\1\30\1\u020d\20\30\3\0\1\30"+
    "\1\0\1\30\1\0\3\30\20\0\1\30\3\0\1\30"+
    "\1\0\1\u020e\1\0\4\30\11\0\22\30\3\0\1\30"+
    "\1\0\1\30\1\0\3\30\20\0\1\30\3\0\1\30"+
    "\1\0\1\30\1\0\4\30\11\0\7\30\1\u020f\12\30"+
    "\3\0\1\30\1\0\1\30\1\0\3\30\20\0\1\30"+
    "\3\0\1\30\1\0\1\30\1\0\4\30\11\0\14\30"+
    "\1\u0210\5\30\3\0\1\30\1\0\1\30\1\0\3\30"+
    "\20\0\1\30\3\0\1\30\1\0\1\30\1\0\4\30"+
    "\11\0\4\30\1\u0211\15\30\3\0\1\30\1\0\1\30"+
    "\1\0\3\30\20\0\1\30\3\0\1\30\1\0\1\u0212"+
    "\1\0\4\30\11\0\22\30\3\0\1\30\1\0\1\30"+
    "\1\0\3\30\20\0\1\30\3\0\1\30\1\0\1\30"+
    "\1\0\4\30\11\0\6\30\1\u0213\13\30\3\0\1\30"+
    "\1\0\1\30\1\0\3\30\20\0\1\30\3\0\1\30"+
    "\1\0\1\u0214\1\0\4\30\11\0\22\30\3\0\1\30"+
    "\1\0\1\30\1\0\3\30\20\0\1\30\3\0\1\30"+
    "\1\0\1\30\1\0\4\30\11\0\1\30\1\u0215\20\30"+
    "\3\0\1\30\1\0\1\30\1\0\3\30\20\0\1\30"+
    "\36\0\1\u0216\101\0\1\u0217\55\0\1\u01f1\37\0\1\u01f2"+
    "\31\0\1\u0218\100\0\1\u01c6\107\0\1\u01f5\37\0\1\u0219"+
    "\51\0\1\u021a\126\0\1\u0216\41\0\1\u01f9\37\0\1\u021b"+
    "\27\0\1\30\1\0\1\30\1\0\4\30\11\0\22\30"+
    "\3\0\1\30\1\0\1\30\1\0\1\30\1\u021c\1\30"+
    "\20\0\1\30\3\0\1\30\1\0\1\30\1\0\4\30"+
    "\11\0\1\30\1\u021d\20\30\3\0\1\30\1\0\1\30"+
    "\1\0\3\30\20\0\1\30\3\0\1\30\1\0\1\30"+
    "\1\0\4\30\11\0\10\30\1\u021e\11\30\3\0\1\30"+
    "\1\0\1\30\1\0\3\30\20\0\1\u021e\3\0\1\30"+
    "\1\0\1\30\1\0\4\30\11\0\22\30\3\0\1\30"+
    "\1\0\1\30\1\0\1\30\1\u021f\1\30\20\0\1\30"+
    "\3\0\1\30\1\0\1\30\1\0\4\30\11\0\22\30"+
    "\3\0\1\30\1\0\1\30\1\0\1\30\1\u0220\1\30"+
    "\20\0\1\30\3\0\1\30\1\0\1\30\1\0\4\30"+
    "\11\0\7\30\1\u0221\12\30\3\0\1\30\1\0\1\30"+
    "\1\0\3\30\20\0\1\30\44\0\1\u0222\47\0\3\u0223"+
    "\76\0\3\u0224\66\0\1\30\1\0\1\30\1\0\4\30"+
    "\11\0\13\30\1\u0225\6\30\3\0\1\30\1\0\1\30"+
    "\1\0\3\30\20\0\1\30\3\0\1\30\1\0\1\30"+
    "\1\0\4\30\11\0\13\30\1\u0226\6\30\3\0\1\30"+
    "\1\0\1\30\1\0\3\30\20\0\1\30\3\0\1\30"+
    "\1\0\1\30\1\0\4\30\11\0\6\30\1\u0227\13\30"+
    "\3\0\1\30\1\0\1\30\1\0\3\30\20\0\1\30"+
    "\3\0\1\30\1\0\1\u0228\1\0\4\30\11\0\22\30"+
    "\3\0\1\30\1\0\1\30\1\0\3\30\20\0\1\30"+
    "\3\0\1\30\1\0\1\30\1\0\4\30\11\0\6\30"+
    "\1\u0229\13\30\3\0\1\30\1\0\1\30\1\0\3\30"+
    "\20\0\1\30\3\0\1\30\1\0\1\30\1\0\4\30"+
    "\11\0\22\30\3\0\1\30\1\0\1\30\1\0\1\30"+
    "\1\u022a\1\30\20\0\1\30\3\0\1\30\1\0\1\u022b"+
    "\1\0\4\30\11\0\22\30\3\0\1\30\1\0\1\30"+
    "\1\0\3\30\20\0\1\30\3\0\1\30\1\0\1\30"+
    "\1\0\4\30\11\0\5\30\1\u022c\14\30\3\0\1\30"+
    "\1\0\1\30\1\0\3\30\20\0\1\30\3\0\1\30"+
    "\1\0\1\30\1\0\4\30\11\0\5\30\1\u022d\14\30"+
    "\3\0\1\30\1\0\1\30\1\0\3\30\20\0\1\30"+
    "\3\0\1\30\1\0\1\u022e\1\0\4\30\11\0\22\30"+
    "\3\0\1\30\1\0\1\30\1\0\3\30\20\0\1\30"+
    "\3\0\1\30\1\0\1\30\1\0\4\30\11\0\22\30"+
    "\3\0\1\30\1\0\1\30\1\0\1\30\1\u022f\1\30"+
    "\20\0\1\30\3\0\1\30\1\0\1\30\1\0\4\30"+
    "\11\0\1\30\1\u0230\20\30\3\0\1\30\1\0\1\30"+
    "\1\0\3\30\20\0\1\30\3\0\1\30\1\0\1\u0231"+
    "\1\0\4\30\11\0\22\30\3\0\1\30\1\0\1\30"+
    "\1\0\3\30\20\0\1\30\14\0\1\u0216\37\0\1\u0232"+
    "\55\0\1\u01f1\104\0\1\u01bf\57\0\1\u021a\37\0\1\u0233"+
    "\27\0\1\30\1\0\1\30\1\0\4\30\11\0\22\30"+
    "\3\0\1\30\1\0\1\30\1\0\1\30\1\u0234\1\30"+
    "\20\0\1\30\3\0\1\30\1\0\1\30\1\0\4\30"+
    "\11\0\1\u0235\21\30\3\0\1\30\1\0\1\30\1\0"+
    "\3\30\20\0\1\30\3\0\1\30\1\0\1\30\1\0"+
    "\4\30\11\0\22\30\3\0\1\30\1\0\1\30\1\0"+
    "\1\30\1\u0236\1\30\20\0\1\30\3\0\1\30\1\0"+
    "\1\30\1\0\4\30\11\0\6\30\1\u0237\13\30\3\0"+
    "\1\30\1\0\1\30\1\0\3\30\20\0\1\30\3\0"+
    "\1\30\1\0\1\30\1\0\4\30\11\0\22\30\3\0"+
    "\1\30\1\0\1\30\1\0\1\30\1\u0238\1\30\20\0"+
    "\1\30\3\0\1\30\1\0\1\30\1\0\4\30\11\0"+
    "\2\30\1\u0239\17\30\3\0\1\30\1\0\1\30\1\0"+
    "\3\30\20\0\1\30\25\0\1\u023a\60\0\1\u023b\2\0"+
    "\3\u023b\3\u0223\1\u023c\5\0\22\u023b\3\0\1\u023b\1\0"+
    "\1\u023b\1\0\3\u023b\20\0\1\u023b\13\0\3\u0224\24\0"+
    "\1\u023d\41\0\1\30\1\0\1\30\1\0\4\30\11\0"+
    "\11\30\1\u023e\10\30\3\0\1\30\1\0\1\30\1\0"+
    "\3\30\20\0\1\30\3\0\1\30\1\0\1\30\1\0"+
    "\4\30\11\0\6\30\1\u023f\13\30\3\0\1\30\1\0"+
    "\1\30\1\0\3\30\20\0\1\30\3\0\1\30\1\0"+
    "\1\30\1\0\4\30\11\0\14\30\1\u0240\5\30\3\0"+
    "\1\30\1\0\1\30\1\0\3\30\20\0\1\30\3\0"+
    "\1\30\1\0\1\u0241\1\0\4\30\11\0\22\30\3\0"+
    "\1\30\1\0\1\30\1\0\3\30\20\0\1\30\3\0"+
    "\1\30\1\0\1\30\1\0\4\30\11\0\7\30\1\u0242"+
    "\12\30\3\0\1\30\1\0\1\30\1\0\3\30\20\0"+
    "\1\30\3\0\1\30\1\0\1\30\1\0\4\30\11\0"+
    "\7\30\1\u0243\12\30\3\0\1\30\1\0\1\30\1\0"+
    "\3\30\20\0\1\30\3\0\1\30\1\0\1\30\1\0"+
    "\4\30\11\0\1\30\1\u0244\20\30\3\0\1\30\1\0"+
    "\1\30\1\0\3\30\20\0\1\30\3\0\1\30\1\0"+
    "\1\30\1\0\4\30\11\0\7\30\1\u0245\12\30\3\0"+
    "\1\30\1\0\1\30\1\0\3\30\20\0\1\30\3\0"+
    "\1\30\1\0\1\30\1\0\4\30\11\0\2\30\1\u0246"+
    "\17\30\3\0\1\30\1\0\1\30\1\0\3\30\20\0"+
    "\1\30\3\0\1\30\1\0\1\30\1\0\4\30\11\0"+
    "\7\30\1\u0247\12\30\3\0\1\30\1\0\1\30\1\0"+
    "\3\30\20\0\1\30\3\0\1\30\1\0\1\30\1\0"+
    "\4\30\11\0\22\30\3\0\1\30\1\0\1\30\1\0"+
    "\1\30\1\u0248\1\30\20\0\1\30\3\0\1\30\1\0"+
    "\1\30\1\0\4\30\11\0\7\30\1\u0249\12\30\3\0"+
    "\1\30\1\0\1\30\1\0\3\30\20\0\1\30\3\0"+
    "\1\30\1\0\1\30\1\0\4\30\11\0\22\30\3\0"+
    "\1\30\1\0\1\30\1\0\1\30\1\u024a\1\30\20\0"+
    "\1\30\13\0\3\u023a\31\0\1\335\34\0\1\u023b\1\0"+
    "\1\u023b\1\0\4\u023b\3\u024b\6\0\22\u023b\3\0\1\u023b"+
    "\1\0\1\u023b\1\0\3\u023b\20\0\1\u023b\5\0\1\u023b"+
    "\2\0\3\u023b\11\0\22\u023b\3\0\1\u023b\1\0\1\u023b"+
    "\1\0\3\u023b\20\0\1\u023b\37\0\1\u024c\44\0\1\30"+
    "\1\0\1\u024d\1\0\4\30\11\0\22\30\3\0\1\30"+
    "\1\0\1\30\1\0\3\30\20\0\1\30\3\0\1\30"+
    "\1\0\1\30\1\0\4\30\11\0\14\30\1\u024e\5\30"+
    "\3\0\1\30\1\0\1\30\1\0\3\30\20\0\1\30"+
    "\3\0\1\30\1\0\1\30\1\0\4\30\11\0\5\30"+
    "\1\u024f\14\30\3\0\1\30\1\0\1\30\1\0\3\30"+
    "\20\0\1\30\3\0\1\30\1\0\1\30\1\0\4\30"+
    "\11\0\3\30\1\u0250\16\30\3\0\1\30\1\0\1\30"+
    "\1\0\3\30\20\0\1\30\3\0\1\30\1\0\1\30"+
    "\1\0\4\30\11\0\10\30\1\u0251\11\30\3\0\1\30"+
    "\1\0\1\30\1\0\3\30\20\0\1\u0251\3\0\1\30"+
    "\1\0\1\30\1\0\4\30\11\0\5\30\1\u0252\14\30"+
    "\3\0\1\30\1\0\1\30\1\0\3\30\20\0\1\30"+
    "\3\0\1\30\1\0\1\30\1\0\4\30\11\0\5\30"+
    "\1\u0253\14\30\3\0\1\30\1\0\1\30\1\0\3\30"+
    "\20\0\1\30\3\0\1\30\1\0\1\30\1\0\4\30"+
    "\11\0\21\30\1\u0254\3\0\1\30\1\0\1\30\1\0"+
    "\3\30\20\0\1\30\3\0\1\30\1\0\1\30\1\0"+
    "\4\30\11\0\22\30\3\0\1\30\1\0\1\30\1\0"+
    "\1\30\1\u0255\1\30\20\0\1\30\5\0\1\u0256\2\0"+
    "\3\u0256\3\u024b\6\0\22\u0256\3\0\1\u0256\1\0\1\u0256"+
    "\1\0\3\u0256\20\0\1\u0256\31\0\1\u0257\52\0\1\30"+
    "\1\0\1\30\1\0\4\30\11\0\6\30\1\u0258\13\30"+
    "\3\0\1\30\1\0\1\30\1\0\3\30\20\0\1\30"+
    "\3\0\1\30\1\0\1\30\1\0\4\30\11\0\6\30"+
    "\1\u0259\13\30\3\0\1\30\1\0\1\30\1\0\3\30"+
    "\20\0\1\30\3\0\1\30\1\0\1\30\1\0\4\30"+
    "\11\0\22\30\3\0\1\30\1\0\1\30\1\0\1\30"+
    "\1\u025a\1\30\20\0\1\30\3\0\1\30\1\0\1\30"+
    "\1\0\4\30\11\0\20\30\1\u025b\1\30\3\0\1\30"+
    "\1\0\1\30\1\0\3\30\20\0\1\30\3\0\1\u0256"+
    "\1\0\1\u0256\1\0\4\u0256\3\u025c\6\0\22\u0256\3\0"+
    "\1\u0256\1\0\1\u0256\1\0\3\u0256\3\0\1\u025d\14\0"+
    "\1\u0256\53\0\1\u025e\30\0\1\30\1\0\1\u025f\1\0"+
    "\4\30\11\0\22\30\3\0\1\30\1\0\1\30\1\0"+
    "\3\30\20\0\1\30\3\0\1\30\1\0\1\u0260\1\0"+
    "\4\30\11\0\22\30\3\0\1\30\1\0\1\30\1\0"+
    "\3\30\20\0\1\30\3\0\1\30\1\0\1\30\1\0"+
    "\4\30\11\0\22\30\3\0\1\30\1\0\1\30\1\0"+
    "\1\30\1\u0261\1\30\20\0\1\30\3\0\1\30\1\0"+
    "\1\30\1\0\4\30\11\0\1\u0262\21\30\3\0\1\30"+
    "\1\0\1\30\1\0\3\30\20\0\1\30\13\0\3\u025c"+
    "\45\0\1\u025d\101\0\1\u0263\44\0\1\u0264\53\0\1\30"+
    "\1\0\1\30\1\0\4\30\11\0\16\30\1\u0265\3\30"+
    "\3\0\1\30\1\0\1\30\1\0\3\30\20\0\1\30"+
    "\37\0\1\u0266\44\0\1\30\1\0\1\u0267\1\0\4\30"+
    "\11\0\22\30\3\0\1\30\1\0\1\30\1\0\3\30"+
    "\20\0\1\30\53\0\1\u0268\30\0\1\30\1\0\1\30"+
    "\1\0\4\30\11\0\11\30\1\u0269\10\30\3\0\1\30"+
    "\1\0\1\30\1\0\3\30\20\0\1\30\5\0\1\u026a"+
    "\106\0\3\u026a\42\0\1\u026b\33\0\3\u026b\1\0\1\u026c"+
    "\24\0\1\u026d\34\0\1\u026e\43\0\1\u026f\74\0\1\u0270"+
    "\104\0\1\u0271\74\0\1\u0272\104\0\1\u0273\74\0\1\u0274"+
    "\104\0\1\u0275\47\0\3\u0273\31\0\1\u0276\75\0\1\u0277"+
    "\53\0\1\u0273\162\0\1\u0273\1\0";

  /** 
   * The transition table of the DFA
   */
  final private static int yytrans [] = yy_unpack();


  /* error codes */
  final private static int YY_UNKNOWN_ERROR = 0;
  final private static int YY_ILLEGAL_STATE = 1;
  final private static int YY_NO_MATCH = 2;
  final private static int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  final private static String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Internal error: unknown state",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final static byte YY_ATTRIBUTE[] = {
     0,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  9, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  9,  9,  9,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  9,  9,  9, 
     9,  1,  9,  9,  1,  9,  1,  1,  9,  1,  1,  1,  1,  1,  9,  1, 
     1,  1,  1,  1,  1,  9,  1,  9,  9,  1,  1,  9,  1,  1,  9,  9, 
     1,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9, 
     9,  9,  9,  9,  9,  1,  1,  9,  1,  1,  1,  1,  9,  9,  1,  0, 
     1,  1,  1,  1,  0,  9,  1,  1,  1,  1,  1,  1,  9,  9,  0,  1, 
     1,  0,  0,  1,  0,  0,  9,  0,  0,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  9,  9,  9,  1,  9,  9,  1,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  9,  1,  1,  9,  9, 
     1,  0,  9,  9,  1,  1,  9,  9,  9,  9,  9,  9,  1,  0,  0,  0, 
     0,  1,  1,  9,  9,  9,  1,  0,  0,  0,  1,  9,  1,  0,  0,  0, 
     1,  1,  1,  0,  9,  0,  9,  1,  0,  9,  9,  9,  9,  9,  0,  0, 
     1,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  9,  1, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  1,  1,  1, 
     9,  9,  9,  0,  0,  0,  1,  0,  1,  9,  1,  9,  0,  9,  9,  1, 
     1,  0,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  1,  1,  1,  1,  0,  0, 
     9,  0,  0,  0,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  0,  0,  0,  9, 
     0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  1,  1,  1,  1,  1,  9, 
     0,  0,  9,  1,  9,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  0, 
     0,  9,  0,  0,  0,  0,  0,  9,  0,  1,  1,  1,  1,  1,  1,  1, 
     0,  0,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  0,  0,  0,  9,  0,  9,  1,  1,  1,  1,  1, 
     1,  0,  0,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  9,  9,  1,  1,  1,  1,  1,  1,  0,  0,  0,  0,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  0,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  0,  0,  1,  1,  1,  1,  0,  0,  0,  1,  1, 
     1,  1,  9,  0,  1,  0,  1,  0,  1,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  9,  0
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[YY_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn; 

  /** 
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean yy_atBOL = true;

  /** yy_atEOF == true <=> the scanner is at the EOF */
  private boolean yy_atEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean yy_eof_done;

  /* user code: */
    /** TODO, Do not forget to change yy_refill to the following code:
         private boolean yy_refill() throws java.io.IOException {

             // first: make room (if you can)
             if (yy_startRead > 0) {
                 char temp[] = yy_buffer;
                 //only if the new buffer will be changed then
                 //we have to keep the old copy
                 if (yy_endRead - yy_startRead > 0 || yy_startRead == yy_old_buffer.length) {
                     temp = yy_old_buffer;
                     yy_old_buffer = yy_buffer;
                     yy_old_pushbackPos = yy_pushbackPos;
                     duplicated_string_length = yy_endRead - yy_startRead;
                 }
                 System.arraycopy(yy_buffer, yy_startRead,
                         temp, 0,
                         yy_endRead - yy_startRead);
                 yy_buffer = temp;

                 // translate stored positions
                 yy_endRead -= yy_startRead;
                 yy_currentPos -= yy_startRead;
                 yy_markedPos -= yy_startRead;
                 yy_pushbackPos -= yy_startRead;
                 yy_startRead = 0;
             }

             // is the buffer big enough?
             if (yy_currentPos >= yy_buffer.length) {
                 // if not: blow it up
                 char newBuffer[] = new char[yy_currentPos * 2];
                 System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
                 yy_buffer = newBuffer;
                 newBuffer = new char[yy_currentPos * 2];
                 System.arraycopy(yy_old_buffer, 0, newBuffer, 0, yy_old_buffer.length);
                 System.arraycopy(yy_buffer, duplicated_string_length, newBuffer, yy_old_buffer.length, newBuffer.length - yy_old_buffer.length);
                 duplicated_string_length += newBuffer.length - yy_old_buffer.length;
                 yy_old_buffer = newBuffer;
             }

             // finally: fill the buffer with new input
             int numRead = yy_reader.read(yy_buffer, yy_endRead,
                     yy_buffer.length - yy_endRead);

             if (numRead < 0) {
                 return true;
             } else {
                 yy_endRead += numRead;
                 return false;
             }
         }
    */
    
    private String heredoc = null;
    private boolean asp_tags = false;
    private boolean short_tags_allowed = true;
    private StateStack stack = new StateStack();
    private ParserClient parserClient;
    private Pattern[] tasksPatterns;
    private char yy_old_buffer[] = new char[YY_BUFFERSIZE];
    private int yy_old_pushbackPos;
    private int duplicated_string_length;

	public void setUseAspTagsAsPhp(boolean useAspTagsAsPhp) {
		asp_tags = useAspTagsAsPhp;
	}
	
    private void pushState(int state) {
        stack.pushStack(yy_lexical_state);
        yybegin(state);
    }

    private void popState() {
        yybegin(stack.popStack());
    }

    public int getCurrentLine() {
        return yyline;
    }


    private int getTokenStartPosition() {
        return yy_startRead - yy_pushbackPos;
    }

    private int getTokenLength() {
        return yy_markedPos - yy_startRead;
    }

    public void setParserClient(ParserClient parserClient) {
        this.parserClient = parserClient;
    }

    public void setTasksPatterns(Pattern[] tasksPatterns){
    	this.tasksPatterns = tasksPatterns;
    }
    
    private void handlePHPStart() {
        if (parserClient != null) {
            int startPosition = getTokenStartPosition();
            parserClient.handlePHPStart(startPosition, startPosition + getTokenLength());
        }
    }

    private void handlePHPEnd() {
        if (parserClient != null) {
            int startPosition = getTokenStartPosition();
            parserClient.handlePHPEnd(startPosition, startPosition + getTokenLength());
        }
    }

    public int getLength() {
        return yy_endRead - yy_pushbackPos;
    }

    private IntHashtable phpDocs = new IntHashtable();
    private IntHashtable phpDocsStart = new IntHashtable();
    private String lastPhpDocText;
    private Integer lastPhpDocStart = new Integer(0);
    private Object[] phpDocValues = new Object [2];
    private String firstPhpDocText = null;
    private Integer firstPhpDocStart = null;
    private boolean noSymboles = true;

	private int commentStartPosition;
	private int commentStartLine;
	private StringBuffer comment = new StringBuffer();
	
	private void handlePHPDocStart() {
		handleCommentStart();
		lastPhpDocStart = new Integer(getTokenStartPosition());    
	}
		    
    private void handlePHPDocEnd() {
    	handleCommentEnd();
  	    lastPhpDocText = comment.toString();
        if (lastPhpDocText != null) {
            if (noSymboles &&((firstPhpDocStart == null)|| (firstPhpDocStart.compareTo(lastPhpDocStart) > 0))){
                    firstPhpDocText = lastPhpDocText;
                    firstPhpDocStart = lastPhpDocStart;
            }
        }
    }

    public Object[] getPHPDoc(int location) {
        phpDocValues[0] = phpDocs.get(location);
        phpDocValues[1] = phpDocsStart.get(location);
        return phpDocValues;
    }

   public Object[] getFirstPHPDoc() {
        phpDocValues[0] = firstPhpDocText;
        phpDocValues[1] = firstPhpDocStart;
        return phpDocValues;
    }

    private void appendTextToComment(){
    	comment.append(yy_buffer, yy_startRead, yy_markedPos-yy_startRead);
    }
    
    private void clearCommentBuffer(){
    	comment.delete(0,comment.length());
    }
    
	private void handleCommentStart() {
		commentStartPosition = yy_startRead;
		commentStartLine = yyline;
		clearCommentBuffer();
		appendTextToComment();
	}
	
	private void handleCommentEnd() {
		appendTextToComment();
		checkForTasks();
	}
	
    private void checkForTasks(){
		ArrayList matchers = createMatcherList();		
		int searchStartPosition = 0;
		int lineCnt = 0;
		int commentEndIndex = comment.length();
		//if its a multiline comment or a phpDoc no nead to search the */ in the end 
		if(comment.charAt(0)=='/' && comment.charAt(1)=='*'){
			commentEndIndex -=2;
		}
		Matcher matcher = getMinimalMatcher(matchers, searchStartPosition);
		while (matcher != null) {
			String taskName = matcher.group();
			int taskStartPositionInComment = matcher.start();
			int descriptionStartPositionInComment = matcher.end();			

			//counting the lines till the begining of the task
			lineCnt+= countNewLines(searchStartPosition, matcher.start());
			
			//calculating the endPosition of the task
			searchStartPosition = matcher.end();
			matcher = getMinimalMatcher(matchers, searchStartPosition);
			
			int endSearch = (matcher == null)? commentEndIndex : matcher.start();
			int taskEndPositionInComment = descriptionStartPositionInComment;
			while(taskEndPositionInComment < endSearch){
				char ch = comment.charAt(taskEndPositionInComment);
				if(ch == '\n' || ch == '\r'){
					break;
				}
				taskEndPositionInComment++;
			}

			String description = comment.substring(descriptionStartPositionInComment,taskEndPositionInComment);
			description = description.trim();
			parserClient.handleTask(taskName, description, commentStartPosition  - yy_pushbackPos + taskStartPositionInComment, commentStartPosition  - yy_pushbackPos + taskEndPositionInComment  - 1,commentStartLine + lineCnt);
		}
    }
    
    private int countNewLines(int startIndex, int endIndex) {
    	int lineCnt = 0;
		for(int i = startIndex; i < endIndex ; i++){
			char ch = comment.charAt(i);
			if(ch == '\n' || ch == '\r'){
				char oppositeCh = (ch == '\n') ? '\r' : '\n';
				lineCnt++;
				if(i + 1 < endIndex){
					ch = comment.charAt(i + 1);
					if(ch == oppositeCh){
						i++;
					}
				}
			}
		}
		return lineCnt;
    }

	private ArrayList createMatcherList() {
		ArrayList list = new ArrayList(tasksPatterns.length);
		for (int i = 0; i < tasksPatterns.length; i++) {
			list.add(i, tasksPatterns[i].matcher(comment));
		}
		return list;
	}

	private Matcher getMinimalMatcher(ArrayList matchers, int startPosition) {
		Matcher minimal = null;
		int size = matchers.size();
		for (int i = 0; i < size;) {
			Matcher tmp = (Matcher) matchers.get(i);
			if (tmp.find(startPosition)) {
				if (minimal == null || tmp.start() < minimal.start()) {
					minimal = tmp;
				}
				i++;
			} else {
				matchers.remove(i);
				size--;
			}
		}
		return minimal;
	}

    private Symbol createFullSymbol(int symbolNumber) {
        Symbol symbol = createSymbol(symbolNumber);
        symbol.value = yytext();
        return symbol;
    }

    private Symbol createSymbol(int symbolNumber) {
        int leftPosition = getTokenStartPosition();
        if (lastPhpDocText != null) {
            if(lastPhpDocText == firstPhpDocText) {
                if(symbolNumber == ParserConstants5.T_FUNCTION ||
                        symbolNumber == ParserConstants5.T_CLASS ||
                        symbolNumber == ParserConstants5.T_DEFINE){
                    phpDocs.put(leftPosition, lastPhpDocText);
                    phpDocsStart.put(leftPosition, new Integer(lastPhpDocStart.intValue()));
                    firstPhpDocText = null;
                }
            } else {
                phpDocs.put(leftPosition, lastPhpDocText);
                phpDocsStart.put(leftPosition, new Integer(lastPhpDocStart.intValue()));
            }
            lastPhpDocText = null;
        }
        if(noSymboles && symbolNumber != ParserConstants5.T_INLINE_HTML){	// T_INLINE_HTML doesn't infect the phpDoc 
        	noSymboles = false;        
        }
        return new Symbol(symbolNumber, leftPosition, leftPosition + getTokenLength());
    }

    public String createString(int startOffset, int endOffset) {
        int startPosition = startOffset + yy_pushbackPos;
        int length =  endOffset - startOffset;
        if(startPosition < 0){
            startPosition = startOffset + yy_old_pushbackPos;
            if(startPosition + length < yy_old_buffer.length){
            	if(startPosition < 0 || startPosition + length > yy_old_buffer.length){
                	return "";
                }
                return new String(yy_old_buffer, startPosition, length);
            }
            // meaning the string was splited between the two buffers
            int remainder = startPosition + length  + duplicated_string_length - yy_old_buffer.length;
            length -= remainder;
            if(startPosition < 0 || startPosition + length > yy_old_buffer.length || remainder > yy_buffer.length){
            	return "";
            }
            return (new String(yy_old_buffer, startPosition, length) + new String(yy_buffer, 0, remainder));
        }
    	if(startPosition < 0 || startPosition + length > yy_buffer.length){
        	return "";
        }
        return new String(yy_buffer, startPosition, length);
    }



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public CompletionLexer5(java.io.Reader in) {
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public CompletionLexer5(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the split, compressed DFA transition table.
   *
   * @return the unpacked transition table
   */
  private static int [] yy_unpack() {
    int [] trans = new int[29965];
    int offset = 0;
    offset = yy_unpack(yy_packed0, offset, trans);
    return trans;
  }

  /** 
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the index of the last entry
   */
  private static int yy_unpack(String packed, int offset, int [] trans) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] yy_unpack_cmap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 190) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   IOException  if any I/O-Error occurs
   */
  private boolean yy_refill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead, 
                       yy_buffer, 0, 
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead, 
                                            yy_buffer.length-yy_endRead);

    if (numRead < 0) {
      return true;
    }
    else {
      yy_endRead+= numRead;  
      return false;
    }
  }


  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */

    if (yy_reader != null)
      yy_reader.close();
  }


  /**
   * Closes the current stream, and resets the
   * scanner to read from a new input stream.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  final public void yyreset(java.io.Reader reader) throws java.io.IOException {
    yyclose();
    yy_reader = reader;
    yy_atBOL  = true;
    yy_atEOF  = false;
    yy_endRead = yy_startRead = 0;
    yy_currentPos = yy_markedPos = yy_pushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    yy_lexical_state = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return yy_lexical_state;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  final public char yycharat(int pos) {
    return yy_buffer[yy_startRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    String message;
    try {
      message = YY_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = YY_ERROR_MSG[YY_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      yy_ScanError(YY_PUSHBACK_2BIG);

    yy_markedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void yy_do_eof() throws java.io.IOException {
    if (!yy_eof_done) {
      yy_eof_done = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int yy_input;
    int yy_action;

    // cached fields:
    int yy_currentPos_l;
    int yy_startRead_l;
    int yy_markedPos_l;
    int yy_endRead_l = yy_endRead;
    char [] yy_buffer_l = yy_buffer;
    char [] yycmap_l = yycmap;

    int [] yytrans_l = yytrans;
    int [] yy_rowMap_l = yy_rowMap;
    byte [] yy_attr_l = YY_ATTRIBUTE;

    while (true) {
      yy_markedPos_l = yy_markedPos;

      boolean yy_r = false;
      for (yy_currentPos_l = yy_startRead; yy_currentPos_l < yy_markedPos_l;
                                                             yy_currentPos_l++) {
        switch (yy_buffer_l[yy_currentPos_l]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yy_r = false;
          break;
        case '\r':
          yyline++;
          yy_r = true;
          break;
        case '\n':
          if (yy_r)
            yy_r = false;
          else {
            yyline++;
          }
          break;
        default:
          yy_r = false;
        }
      }

      if (yy_r) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean yy_peek;
        if (yy_markedPos_l < yy_endRead_l)
          yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        else if (yy_atEOF)
          yy_peek = false;
        else {
          boolean eof = yy_refill();
          yy_markedPos_l = yy_markedPos;
          yy_buffer_l = yy_buffer;
          if (eof) 
            yy_peek = false;
          else 
            yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        }
        if (yy_peek) yyline--;
      }
      yy_action = -1;

      yy_startRead_l = yy_currentPos_l = yy_currentPos = 
                       yy_startRead = yy_markedPos_l;

      yy_state = yy_lexical_state;


      yy_forAction: {
        while (true) {

          if (yy_currentPos_l < yy_endRead_l)
            yy_input = yy_buffer_l[yy_currentPos_l++];
          else if (yy_atEOF) {
            yy_input = YYEOF;
            break yy_forAction;
          }
          else {
            // store back cached positions
            yy_currentPos  = yy_currentPos_l;
            yy_markedPos   = yy_markedPos_l;
            boolean eof = yy_refill();
            // get translated positions and possibly new buffer
            yy_currentPos_l  = yy_currentPos;
            yy_markedPos_l   = yy_markedPos;
            yy_buffer_l      = yy_buffer;
            yy_endRead_l     = yy_endRead;
            if (eof) {
              yy_input = YYEOF;
              break yy_forAction;
            }
            else {
              yy_input = yy_buffer_l[yy_currentPos_l++];
            }
          }
          int yy_next = yytrans_l[ yy_rowMap_l[yy_state] + yycmap_l[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = yy_attr_l[yy_state];
          if ( (yy_attributes & 1) == 1 ) {
            yy_action = yy_state; 
            yy_markedPos_l = yy_currentPos_l; 
            if ( (yy_attributes & 8) == 8 ) break yy_forAction;
          }

        }
      }

      // store back cached position
      yy_markedPos = yy_markedPos_l;

      switch (yy_action) {

        case 108: 
          { return createSymbol(ParserConstants5.T_TIMES); }
        case 632: break;
        case 105: 
          { return createSymbol(ParserConstants5.T_EQUAL); }
        case 633: break;
        case 101: 
          { return createSymbol(ParserConstants5.T_MINUS); }
        case 634: break;
        case 98: 
          { return createSymbol(ParserConstants5.T_QUATE); }
        case 635: break;
        case 94: 
          { return createSymbol(ParserConstants5.T_NEKUDA); }
        case 636: break;
        case 44: 
          { return createSymbol(ParserConstants5.T_MINUS); }
        case 637: break;
        case 25: 
          { return createSymbol(ParserConstants5.T_DOLLAR); }
        case 638: break;
        case 17: 
          { return createSymbol(ParserConstants5.T_NEKUDA); }
        case 639: break;
        case 52: 
          { return createSymbol(ParserConstants5.T_EQUAL); }
        case 640: break;
        case 55: 
          { return createSymbol(ParserConstants5.T_TIMES); }
        case 641: break;
        case 61: 
          { return createSymbol(ParserConstants5.T_COMMA); }
        case 642: break;
        case 64: 
          { return createSymbol(ParserConstants5.T_TILDA); }
        case 643: break;
        case 113: 
          { return createSymbol(ParserConstants5.T_KOVA); }
        case 644: break;
        case 111: 
          { return createSymbol(ParserConstants5.T_REFERENCE); }
        case 645: break;
        case 109: 
          { return createSymbol(ParserConstants5.T_DIV); }
        case 646: break;
        case 106: 
          { return createSymbol(ParserConstants5.T_NOT); }
        case 647: break;
        case 103: 
          { return createSymbol(ParserConstants5.T_NEKUDOTAIM); }
        case 648: break;
        case 100: 
          { return createSymbol(ParserConstants5.T_CURLY_OPEN); }
        case 649: break;
        case 99: 
          { return createSymbol(ParserConstants5.T_BACKQUATE); }
        case 650: break;
        case 95: 
          { return createSymbol(ParserConstants5.T_PLUS); }
        case 651: break;
        case 46: 
          { return createSymbol(ParserConstants5.T_NEKUDOTAIM); }
        case 652: break;
        case 29: 
          { return createSymbol(ParserConstants5.T_SEMICOLON); }
        case 653: break;
        case 19: 
          { return createSymbol(ParserConstants5.T_PLUS); }
        case 654: break;
        case 53: 
          { return createSymbol(ParserConstants5.T_NOT); }
        case 655: break;
        case 56: 
          { return createSymbol(ParserConstants5.T_DIV); }
        case 656: break;
        case 58: 
          { return createSymbol(ParserConstants5.T_REFERENCE); }
        case 657: break;
        case 60: 
          { return createSymbol(ParserConstants5.T_KOVA); }
        case 658: break;
        case 62: 
          { return createSymbol(ParserConstants5.T_OPEN_RECT); }
        case 659: break;
        case 63: 
          { return createSymbol(ParserConstants5.T_CLOSE_RECT); }
        case 660: break;
        case 115: 
          { return createSymbol(ParserConstants5.T_QUESTION_MARK); }
        case 661: break;
        case 65: 
          { return createSymbol(ParserConstants5.T_QUESTION_MARK); }
        case 662: break;
        case 104: 
          { return createSymbol(ParserConstants5.T_OPEN_PARENTHESE); }
        case 663: break;
        case 48: 
          { return createSymbol(ParserConstants5.T_OPEN_PARENTHESE); }
        case 664: break;
        case 50: 
          { return createSymbol(ParserConstants5.T_CLOSE_PARENTHESE); }
        case 665: break;
        case 110: 
          { return createSymbol(ParserConstants5.T_PRECENT); }
        case 666: break;
        case 107: 
          { return createSymbol(ParserConstants5.T_RGREATER); }
        case 667: break;
        case 102: 
          { return createSymbol(ParserConstants5.T_LGREATER); }
        case 668: break;
        case 45: 
          { return createSymbol(ParserConstants5.T_LGREATER); }
        case 669: break;
        case 54: 
          { return createSymbol(ParserConstants5.T_RGREATER); }
        case 670: break;
        case 57: 
          { return createSymbol(ParserConstants5.T_PRECENT); }
        case 671: break;
        case 112: 
          { return createSymbol(ParserConstants5.T_OR); }
        case 672: break;
        case 59: 
          { return createSymbol(ParserConstants5.T_OR); }
        case 673: break;
        case 66: 
          { return createSymbol(ParserConstants5.T_AT); }
        case 674: break;
        case 116: 
          { return createSymbol(ParserConstants5.T_CURLY_CLOSE); }
        case 675: break;
        case 247: 
        case 336: 
          {  /* treat numbers (almost) as strings inside encapsulated strings */
    return createSymbol(ParserConstants5.T_NUM_STRING);
 }
        case 676: break;
        case 85: 
        case 86: 
          { 
	yypushback(1);
	yybegin(ST_HEREDOC);
 }
        case 677: break;
        case 333: 
          { 
	yypushback(1);
	pushState(ST_VAR_OFFSET);
	return createFullSymbol(ParserConstants5.T_VARIABLE);
 }
        case 678: break;
        case 118: 
          { 
appendTextToComment();
//	yymore();
 }
        case 679: break;
        case 92: 
          { 
    popState();
    pushState(ST_IN_SCRIPTING);
    return createFullSymbol(ParserConstants5.T_STRING_VARNAME);
 }
        case 680: break;
        case 87: 
          { 
     heredoc = null;
	yybegin(ST_IN_SCRIPTING);
	return createFullSymbol(ParserConstants5.T_END_HEREDOC);
 }
        case 681: break;
        case 125: 
        case 126: 
          { 
appendTextToComment();
//	yymore();
 }
        case 682: break;
        case 189: 
          { 
	return createSymbol(ParserConstants5.T_PAAMAYIM_NEKUDOTAYIM);
 }
        case 683: break;
        case 531: 
          { 
	return createSymbol(ParserConstants5.T_PRIVATE);
 }
        case 684: break;
        case 529: 
          { 
	return createSymbol(ParserConstants5.T_REQUIRE);
 }
        case 685: break;
        case 527: 
          { 
	return createSymbol(ParserConstants5.T_FOREACH);
 }
        case 686: break;
        case 525: 
          { 
	return createSymbol(ParserConstants5.T_DECLARE);
 }
        case 687: break;
        case 524: 
          { 
	return createSymbol(ParserConstants5.T_DEFAULT);
 }
        case 688: break;
        case 521: 
          { 
	return createSymbol(ParserConstants5.T_INCLUDE);
 }
        case 689: break;
        case 515: 
          { 
	return createSymbol(ParserConstants5.T_EXTENDS);
 }
        case 690: break;
        case 505: 
          { 
	return createSymbol(ParserConstants5.T_GLOBAL);
 }
        case 691: break;
        case 491: 
          { 
	return createSymbol(ParserConstants5.T_PUBLIC);
 }
        case 692: break;
        case 488: 
          { 
	return createSymbol(ParserConstants5.T_RETURN);
 }
        case 693: break;
        case 487: 
          { 
	return createSymbol(ParserConstants5.T_SWITCH);
 }
        case 694: break;
        case 486: 
          { 
	return createSymbol(ParserConstants5.T_STATIC);
 }
        case 695: break;
        case 475: 
          { 
	return createSymbol(ParserConstants5.T_ELSEIF);
 }
        case 696: break;
        case 472: 
          { 
	return createSymbol(ParserConstants5.T_ENDFOR);
 }
        case 697: break;
        case 93: 
        case 96: 
          { 
	return createFullSymbol(ParserConstants5.T_NUM_STRING);
 }
        case 698: break;
        case 188: 
          { 
	return createSymbol(ParserConstants5.T_IS_GREATER_OR_EQUAL);
 }
        case 699: break;
        case 207: 
          { 
	return createSymbol(ParserConstants5.T_IS_SMALLER_OR_EQUAL);
 }
        case 700: break;
        case 234: 
        case 235: 
        case 236: 
          { 
	yypushback(1);
	return createSymbol(ParserConstants5.T_ENCAPSED_AND_WHITESPACE);
 }
        case 701: break;
        case 610: 
          { 
    return createFullSymbol(ParserConstants5.T_VAR_COMMENT);
 }
        case 702: break;
        case 596: 
          { 
    return createSymbol(ParserConstants5.T_METHOD_C);
 }
        case 703: break;
        case 592: 
          { 
	return createSymbol(ParserConstants5.T_IMPLEMENTS);
 }
        case 704: break;
        case 591: 
          { 
	return createSymbol(ParserConstants5.T_INSTANCEOF);
 }
        case 705: break;
        case 589: 
          { 
	return createSymbol(ParserConstants5.T_ENDFOREACH);
 }
        case 706: break;
        case 588: 
          { 
	return createSymbol(ParserConstants5.T_ENDDECLARE);
 }
        case 707: break;
        case 583: 
          { 
    return createSymbol(ParserConstants5.T_CLASS_C);
 }
        case 708: break;
        case 562: 
          { 
	return createSymbol(ParserConstants5.T_OBJECT_CAST);
 }
        case 709: break;
        case 561: 
          { 
	return createSymbol(ParserConstants5.T_STRING_CAST);
 }
        case 710: break;
        case 538: 
          { 
	return createSymbol(ParserConstants5.T_ARRAY_CAST);
 }
        case 711: break;
        case 536: 
          { 
	return createSymbol(ParserConstants5.T_UNSET_CAST);
 }
        case 712: break;
        case 503: 
          { 
	return createSymbol(ParserConstants5.T_DOUBLE_CAST);
 }
        case 713: break;
        case 440: 
          { 
	return createSymbol(ParserConstants5.T_PRINT);
 }
        case 714: break;
        case 438: 
          { 
	return createSymbol(ParserConstants5.T_WHILE);
 }
        case 715: break;
        case 437: 
          { 
	return createSymbol(ParserConstants5.T_ARRAY);
 }
        case 716: break;
        case 431: 
          { 
	return createSymbol(ParserConstants5.T_CLASS);
 }
        case 717: break;
        case 430: 
          { 
	return createSymbol(ParserConstants5.T_CLONE);
 }
        case 718: break;
        case 429: 
          { 
	return createSymbol(ParserConstants5.T_CATCH);
 }
        case 719: break;
        case 428: 
          { 
	return createSymbol(ParserConstants5.T_CONST);
 }
        case 720: break;
        case 426: 
          { 
	return createSymbol(ParserConstants5.T_UNSET);
 }
        case 721: break;
        case 423: 
          { 
	return createSymbol(ParserConstants5.T_FINAL);
 }
        case 722: break;
        case 419: 
          { 
	return createSymbol(ParserConstants5.T_THROW);
 }
        case 723: break;
        case 417: 
          { 
	return createSymbol(ParserConstants5.T_ISSET);
 }
        case 724: break;
        case 413: 
          { 
	return createSymbol(ParserConstants5.T_BREAK);
 }
        case 725: break;
        case 412: 
          { 
	return createSymbol(ParserConstants5.T_EMPTY);
 }
        case 726: break;
        case 406: 
          { 
	return createSymbol(ParserConstants5.T_ENDIF);
 }
        case 727: break;
        case 28: 
          { 
    pushState(ST_IN_SCRIPTING);
    return createSymbol(ParserConstants5.T_CURLY_OPEN);

 }
        case 728: break;
        case 141: 
          { 
	return createSymbol(ParserConstants5.T_PLUS_EQUAL);
 }
        case 729: break;
        case 172: 
          { 
	return createSymbol(ParserConstants5.T_LOGICAL_OR);
 }
        case 730: break;
        case 186: 
          { 
	return createSymbol(ParserConstants5.T_MINUS_EQUAL);
 }
        case 731: break;
        case 216: 
          { 
	return createSymbol(ParserConstants5.T_BOOLEAN_AND);
 }
        case 732: break;
        case 218: 
          { 
	return createSymbol(ParserConstants5.T_BOOLEAN_OR);
 }
        case 733: break;
        case 266: 
          { 
	return createSymbol(ParserConstants5.T_LOGICAL_XOR);
 }
        case 734: break;
        case 278: 
          { 
	return createSymbol(ParserConstants5.T_EXIT);
 }
        case 735: break;
        case 295: 
          { 
	return createSymbol(ParserConstants5.T_LOGICAL_AND);
 }
        case 736: break;
        case 345: 
          { 
	return createSymbol(ParserConstants5.T_ECHO);
 }
        case 737: break;
        case 346: 
          { 
	return createSymbol(ParserConstants5.T_ELSE);
 }
        case 738: break;
        case 348: 
          { 
	return createSymbol(ParserConstants5.T_EVAL);
 }
        case 739: break;
        case 366: 
          { 
	return createSymbol(ParserConstants5.T_CASE);
 }
        case 740: break;
        case 376: 
          { 
	return createSymbol(ParserConstants5.T_LIST);
 }
        case 741: break;
        case 119: 
        case 121: 
          { 
appendTextToComment();
 }
        case 742: break;
        case 117: 
          { 
appendTextToComment();
 }
        case 743: break;
        case 120: 
          { 
appendTextToComment();
 }
        case 744: break;
        case 220: 
        case 330: 
        case 331: 
          { 
    handlePHPEnd();
    yybegin(YYINITIAL);
    return createSymbol(ParserConstants5.T_SEMICOLON);  /* implicit ';' at php-end tag */
 }
        case 745: break;
        case 246: 
          { 
	return createSymbol(ParserConstants5.T_OBJECT_OPERATOR);
 }
        case 746: break;
        case 72: 
          { 
    yybegin(ST_IN_SCRIPTING);
    return createSymbol(ParserConstants5.T_QUATE);
 }
        case 747: break;
        case 26: 
          { 
    yybegin(ST_DOUBLE_QUOTES);
    return createSymbol(ParserConstants5.T_QUATE);
 }
        case 748: break;
        case 15: 
        case 68: 
        case 71: 
        case 73: 
        case 74: 
        case 76: 
        case 77: 
        case 79: 
        case 82: 
        case 83: 
        case 84: 
          { 
	// do nothing
 }
        case 749: break;
        case 150: 
          { 
    return createFullSymbol(ParserConstants5.T_CONSTANT_ENCAPSED_STRING);
 }
        case 750: break;
        case 185: 
          { 
    pushState(ST_LOOKING_FOR_PROPERTY);
    return createSymbol(ParserConstants5.T_OBJECT_OPERATOR);
 }
        case 751: break;
        case 321: 
          { 
	return createSymbol(ParserConstants5.T_IS_NOT_IDENTICAL);
 }
        case 752: break;
        case 89: 
          { 
    popState();
    return createFullSymbol(ParserConstants5.T_STRING);
 }
        case 753: break;
        case 122: 
        case 123: 
        case 124: 
          { 
	String yytext = yytext();
	switch (yytext.charAt(yytext.length() - 1)) {
		case '?':
		case '%':
		case '>':
			yypushback(1);
			appendTextToComment();
			break;
		default:
			handleCommentEnd();
			yybegin(ST_IN_SCRIPTING);
	}
//	yymore();
 }
        case 754: break;
        case 67: 
          { 
	/* This is a temporary fix which is dependant on flex and it's implementation */
    if (!stack.isEmpty()) {
        popState();
    }
    return createSymbol(ParserConstants5.T_CURLY_CLOSE);
 }
        case 755: break;
        case 129: 
        case 629: 
          { 
    if (short_tags_allowed || yylength()>2) { /* yyleng>2 means it's not <? but <script> */
        handlePHPStart();
        yybegin(ST_IN_SCRIPTING);
        //return T_OPEN_TAG;
    } else {
        return createSymbol(ParserConstants5.T_INLINE_HTML);
    }
 }
        case 756: break;
        case 88: 
        case 90: 
          { 
    yypushback(yylength());
    popState();
 }
        case 757: break;
        case 244: 
          { 
    String text = yytext();
    int length = text.length() - 1;
    text = text.trim();
    
    yypushback(1);
    
    if (text.endsWith(";")) {
        text = text.substring(0, text.length() - 1);
        yypushback(1);
    }
    if (text.equals(heredoc)) {
        heredoc = null;
        yybegin(ST_IN_SCRIPTING);
        return createSymbol(ParserConstants5.T_END_HEREDOC);
    } else {
    	   yybegin(ST_HEREDOC);
    }
 }
        case 758: break;
        case 581: 
          { 
	return createSymbol(ParserConstants5.T_PROTECTED);
 }
        case 759: break;
        case 576: 
          { 
	return createSymbol(ParserConstants5.T_INTERFACE);
 }
        case 760: break;
        case 575: 
          { 
	return createSymbol(ParserConstants5.T_ENDSWITCH);
 }
        case 761: break;
        case 559: 
          { 
	return createSymbol(ParserConstants5.T_ABSTRACT);
 }
        case 762: break;
        case 557: 
          { 
	return createSymbol(ParserConstants5.T_CONTINUE);
 }
        case 763: break;
        case 556: 
          { 
	return createSymbol(ParserConstants5.T_FUNCTION);
 }
        case 764: break;
        case 551: 
          { 
	return createSymbol(ParserConstants5.T_ENDWHILE);
 }
        case 765: break;
        case 497: 
          { 
	return createSymbol(ParserConstants5.T_BOOL_CAST);
 }
        case 766: break;
        case 447: 
          { 
	return createSymbol(ParserConstants5.T_INT_CAST);
 }
        case 767: break;
        case 27: 
          { 
    yybegin(ST_BACKQUOTE);
    return createSymbol(ParserConstants5.T_BACKQUATE);
 }
        case 768: break;
        case 13: 
        case 14: 
        case 130: 
          { 
    return createSymbol(ParserConstants5.T_INLINE_HTML);
 }
        case 769: break;
        case 204: 
          { 
	return createSymbol(ParserConstants5.T_IS_EQUAL);
 }
        case 770: break;
        case 210: 
          { 
	return createSymbol(ParserConstants5.T_MUL_EQUAL);
 }
        case 771: break;
        case 211: 
          { 
	return createSymbol(ParserConstants5.T_DIV_EQUAL);
 }
        case 772: break;
        case 214: 
          { 
	return createSymbol(ParserConstants5.T_MOD_EQUAL);
 }
        case 773: break;
        case 215: 
          { 
	return createSymbol(ParserConstants5.T_AND_EQUAL);
 }
        case 774: break;
        case 217: 
          { 
	return createSymbol(ParserConstants5.T_OR_EQUAL);
 }
        case 775: break;
        case 219: 
          { 
	return createSymbol(ParserConstants5.T_XOR_EQUAL);
 }
        case 776: break;
        case 302: 
          { 
	return createSymbol(ParserConstants5.T_SR_EQUAL);
 }
        case 777: break;
        case 322: 
          { 
	return createSymbol(ParserConstants5.T_SL_EQUAL);
 }
        case 778: break;
        case 78: 
          { 
    yybegin(ST_IN_SCRIPTING);
    return createSymbol(ParserConstants5.T_BACKQUATE);
 }
        case 779: break;
        case 114: 
          { 
	popState();
	return createFullSymbol(ParserConstants5.T_CLOSE_RECT);
 }
        case 780: break;
        case 97: 
          { 
	yypushback(1);
	popState();
	return createSymbol(ParserConstants5.T_ENCAPSED_AND_WHITESPACE);
 }
        case 781: break;
        case 608: 
          { 
    return createSymbol(ParserConstants5.T_FUNC_C);
 }
        case 782: break;
        case 91: 
          { 
    yypushback(yylength());
    popState();
    pushState(ST_IN_SCRIPTING);
 }
        case 783: break;
        case 75: 
          { 
	return createSymbol(ParserConstants5.T_ENCAPSED_AND_WHITESPACE);
 }
        case 784: break;
        case 70: 
          { 
	return createSymbol(ParserConstants5.T_ENCAPSED_AND_WHITESPACE);
 }
        case 785: break;
        case 4: 
        case 80: 
        case 81: 
        case 240: 
        case 335: 
          { 
	return createSymbol(ParserConstants5.T_ENCAPSED_AND_WHITESPACE);
 }
        case 786: break;
        case 140: 
          { 
	return createSymbol(ParserConstants5.T_INC);
 }
        case 787: break;
        case 153: 
          { 
	return createSymbol(ParserConstants5.T_IF);
 }
        case 788: break;
        case 161: 
          { 
	return createSymbol(ParserConstants5.T_DO);
 }
        case 789: break;
        case 178: 
          { 
	return createSymbol(ParserConstants5.T_AS);
 }
        case 790: break;
        case 184: 
          { 
	return createSymbol(ParserConstants5.T_DEC);
 }
        case 791: break;
        case 187: 
          { 
	return createSymbol(ParserConstants5.T_SR);
 }
        case 792: break;
        case 208: 
          { 
	return createSymbol(ParserConstants5.T_SL);
 }
        case 793: break;
        case 228: 
          { 
    pushState(ST_LOOKING_FOR_VARNAME);
    return createSymbol(ParserConstants5.T_DOLLAR_OPEN_CURLY_BRACES);
 }
        case 794: break;
        case 252: 
          { 
    if (asp_tags || yytext().charAt(0)!='%') { /* asp comment? */
	    handleCommentEnd();
        yypushback(yylength());
		yybegin(ST_IN_SCRIPTING);
		//return T_COMMENT;
	} else {
		appendTextToComment();
	}
 }
        case 795: break;
        case 274: 
          { 
	return createSymbol(ParserConstants5.T_TRY);
 }
        case 796: break;
        case 281: 
          { 
	return createSymbol(ParserConstants5.T_FOR);
 }
        case 797: break;
        case 283: 
          { 
	return createSymbol(ParserConstants5.T_USE);
 }
        case 798: break;
        case 284: 
          { 
	return createSymbol(ParserConstants5.T_NEW);
 }
        case 799: break;
        case 303: 
          { 
	return createSymbol(ParserConstants5.T_VAR);
 }
        case 800: break;
        case 467: 
        case 468: 
          { 
    handlePHPStart();
    yybegin(ST_IN_SCRIPTING);
	//return T_OPEN_TAG;
 }
        case 801: break;
        case 69: 
          { 
	handleCommentStart();
	yybegin(ST_ONE_LINE_COMMENT);
//	yymore();
 }
        case 802: break;
        case 128: 
          { 
    if (asp_tags) {
        handlePHPStart();
        yybegin(ST_IN_SCRIPTING);
		//return T_OPEN_TAG;
    } else {
        return createSymbol(ParserConstants5.T_INLINE_HTML);
    }
 }
        case 803: break;
        case 567: 
          { 
    return createSymbol(ParserConstants5.T_LINE);
 }
        case 804: break;
        case 563: 
          { 
    return createSymbol(ParserConstants5.T_FILE);
 }
        case 805: break;
        case 16: 
        case 20: 
          { 
    return createFullSymbol(ParserConstants5.T_DNUMBER);
 }
        case 806: break;
        case 131: 
        case 256: 
          { 
    return createFullSymbol(ParserConstants5.T_DNUMBER);
 }
        case 807: break;
        case 147: 
        case 225: 
          { 
    return createFullSymbol(ParserConstants5.T_VARIABLE);
 }
        case 808: break;
        case 226: 
        case 227: 
        case 230: 
          { 
    yypushback(1);
    return createSymbol(ParserConstants5.T_ENCAPSED_AND_WHITESPACE);
 }
        case 809: break;
        case 241: 
        case 242: 
          { 
    yypushback(1);
    return createSymbol(ParserConstants5.T_ENCAPSED_AND_WHITESPACE);
 }
        case 810: break;
        case 265: 
          { 
    return createFullSymbol(ParserConstants5.T_DNUMBER);
 }
        case 811: break;
        case 251: 
          { 
	handleCommentEnd();
	yybegin(ST_IN_SCRIPTING);
	//return T_COMMENT;
 }
        case 812: break;
        case 213: 
        case 328: 
        case 329: 
          { 
    if (asp_tags) {
        handlePHPEnd();
        yybegin(YYINITIAL);
        return createSymbol(ParserConstants5.T_SEMICOLON);  /* implicit ';' at php-end tag */
    } else {
        return createSymbol(ParserConstants5.T_INLINE_HTML);
    }
 }
        case 813: break;
        case 616: 
          { 
	return createSymbol(ParserConstants5.T_HALT_COMPILER);
 }
        case 814: break;
        case 607: 
          { 
	return createSymbol(ParserConstants5.T_REQUIRE_ONCE);
 }
        case 815: break;
        case 606: 
          { 
	return createSymbol(ParserConstants5.T_INCLUDE_ONCE);
 }
        case 816: break;
        case 133: 
          { 
	return createSymbol(ParserConstants5.T_CONCAT_EQUAL);
 }
        case 817: break;
        case 203: 
          { 
	return createSymbol(ParserConstants5.T_DOUBLE_ARROW);
 }
        case 818: break;
        case 205: 
        case 206: 
          { 
	return createSymbol(ParserConstants5.T_IS_NOT_EQUAL);
 }
        case 819: break;
        case 320: 
          { 
	return createSymbol(ParserConstants5.T_IS_IDENTICAL);
 }
        case 820: break;
        case 462: 
        case 463: 
          { 
    int removeChars = (yytext().charAt(0) == 'b')?4:3;
    heredoc = yytext().substring(removeChars).trim();    // for 'b<<<' or '<<<'
    yybegin(ST_START_HEREDOC);
    return createSymbol(ParserConstants5.T_START_HEREDOC);
 }
        case 821: break;
        case 18: 
        case 21: 
        case 22: 
        case 23: 
        case 30: 
        case 31: 
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 47: 
        case 49: 
        case 51: 
        case 134: 
        case 135: 
        case 136: 
        case 137: 
        case 138: 
        case 139: 
        case 143: 
        case 144: 
        case 154: 
        case 155: 
        case 156: 
        case 157: 
        case 158: 
        case 159: 
        case 160: 
        case 162: 
        case 163: 
        case 164: 
        case 165: 
        case 166: 
        case 167: 
        case 168: 
        case 169: 
        case 170: 
        case 171: 
        case 173: 
        case 174: 
        case 175: 
        case 176: 
        case 177: 
        case 179: 
        case 180: 
        case 181: 
        case 182: 
        case 183: 
        case 190: 
        case 201: 
        case 202: 
        case 258: 
        case 259: 
        case 260: 
        case 261: 
        case 262: 
        case 263: 
        case 264: 
        case 267: 
        case 269: 
        case 270: 
        case 271: 
        case 272: 
        case 273: 
        case 275: 
        case 276: 
        case 277: 
        case 279: 
        case 280: 
        case 282: 
        case 285: 
        case 286: 
        case 287: 
        case 288: 
        case 289: 
        case 290: 
        case 291: 
        case 292: 
        case 293: 
        case 294: 
        case 296: 
        case 297: 
        case 298: 
        case 299: 
        case 300: 
        case 301: 
        case 314: 
        case 315: 
        case 316: 
        case 317: 
        case 318: 
        case 319: 
        case 339: 
        case 340: 
        case 341: 
        case 342: 
        case 343: 
        case 344: 
        case 347: 
        case 349: 
        case 350: 
        case 351: 
        case 352: 
        case 353: 
        case 354: 
        case 355: 
        case 356: 
        case 357: 
        case 358: 
        case 359: 
        case 360: 
        case 361: 
        case 362: 
        case 363: 
        case 364: 
        case 365: 
        case 367: 
        case 368: 
        case 369: 
        case 370: 
        case 371: 
        case 372: 
        case 373: 
        case 374: 
        case 375: 
        case 377: 
        case 378: 
        case 379: 
        case 380: 
        case 391: 
        case 392: 
        case 393: 
        case 394: 
        case 395: 
        case 396: 
        case 397: 
        case 405: 
        case 407: 
        case 408: 
        case 409: 
        case 410: 
        case 411: 
        case 414: 
        case 415: 
        case 416: 
        case 418: 
        case 420: 
        case 421: 
        case 422: 
        case 424: 
        case 425: 
        case 427: 
        case 432: 
        case 433: 
        case 434: 
        case 435: 
        case 436: 
        case 439: 
        case 441: 
        case 442: 
        case 455: 
        case 456: 
        case 457: 
        case 458: 
        case 459: 
        case 460: 
        case 461: 
        case 470: 
        case 471: 
        case 473: 
        case 474: 
        case 476: 
        case 477: 
        case 478: 
        case 479: 
        case 481: 
        case 482: 
        case 483: 
        case 484: 
        case 485: 
        case 489: 
        case 490: 
        case 492: 
        case 493: 
        case 506: 
        case 507: 
        case 508: 
        case 509: 
        case 510: 
        case 511: 
        case 516: 
        case 517: 
        case 518: 
        case 519: 
        case 520: 
        case 522: 
        case 523: 
        case 526: 
        case 528: 
        case 530: 
        case 532: 
        case 539: 
        case 540: 
        case 541: 
        case 542: 
        case 543: 
        case 544: 
        case 548: 
        case 549: 
        case 550: 
        case 552: 
        case 553: 
        case 554: 
        case 555: 
        case 558: 
        case 560: 
        case 564: 
        case 565: 
        case 566: 
        case 568: 
        case 573: 
        case 574: 
        case 577: 
        case 578: 
        case 579: 
        case 580: 
        case 582: 
        case 584: 
        case 585: 
        case 590: 
        case 593: 
        case 594: 
        case 595: 
        case 599: 
        case 600: 
        case 601: 
        case 602: 
        case 609: 
        case 612: 
        case 614: 
          { 
    return createFullSymbol(ParserConstants5.T_STRING);
 }
        case 822: break;
        case 480: 
          { 
    /* not a keyword, hust for recognize constans.*/
    return createFullSymbol(ParserConstants5.T_DEFINE);
 }
        case 823: break;
        case 212: 
          { 
	handleCommentStart();
    yybegin(ST_COMMENT);
 }
        case 824: break;
        case 229: 
          { 
    pushState(ST_IN_SCRIPTING);
    yypushback(yylength()-1);
    return createSymbol(ParserConstants5.T_CURLY_OPEN_WITH_DOLAR);
 }
        case 825: break;
        case 249: 
          { 
	handleCommentEnd();
    yybegin(ST_IN_SCRIPTING);
 }
        case 826: break;
        case 250: 
          { 
     handlePHPDocEnd();
     yybegin(ST_IN_SCRIPTING);
 }
        case 827: break;
        case 334: 
          { 
    	String text = yytext();

    if (text.charAt(text.length() - 2)== ';') {
		text = text.substring(0, text.length() - 2);
        	yypushback(1);
    } else {
		text = text.substring(0, text.length() - 1);
    }
	
	int textLength = text.length();
	int heredocLength = heredoc.length();
	if (textLength > heredocLength && text.substring(textLength - heredocLength, textLength).equals(heredoc)) {
		yypushback(2);
        	yybegin(ST_END_HEREDOC);
	   	return createFullSymbol(ParserConstants5.T_ENCAPSED_AND_WHITESPACE);
	}
	yypushback(1);
	
 }
        case 828: break;
        case 466: 
          { 
	yypushback(3);
	pushState(ST_LOOKING_FOR_PROPERTY);
	return createFullSymbol(ParserConstants5.T_VARIABLE);
 }
        case 829: break;
        case 24: 
          { 
 }
        case 830: break;
        case 253: 
          { 
    String text = yytext();
    if ((text.charAt(1)=='%' && asp_tags)
        || (text.charAt(1)=='?' && short_tags_allowed)) {
        handlePHPStart();
        yybegin(ST_IN_SCRIPTING);
        //return T_OPEN_TAG_WITH_ECHO;
    } else {
        return createSymbol(ParserConstants5.T_INLINE_HTML);
    }
 }
        case 831: break;
        case 326: 
          { 
handlePHPDocStart();
yybegin(ST_DOCBLOCK);
 }
        case 832: break;
        case 400: 
          { 
 }
        case 833: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            yy_do_eof();
              {     return createSymbol(sym.EOF);
 }
          } 
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, i.e. it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java CompletionLexer5 <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        CompletionLexer5 scanner = null;
        try {
          scanner = new CompletionLexer5( new java.io.FileReader(argv[i]) );
          while ( !scanner.yy_atEOF ) scanner.next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
