/* The following code was generated by JFlex 1.4.1 on 2/5/08 11:30 AM */

/*******************************************************************************
 * Copyright (c) 2006 Zend Corporation and IBM Corporation.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Zend and IBM - Initial implementation
 *******************************************************************************/

package org.eclipse.php.internal.core.phpModel.parser.phpdoc;

import java.io.IOException;
import java.util.ArrayList;
import org.eclipse.php.internal.core.Logger;
import org.eclipse.php.internal.core.phpModel.phpElementData.*;

import org.eclipse.php.internal.core.Logger;
import org.eclipse.php.internal.core.phpModel.phpElementData.BasicPHPDocTag;
import org.eclipse.php.internal.core.phpModel.phpElementData.PHPDocBlock;
import org.eclipse.php.internal.core.phpModel.phpElementData.PHPDocBlockImp;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 2/5/08 11:30 AM from the specification file
 * <tt>C:/Java2/org.eclipse.php.core/Resources/parserTools/parser/phpdoc/documentor_scanner.flex</tt>
 */
public class DocumentorLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int ST_IN_TAGS = 6;
  public static final int YYINITIAL = 0;
  public static final int ST_IN_SHORT_DESC = 2;
  public static final int ST_IN_LONG_DESC = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  1,  2,  3,  4,  5,  6, 7
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\2\2\0\1\3\22\0\1\1\11\0\1\4\3\0"+
    "\1\6\1\5\20\0\1\7\1\10\1\11\1\15\1\26\1\16\1\32"+
    "\1\22\1\20\1\25\1\0\1\34\1\31\1\30\1\33\1\21\1\24"+
    "\1\0\1\14\1\12\1\13\1\17\1\35\1\36\1\27\1\23\7\0"+
    "\1\10\1\11\1\15\1\26\1\16\1\32\1\22\1\20\1\25\1\0"+
    "\1\34\1\31\1\30\1\33\1\21\1\24\1\0\1\14\1\12\1\13"+
    "\1\17\1\35\1\36\1\27\1\23\uff86\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\0\1\1\1\0\1\1\3\2\2\3"+
    "\3\2\2\4\3\2\2\5\1\2\2\1\2\2\2\1"+
    "\1\2\3\0\1\6\1\7\2\6\2\1\1\0\1\1"+
    "\1\10\21\0\1\11\1\1\2\0\1\12\1\0\1\1"+
    "\17\0\1\13\62\0\2\13\4\0\1\14\26\0\1\15"+
    "\5\0\1\16\26\0\1\17\11\0\1\20\4\0\1\21"+
    "\5\0\1\22\2\0\1\23\2\0\1\24\11\0\1\25"+
    "\4\0\1\26\5\0\1\27\2\0\1\30\2\0\1\31"+
    "\6\0\1\32\7\0\1\33\6\0\1\34\6\0\1\35"+
    "\7\0\1\36\6\0\1\37\2\0\1\40\1\41\1\42"+
    "\2\0\1\43\1\44\3\0\1\45\1\0\1\46\6\0"+
    "\1\47\1\50\1\51\2\0\1\52\1\53\3\0\1\54"+
    "\1\0\1\55\13\0\1\56\1\57\2\0\1\60\1\0"+
    "\1\61\6\0\1\62\1\63\2\0\1\64\1\0\1\65"+
    "\1\66\2\0\1\67\1\70\1\0\1\71\2\0\1\72"+
    "\2\0\1\73\1\74\1\0\1\75\2\0\1\76\1\0"+
    "\1\77\2\0\1\100\1\0\1\101\2\0\1\102\1\103"+
    "\1\104\1\105\1\106\1\107";

  private static int [] zzUnpackAction() {
    int [] result = new int[389];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\37\0\76\0\135\0\174\0\233\0\272\0\331"+
    "\0\370\0\u0117\0\u0136\0\370\0\u0155\0\u0174\0\u0193\0\u01b2"+
    "\0\370\0\u01d1\0\u01f0\0\u020f\0\u022e\0\370\0\u024d\0\u026c"+
    "\0\u028b\0\u02aa\0\u02c9\0\u02e8\0\u0307\0\u0326\0\u0345\0\u0364"+
    "\0\u0136\0\u0174\0\370\0\370\0\u0383\0\u03a2\0\u01b2\0\u01f0"+
    "\0\u020f\0\u03c1\0\370\0\u03e0\0\u03ff\0\u041e\0\u043d\0\u045c"+
    "\0\u047b\0\u049a\0\u04b9\0\u04d8\0\u04f7\0\u0516\0\u0535\0\u0554"+
    "\0\u0573\0\u0592\0\u022e\0\u026c\0\370\0\u05b1\0\u02c9\0\u02e8"+
    "\0\370\0\u0345\0\u05d0\0\u05ef\0\u060e\0\u062d\0\u064c\0\u066b"+
    "\0\u068a\0\u06a9\0\u06c8\0\u06e7\0\u0706\0\u0725\0\u0744\0\u0763"+
    "\0\u0782\0\u07a1\0\u07c0\0\u07df\0\u07fe\0\u081d\0\u083c\0\u085b"+
    "\0\u087a\0\u0899\0\u08b8\0\u08d7\0\u08f6\0\u0915\0\u0934\0\u0953"+
    "\0\u0972\0\u0991\0\u09b0\0\u09cf\0\u09ee\0\u0a0d\0\u0a2c\0\u0a4b"+
    "\0\u0a6a\0\u0a89\0\u0aa8\0\u0ac7\0\u0ae6\0\u0b05\0\u0b24\0\u0b43"+
    "\0\u0b62\0\u0b81\0\u0ba0\0\u0bbf\0\u0bde\0\u0bfd\0\u0c1c\0\u0c3b"+
    "\0\u0c5a\0\u0c79\0\u0c98\0\u0cb7\0\u0cd6\0\u0cf5\0\u0d14\0\u0d33"+
    "\0\u0d52\0\u0d71\0\u0d90\0\u0daf\0\u0dce\0\370\0\u0ded\0\u0e0c"+
    "\0\u0e2b\0\u0e4a\0\u0e69\0\370\0\u0e88\0\u0ea7\0\u0ec6\0\u0ee5"+
    "\0\u0f04\0\u0f23\0\u0f42\0\u0f61\0\u0f80\0\u0f9f\0\u0fbe\0\u0fdd"+
    "\0\u0ffc\0\u101b\0\u103a\0\u1059\0\u1078\0\u1097\0\u10b6\0\u10d5"+
    "\0\u10f4\0\u1113\0\370\0\u1132\0\u1151\0\u1170\0\u118f\0\u11ae"+
    "\0\370\0\u11cd\0\u11ec\0\u120b\0\u122a\0\u1249\0\u1268\0\u1287"+
    "\0\u12a6\0\u12c5\0\u12e4\0\u1303\0\u1322\0\u1341\0\u1360\0\u137f"+
    "\0\u139e\0\u13bd\0\u13dc\0\u13fb\0\u141a\0\u1439\0\u1458\0\370"+
    "\0\u1477\0\u1496\0\u14b5\0\u14d4\0\u14f3\0\u1512\0\u1531\0\u1550"+
    "\0\u156f\0\370\0\u158e\0\u15ad\0\u15cc\0\u15eb\0\370\0\u160a"+
    "\0\u1629\0\u1648\0\u1667\0\u1686\0\370\0\u16a5\0\u16c4\0\370"+
    "\0\u16e3\0\u1702\0\370\0\u1721\0\u1740\0\u175f\0\u177e\0\u179d"+
    "\0\u17bc\0\u17db\0\u17fa\0\u1819\0\370\0\u1838\0\u1857\0\u1876"+
    "\0\u1895\0\370\0\u18b4\0\u18d3\0\u18f2\0\u1911\0\u1930\0\370"+
    "\0\u194f\0\u196e\0\370\0\u198d\0\u19ac\0\370\0\u19cb\0\u19ea"+
    "\0\u1a09\0\u1a28\0\u1a47\0\u1a66\0\370\0\u1a85\0\u1aa4\0\u1ac3"+
    "\0\u1ae2\0\u1b01\0\u1b20\0\u1b3f\0\370\0\u1b5e\0\u1b7d\0\u1b9c"+
    "\0\u1bbb\0\u1bda\0\u1bf9\0\370\0\u1c18\0\u1c37\0\u1c56\0\u1c75"+
    "\0\u1c94\0\u1cb3\0\370\0\u1cd2\0\u1cf1\0\u1d10\0\u1d2f\0\u1d4e"+
    "\0\u1d6d\0\u1d8c\0\370\0\u1dab\0\u1dca\0\u1de9\0\u1e08\0\u1e27"+
    "\0\u1e46\0\370\0\u1e65\0\u1e84\0\370\0\370\0\u1ea3\0\u1ec2"+
    "\0\u1ee1\0\370\0\370\0\u1f00\0\u1f1f\0\u1f3e\0\370\0\u1f5d"+
    "\0\370\0\u1f7c\0\u1f9b\0\u1fba\0\u1fd9\0\u1ff8\0\u2017\0\370"+
    "\0\370\0\u2036\0\u2055\0\u2074\0\370\0\370\0\u2093\0\u20b2"+
    "\0\u20d1\0\370\0\u20f0\0\370\0\u210f\0\u212e\0\u214d\0\u216c"+
    "\0\u218b\0\u21aa\0\u21c9\0\u21e8\0\u2207\0\u2226\0\u2245\0\370"+
    "\0\370\0\u2264\0\u2283\0\370\0\u22a2\0\370\0\u22c1\0\u22e0"+
    "\0\u22ff\0\u231e\0\u233d\0\u235c\0\370\0\370\0\u237b\0\u239a"+
    "\0\370\0\u23b9\0\370\0\370\0\u23d8\0\u23f7\0\370\0\370"+
    "\0\u2416\0\370\0\u2435\0\u2454\0\370\0\u2473\0\u2492\0\370"+
    "\0\370\0\u24b1\0\370\0\u24d0\0\u24ef\0\370\0\u250e\0\370"+
    "\0\u252d\0\u254c\0\370\0\u256b\0\370\0\u258a\0\u25a9\0\370"+
    "\0\370\0\370\0\370\0\370\0\370";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[389];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\44\11\1\12\32\11\1\13\1\14\1\15\1\16\1\11"+
    "\1\17\31\11\1\20\1\21\1\22\1\23\1\11\1\17"+
    "\1\24\30\11\1\25\1\26\1\27\1\30\33\11\1\31"+
    "\1\26\1\27\1\32\2\11\1\24\30\11\1\33\1\26"+
    "\1\27\1\34\33\11\1\35\1\26\1\27\1\36\2\11"+
    "\1\37\27\11\43\0\1\40\33\0\1\41\2\0\1\42"+
    "\1\0\1\43\32\0\1\14\41\0\1\44\32\0\1\45"+
    "\1\43\1\46\34\0\1\47\1\21\1\22\1\50\1\0"+
    "\1\43\1\51\31\0\1\21\35\0\1\52\1\21\1\22"+
    "\1\0\1\53\1\0\1\51\37\0\1\54\1\0\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\2\0\1\63\1\0"+
    "\1\64\1\65\1\66\2\0\1\67\1\70\1\71\1\0"+
    "\1\72\2\0\1\73\2\0\1\74\34\0\1\26\41\0"+
    "\1\75\32\0\1\31\2\0\1\32\2\0\1\51\30\0"+
    "\1\76\3\0\1\75\1\0\1\51\30\0\1\77\2\0"+
    "\1\100\37\0\1\101\32\0\1\35\2\0\1\36\2\0"+
    "\1\102\30\0\1\103\3\0\1\101\1\0\1\102\37\0"+
    "\1\104\1\0\1\105\1\106\1\107\1\110\1\111\1\112"+
    "\2\0\1\113\1\0\1\114\1\115\1\116\2\0\1\117"+
    "\1\120\1\121\1\0\1\122\5\0\1\123\33\0\1\45"+
    "\37\0\1\43\35\0\1\52\1\21\1\22\3\0\1\51"+
    "\40\0\1\124\3\0\1\125\1\0\1\126\32\0\1\127"+
    "\2\0\1\130\1\131\5\0\1\132\30\0\1\133\1\134"+
    "\1\135\33\0\1\136\30\0\1\137\10\0\1\140\44\0"+
    "\1\141\21\0\1\142\55\0\1\143\15\0\1\144\50\0"+
    "\1\145\10\0\1\146\21\0\1\147\45\0\1\150\36\0"+
    "\1\151\21\0\1\152\36\0\1\153\5\0\1\154\21\0"+
    "\1\76\5\0\1\51\30\0\1\103\5\0\1\102\40\0"+
    "\1\155\3\0\1\156\1\0\1\157\32\0\1\160\2\0"+
    "\1\161\1\162\5\0\1\163\30\0\1\164\1\165\1\166"+
    "\33\0\1\167\30\0\1\170\10\0\1\171\44\0\1\172"+
    "\21\0\1\173\55\0\1\174\15\0\1\175\50\0\1\176"+
    "\10\0\1\177\21\0\1\200\45\0\1\201\36\0\1\202"+
    "\21\0\1\203\36\0\1\204\5\0\1\205\21\0\1\123"+
    "\1\206\1\207\45\0\1\210\41\0\1\211\34\0\1\212"+
    "\33\0\1\213\44\0\1\214\31\0\1\215\60\0\1\216"+
    "\16\0\1\217\37\0\1\220\50\0\1\221\23\0\1\222"+
    "\36\0\1\223\47\0\1\224\22\0\1\225\44\0\1\226"+
    "\41\0\1\227\31\0\1\230\1\231\54\0\1\232\16\0"+
    "\1\233\35\0\1\234\11\0\1\235\27\0\1\236\15\0"+
    "\1\237\34\0\1\240\1\0\1\241\33\0\1\242\22\0"+
    "\1\243\36\0\1\244\34\0\1\245\41\0\1\246\34\0"+
    "\1\247\33\0\1\250\44\0\1\251\31\0\1\252\60\0"+
    "\1\253\16\0\1\254\37\0\1\255\50\0\1\256\23\0"+
    "\1\257\36\0\1\260\47\0\1\261\22\0\1\262\44\0"+
    "\1\263\41\0\1\264\31\0\1\265\1\266\54\0\1\267"+
    "\16\0\1\270\35\0\1\271\11\0\1\272\27\0\1\273"+
    "\15\0\1\274\34\0\1\275\1\0\1\276\33\0\1\277"+
    "\22\0\1\300\36\0\1\301\24\0\1\206\47\0\1\302"+
    "\41\0\1\303\40\0\1\304\31\0\1\305\47\0\1\306"+
    "\27\0\1\307\42\0\1\310\36\0\1\311\36\0\1\312"+
    "\34\0\1\313\35\0\1\314\43\0\1\315\43\0\1\316"+
    "\20\0\1\317\35\0\1\320\35\0\1\321\62\0\1\322"+
    "\23\0\1\323\33\0\1\324\35\0\1\325\35\0\1\326"+
    "\40\0\1\327\54\0\1\330\20\0\1\331\30\0\1\332"+
    "\44\0\1\333\32\0\1\334\37\0\1\335\41\0\1\336"+
    "\40\0\1\337\31\0\1\340\47\0\1\341\27\0\1\342"+
    "\42\0\1\343\36\0\1\344\36\0\1\345\34\0\1\346"+
    "\35\0\1\347\43\0\1\350\43\0\1\351\20\0\1\352"+
    "\35\0\1\353\35\0\1\354\62\0\1\355\23\0\1\356"+
    "\33\0\1\357\35\0\1\360\35\0\1\361\40\0\1\362"+
    "\54\0\1\363\20\0\1\364\30\0\1\365\44\0\1\366"+
    "\32\0\1\367\40\0\1\370\34\0\1\371\45\0\1\372"+
    "\42\0\1\373\21\0\1\374\44\0\1\375\34\0\1\376"+
    "\60\0\1\377\14\0\1\u0100\44\0\1\u0101\30\0\1\u0102"+
    "\46\0\1\u0103\22\0\1\u0104\56\0\1\u0105\16\0\1\u0106"+
    "\42\0\1\u0107\36\0\1\u0108\40\0\1\u0109\53\0\1\u010a"+
    "\15\0\1\u010b\55\0\1\u010c\32\0\1\u010d\25\0\1\u010e"+
    "\34\0\1\u010f\45\0\1\u0110\42\0\1\u0111\21\0\1\u0112"+
    "\44\0\1\u0113\34\0\1\u0114\60\0\1\u0115\14\0\1\u0116"+
    "\44\0\1\u0117\30\0\1\u0118\46\0\1\u0119\22\0\1\u011a"+
    "\56\0\1\u011b\16\0\1\u011c\42\0\1\u011d\36\0\1\u011e"+
    "\40\0\1\u011f\53\0\1\u0120\15\0\1\u0121\55\0\1\u0122"+
    "\32\0\1\u0123\21\0\1\u0124\40\0\1\u0125\40\0\1\u0126"+
    "\37\0\1\u0127\36\0\1\u0128\46\0\1\u0129\23\0\1\u012a"+
    "\57\0\1\u012b\24\0\1\u012c\42\0\1\u012d\42\0\1\u012e"+
    "\36\0\1\u012f\27\0\1\u0130\32\0\1\u0131\53\0\1\u0132"+
    "\20\0\1\u0133\33\0\1\u0134\45\0\1\u0135\36\0\1\u0136"+
    "\25\0\1\u0137\40\0\1\u0138\40\0\1\u0139\37\0\1\u013a"+
    "\36\0\1\u013b\46\0\1\u013c\23\0\1\u013d\57\0\1\u013e"+
    "\24\0\1\u013f\42\0\1\u0140\42\0\1\u0141\36\0\1\u0142"+
    "\27\0\1\u0143\32\0\1\u0144\53\0\1\u0145\20\0\1\u0146"+
    "\33\0\1\u0147\45\0\1\u0148\36\0\1\u0149\32\0\1\u014a"+
    "\56\0\1\u014b\35\0\1\u014c\12\0\1\u014d\42\0\1\u014e"+
    "\44\0\1\u014f\32\0\1\u0150\36\0\1\u0151\30\0\1\u0152"+
    "\36\0\1\u0153\44\0\1\u0154\37\0\1\u0155\52\0\1\u0156"+
    "\20\0\1\u0157\56\0\1\u0158\35\0\1\u0159\12\0\1\u015a"+
    "\42\0\1\u015b\44\0\1\u015c\32\0\1\u015d\36\0\1\u015e"+
    "\30\0\1\u015f\36\0\1\u0160\44\0\1\u0161\37\0\1\u0162"+
    "\52\0\1\u0163\16\0\1\u0164\33\0\1\u0165\36\0\1\u0166"+
    "\57\0\1\u0167\30\0\1\u0168\33\0\1\u0169\47\0\1\u016a"+
    "\20\0\1\u016b\37\0\1\u016c\35\0\1\u016d\33\0\1\u016e"+
    "\36\0\1\u016f\57\0\1\u0170\30\0\1\u0171\33\0\1\u0172"+
    "\47\0\1\u0173\20\0\1\u0174\37\0\1\u0175\36\0\1\u0176"+
    "\44\0\1\u0177\27\0\1\u0178\41\0\1\u0179\35\0\1\u017a"+
    "\35\0\1\u017b\44\0\1\u017c\27\0\1\u017d\41\0\1\u017e"+
    "\35\0\1\u017f\37\0\1\u0180\46\0\1\u0181\26\0\1\u0182"+
    "\36\0\1\u0183\46\0\1\u0184\26\0\1\u0185\20\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9672];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\1\1\0\1\1\1\0\1\1\1\11\2\1"+
    "\1\11\4\1\1\11\4\1\1\11\11\1\3\0\2\11"+
    "\4\1\1\0\1\1\1\11\21\0\1\11\1\1\2\0"+
    "\1\11\1\0\1\1\17\0\1\1\62\0\1\11\1\1"+
    "\4\0\1\11\26\0\1\11\5\0\1\11\26\0\1\11"+
    "\11\0\1\11\4\0\1\11\5\0\1\11\2\0\1\11"+
    "\2\0\1\11\11\0\1\11\4\0\1\11\5\0\1\11"+
    "\2\0\1\11\2\0\1\11\6\0\1\11\7\0\1\11"+
    "\6\0\1\11\6\0\1\11\7\0\1\11\6\0\1\11"+
    "\2\0\2\11\1\1\2\0\2\11\3\0\1\11\1\0"+
    "\1\11\6\0\2\11\1\1\2\0\2\11\3\0\1\11"+
    "\1\0\1\11\13\0\2\11\2\0\1\11\1\0\1\11"+
    "\6\0\2\11\2\0\1\11\1\0\2\11\2\0\2\11"+
    "\1\0\1\11\2\0\1\11\2\0\2\11\1\0\1\11"+
    "\2\0\1\11\1\0\1\11\2\0\1\11\1\0\1\11"+
    "\2\0\6\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[389];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private String shortDesc = null;
    private String longDesc = null;
    private ArrayList tagList = null;
    private int currTagId = 0;
    private StringBuffer sBuffer = null;
    private int numOfLines = 0;
    private int startPos = 0;

    public PHPDocBlock parse (){

        longDesc = "";
        tagList = new ArrayList();
        sBuffer = new StringBuffer();
        numOfLines = 1;

        //start parsing
        while ( !zzAtEOF )
            try {
                next_token();
            } catch (IOException e) {
                Logger.logException(e);
            }

        BasicPHPDocTag[] tags = new BasicPHPDocTag[tagList.size()];
        tagList.toArray(tags);

        PHPDocBlockImp rv = new PHPDocBlockImp(shortDesc, longDesc, tags);

        return rv;

    }

    private void startTagsState(String firstState){
        updateStartPos();
        hendleDesc();
        currTagId = BasicPHPDocTag.getID(firstState);
        sBuffer = new StringBuffer();
        yybegin(ST_IN_TAGS);
    }

    private void setNewTag(String newTag){
       updateStartPos();
       setTagValue();

       sBuffer = new StringBuffer();
       currTagId = BasicPHPDocTag.getID(newTag);
    }

    private void setTagValue(){
        String value = sBuffer.toString().trim();
        // special case for backward compatibility
        if (currTagId == BasicPHPDocTag.DESC) {
            shortDesc = shortDesc + value;
            return;
        }

        BasicPHPDocTag basicPHPDocTag = new BasicPHPDocTag(currTagId,value);
        tagList.add(basicPHPDocTag);
    }

    private void appendText(){
       sBuffer.append(zzBuffer, startPos, zzMarkedPos-startPos);
       updateStartPos();
    }

    private void hendleDesc() {
        if(zzLexicalState == ST_IN_SHORT_DESC){
            shortDesc = sBuffer.toString().trim();
        }
        else{
            longDesc = sBuffer.toString().trim();
        }

        sBuffer = new StringBuffer();
    }

    private void startLongDescState() {
        hendleDesc();
        updateStartPos();
        yybegin(ST_IN_LONG_DESC);
    }

    private void hendleNewLine() {
        appendText();
        if(numOfLines==4){
            int firstLineEnd = sBuffer.indexOf("\n",1);
            shortDesc = sBuffer.substring(0,firstLineEnd);
            shortDesc = shortDesc.trim();
            sBuffer.delete(0,firstLineEnd);
            yybegin(ST_IN_LONG_DESC);
        }
        else{
          numOfLines++;
        }
    }

    private void appendLastText(){
       sBuffer.append(zzBuffer, startPos, zzMarkedPos-startPos-2);
       updateStartPos();
    }

    int maxNumberofLines = 4;

    private void handleDocEnd_shortDesc() {
        appendLastText();
        if(numOfLines==maxNumberofLines){
            int firstLineEnd = sBuffer.indexOf("\n",1);
            shortDesc = sBuffer.substring(0,firstLineEnd);
            shortDesc = shortDesc.trim();
            sBuffer.delete(0,firstLineEnd);
            longDesc = sBuffer.toString().trim();
        }
        else{
            shortDesc = sBuffer.toString().trim();
        }
    }

    private void handleDocEnd_longDesc() {
       appendLastText();
       longDesc = sBuffer.toString().trim();
    }

    private void handleDocEnd_inTags() {
        appendLastText();
        setTagValue();
    }


    private void updateStartPos(){
        startPos = zzMarkedPos;
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public DocumentorLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public DocumentorLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 132) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL[zzMarkedPosL-1]) {
        case '\n':
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 12: 
          { startTagsState("see");
          }
        case 72: break;
        case 55: 
          { startTagsState("tutorial");
          }
        case 73: break;
        case 41: 
          { setNewTag("static");
          }
        case 74: break;
        case 7: 
          { maxNumberofLines = 4;
    handleDocEnd_shortDesc();
          }
        case 75: break;
        case 28: 
          { startTagsState("final");
          }
        case 76: break;
        case 43: 
          { setNewTag("return");
          }
        case 77: break;
        case 11: 
          { updateStartPos();
        yybegin(ST_IN_SHORT_DESC);
          }
        case 78: break;
        case 59: 
          { setNewTag("tutorial");
          }
        case 79: break;
        case 20: 
          { startTagsState("name");
          }
        case 80: break;
        case 39: 
          { setNewTag("access");
          }
        case 81: break;
        case 62: 
          { startTagsState("staticvar");
          }
        case 82: break;
        case 22: 
          { setNewTag("uses");
          }
        case 83: break;
        case 46: 
          { startTagsState("example");
          }
        case 84: break;
        case 49: 
          { startTagsState("version");
          }
        case 85: break;
        case 27: 
          { startTagsState("param");
          }
        case 86: break;
        case 24: 
          { setNewTag("link");
          }
        case 87: break;
        case 64: 
          { setNewTag("staticvar");
          }
        case 88: break;
        case 69: 
          { setNewTag("subpackage");
          }
        case 89: break;
        case 38: 
          { startTagsState("ignore");
          }
        case 90: break;
        case 31: 
          { setNewTag("final");
          }
        case 91: break;
        case 71: 
          { setNewTag("filesource");
          }
        case 92: break;
        case 70: 
          { setNewTag("deprecated");
          }
        case 93: break;
        case 17: 
          { startTagsState("uses");
          }
        case 94: break;
        case 9: 
          { handleDocEnd_longDesc();
          }
        case 95: break;
        case 54: 
          { startTagsState("abstract");
          }
        case 96: break;
        case 5: 
          { appendText();
          }
        case 97: break;
        case 19: 
          { startTagsState("link");
          }
        case 98: break;
        case 56: 
          { startTagsState("category");
          }
        case 99: break;
        case 58: 
          { setNewTag("abstract");
          }
        case 100: break;
        case 66: 
          { startTagsState("subpackage");
          }
        case 101: break;
        case 68: 
          { startTagsState("filesource");
          }
        case 102: break;
        case 67: 
          { startTagsState("deprecated");
          }
        case 103: break;
        case 63: 
          { startTagsState("copyright");
          }
        case 104: break;
        case 48: 
          { startTagsState("license");
          }
        case 105: break;
        case 60: 
          { setNewTag("category");
          }
        case 106: break;
        case 47: 
          { startTagsState("package");
          }
        case 107: break;
        case 35: 
          { startTagsState("throws");
          }
        case 108: break;
        case 23: 
          { setNewTag("desc");
          }
        case 109: break;
        case 57: 
          { startTagsState("internal");
          }
        case 110: break;
        case 30: 
          { setNewTag("param");
          }
        case 111: break;
        case 50: 
          { setNewTag("example");
          }
        case 112: break;
        case 45: 
          { setNewTag("ignore");
          }
        case 113: break;
        case 33: 
          { startTagsState("author");
          }
        case 114: break;
        case 15: 
          { setNewTag("var");
          }
        case 115: break;
        case 65: 
          { setNewTag("copyright");
          }
        case 116: break;
        case 14: 
          { setNewTag("see");
          }
        case 117: break;
        case 53: 
          { setNewTag("version");
          }
        case 118: break;
        case 61: 
          { setNewTag("internal");
          }
        case 119: break;
        case 26: 
          { startTagsState("since");
          }
        case 120: break;
        case 18: 
          { startTagsState("desc");
          }
        case 121: break;
        case 37: 
          { startTagsState("global");
          }
        case 122: break;
        case 6: 
          { appendText();
    startLongDescState();
          }
        case 123: break;
        case 42: 
          { setNewTag("throws");
          }
        case 124: break;
        case 21: 
          { setNewTag("todo");
          }
        case 125: break;
        case 34: 
          { startTagsState("static");
          }
        case 126: break;
        case 52: 
          { setNewTag("license");
          }
        case 127: break;
        case 40: 
          { setNewTag("author");
          }
        case 128: break;
        case 4: 
          { startLongDescState();
          }
        case 129: break;
        case 36: 
          { startTagsState("return");
          }
        case 130: break;
        case 51: 
          { setNewTag("package");
          }
        case 131: break;
        case 1: 
          { updateStartPos();
          }
        case 132: break;
        case 16: 
          { startTagsState("todo");
          }
        case 133: break;
        case 32: 
          { startTagsState("access");
          }
        case 134: break;
        case 44: 
          { setNewTag("global");
          }
        case 135: break;
        case 8: 
          { maxNumberofLines = 5;
    handleDocEnd_shortDesc();
          }
        case 136: break;
        case 29: 
          { setNewTag("since");
          }
        case 137: break;
        case 3: 
          { hendleNewLine();
          }
        case 138: break;
        case 25: 
          { setNewTag("name");
          }
        case 139: break;
        case 2: 
          { 
          }
        case 140: break;
        case 10: 
          { handleDocEnd_inTags();
          }
        case 141: break;
        case 13: 
          { startTagsState("var");
          }
        case 142: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return YYEOF;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java DocumentorLexer <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        DocumentorLexer scanner = null;
        try {
          scanner = new DocumentorLexer( new java.io.FileReader(argv[i]) );
          while ( !scanner.zzAtEOF ) scanner.next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
