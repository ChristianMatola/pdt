/* The following code was generated by JFlex 1.3.5 on 4/16/08 5:11 PM */

/*******************************************************************************
 * Copyright (c) 2006 Zend Corporation and IBM Corporation.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Zend and IBM - Initial implementation
 *******************************************************************************/

package org.eclipse.php.internal.core.documentModel.parser;

import org.eclipse.php.internal.core.util.collections.IntHashtable;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.3.5
 * on 4/16/08 5:11 PM from the specification file
 * <tt>file:/C:/development/PDT/branch/parserUtils/highlighting/PhpLexer5.jflex</tt>
 */
public class PhpLexer5 extends PhpLexer {

  /** This character denotes the end of file */
  final public static int YYEOF = -1;

  /** initial size of the lookahead buffer */
  final private static int YY_BUFFERSIZE = 16384;

  /** lexical states */
  final public static int ST_PHP_LINE_COMMENT = 12;
  final public static int ST_PHP_DOUBLE_QUOTES = 2;
  final public static int ST_PHP_COMMENT = 10;
  final public static int ST_PHP_BACKQUOTE = 3;
  final public static int ST_PHP_DOC_COMMENT = 11;
  final public static int ST_PHP_START_HEREDOC = 6;
  final public static int ST_PHP_END_HEREDOC = 7;
  final public static int ST_PHP_VAR_OFFSET = 9;
  final public static int YYINITIAL = 0;
  final public static int ST_PHP_IN_SCRIPTING = 1;
  final public static int ST_PHP_LOOKING_FOR_PROPERTY = 8;
  final public static int ST_PHP_HEREDOC = 5;
  final public static int ST_PHP_HIGHLIGHTING_ERROR = 13;
  final public static int ST_PHP_QUOTES_AFTER_VARIABLE = 4;

  /** 
   * Translates characters to character classes
   */
  final private static String yycmap_packed = 
    "\11\0\1\12\1\15\2\0\1\11\22\0\1\12\1\26\1\17\1\74"+
    "\1\16\1\32\1\33\1\73\1\62\1\64\1\30\1\25\1\13\1\4"+
    "\1\2\1\31\1\5\11\1\1\60\1\14\1\27\1\23\1\24\1\75"+
    "\1\76\1\40\1\7\1\47\1\42\1\3\1\45\1\63\1\52\1\43"+
    "\1\65\1\55\1\54\1\57\1\41\1\36\1\56\1\67\1\37\1\50"+
    "\1\44\1\46\1\61\1\53\1\6\1\51\1\10\1\71\1\20\1\72"+
    "\1\35\1\66\1\21\1\40\1\7\1\47\1\42\1\3\1\45\1\63"+
    "\1\52\1\43\1\65\1\55\1\54\1\57\1\41\1\36\1\56\1\67"+
    "\1\37\1\50\1\44\1\46\1\61\1\53\1\6\1\51\1\10\1\22"+
    "\1\34\1\70\1\13\201\10\uff00\0";

  /** 
   * Translates characters to character classes
   */
  final private static char [] yycmap = yy_unpack_cmap(yycmap_packed);

  /** 
   * Translates a state to a row index in the transition table
   */
  final private static int yy_rowMap [] = { 
        0,    63,   126,   189,   252,   315,   378,   441,   504,   567, 
      630,   693,   756,   819,     0,   882,   945,  1008,  1071,  1134, 
     1197,  1260,  1323,  1386,     0,     0,  1449,  1512,     0,     0, 
     1575,  1638,  1701,  1764,  1827,  1890,  1953,  2016,  2079,  2142, 
     2205,  2268,  2331,  2394,  2457,  2520,  2583,  2646,  2709,  2772, 
     2835,  2898,  2961,  3024,  3087,  3150,  3213,  3276,  3339,     0, 
     3402,     0,  3465,  3528,  3591,     0,  3654,  3717,  3780,  3843, 
     3906,  3969,     0,  4032,  4095,  4158,  4221,  4284,  4347,  4410, 
        0,  4473,     0,     0,  4536,  4599,  4662,     0,  4725,     0, 
     4788,     0,  4851,  4914,     0,  4977,  5040,  5103,  5166,     0, 
        0,  5229,  3465,     0,  5292,  5355,  5418,     0,  5481,  5544, 
     5607,  5670,  5733,  5796,     0,  5859,  5922,  5985,  3402,  6048, 
     1512,  6111,     0,  6174,  6237,  1890,  6300,  6363,  6426,  1323, 
     6489,  6552,  6615,  6678,  1323,  6741,  6804,  1323,  6867,  6930, 
     1323,  6993,  7056,  7119,  7182,  7245,  7308,  7371,  7434,  7497, 
     7560,  7623,  7686,  7749,  7812,  7875,  7938,  8001,  8064,  8127, 
     8190,  8253,  8316,     0,  8379,  8442,  3213,  8505,  8568,  8631, 
     8694,  8757,  8820,  8883,  8946,  9009,  9072,  9135,  9198,  9261, 
     3654,  9324,  9387,  9261,     0,     0,     0,  9324,  9450,  3906, 
     9513,  9450,     0,  9513,     0,  9576,  4347,  9639,  9702,  9576, 
     9639,  4473,     0,  9765,     0,  9828,     0,     0,  9891,  9954, 
    10017, 10080, 10143, 10206, 10269, 10332, 10395, 10458, 10521, 10584, 
    10647, 10710, 10773, 10836,     0, 10899,  4662, 10962, 11025, 11088, 
    11151, 11214, 11277, 11340,  5859, 11403, 11466, 11529, 11592, 11655, 
    11718, 11781, 11844,  1323, 11907, 11970,  1323, 12033, 12096, 12159, 
    12222, 12285, 12348,  1323, 12411, 12474, 12537, 12600, 12663, 12726, 
    12789,  1323, 12852, 12915, 12978, 13041, 13104, 13167, 13230, 13293, 
    13356, 13419, 13482, 13545, 13608, 13671,  1323, 13734, 13797, 13860, 
    13923, 13986, 14049, 14112, 14175, 14238, 14301, 14364, 14427, 14490, 
    14553, 14616, 14679,     0,     0, 14742, 14805, 14868, 14931, 14994, 
    15057, 15120, 15183, 15246, 15309, 15372, 15435, 15498, 15561, 15624, 
    15687, 15750, 15813, 15876, 15939, 16002, 16065, 16128, 16191, 16254, 
    16317, 16380, 16443, 16506,  1323, 16569, 16632, 16695, 16758, 16821, 
    16884,  1323, 16947, 17010,  1323, 17073, 17136, 11592, 17199, 17262, 
    17325, 17388, 17451, 17514, 17577, 17640, 17703, 17766, 17829,  1323, 
    17892, 17955,  1323, 18018, 18081, 18144, 18207, 18270, 18333, 18396, 
     1323, 18459, 18522,  1323, 18585, 18648, 18711,  1323, 18774, 18837, 
    18900, 18963, 19026, 19089, 19152, 19215, 19278, 19341, 19404, 19467, 
    19530, 19593, 19656, 19719, 19782, 19845, 19908, 19971, 20034, 20097, 
    20160, 20223, 20286, 20349, 20412, 20475, 20538, 20601, 20664, 20727, 
    20790, 20853, 20916, 20979, 21042, 21105, 21168, 21231, 21294,     0, 
    21357, 21420, 21483, 21546, 21609, 21672, 21735, 21798, 21861, 21924, 
    21987,     0, 22050, 22113, 22176,  1323, 22239, 22302, 22365, 22428, 
     1323,  1323, 22491,     0, 22554, 22617, 22680,  1323, 22743, 22806, 
    22869, 22932, 22995,  1323, 23058,  1323, 23121,  1323,  1323, 23184, 
     1323, 23247,  1323,  1323,  1323,  1323, 23310, 23373,  1323, 23436, 
     1323, 23499, 23562, 23625, 23688, 23751, 23814, 23877, 23940, 24003, 
    24066,     0, 24129, 24192, 24255, 24318, 24381, 24444, 24507, 24570, 
    24633, 24696, 24759, 24822, 24885, 24948, 25011,     0,     0, 25074, 
    25137, 25200,     0, 25263, 25326, 25389, 25452,     0, 25515, 25578, 
    25641, 25704, 25767,     0, 25830, 25893, 25956, 26019, 26082, 26145, 
    26208, 26271, 26334, 26397, 26460, 26523, 26586,  1323,  1323, 26649, 
    26712, 26775, 26838, 26901, 26964, 27027, 27090, 27153, 27216, 27279, 
     1323,  1323, 27342, 27405,  1323,  1323, 27468, 27531, 27594, 27657, 
     1323, 27720, 27783, 27846, 27909, 27972, 28035, 28098, 28161, 28224, 
    28287, 28350, 28413, 28476, 28539, 28602, 28665, 28728,     0, 28791, 
    28854, 28917,     0, 28980, 29043, 29106, 29169,     0, 29232, 29295, 
        0, 29358, 29421,  1323, 29484, 29547, 29610, 29673, 29736, 29799, 
     1323,  1323, 29862, 29925, 29988, 30051,  1323, 30114, 30177, 30240, 
     1323, 30303, 30366, 30429, 30492, 30555, 30618, 30681, 30744, 30807, 
    30870,     0, 30933,     0,     0, 30996, 31059,     0, 31122,     0, 
    31185, 31248, 31311, 31374, 31437, 31500, 31563, 31626,     0, 31689, 
        0, 31752, 31815, 31878,  1323, 31941,  1323, 32004, 32067, 32130, 
    32193,  1323,  1323, 32256,  1323, 32319, 32382, 32445,  1323, 32508, 
        0, 32571, 32634, 32697, 32760, 32823, 32886, 32949, 33012, 33075, 
    33138,     0, 33201,     0,     0, 33264, 33327,  1323, 33390,  1323, 
    33453, 33516, 33579,  1323, 33642,  1323, 33705, 33768, 33831,     0, 
    33894,     0,     0, 33957, 34020,     0, 34083, 34146,     0,  1323, 
     1323, 34209, 34272,  1323,  1323, 34335, 34398,  1323,     0, 34461, 
    34524,     0,     0, 34587, 34650, 34713, 34776, 34839,     0,     0, 
        0,  1323,  1323,  1323, 34902, 34965, 35028,  1323
  };

  /** 
   * The packed transition table of the DFA (part 0)
   */
  final private static String yy_packed0 = 
    "\77\0\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\2\30\1\31\1\32\1\30\1\33\1\34"+
    "\1\17\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\44\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\2\27\1\64\1\65\1\27\1\66\1\27\1\67"+
    "\1\70\1\71\1\72\1\31\1\27\1\73\1\27\1\74"+
    "\2\31\1\75\1\76\1\77\1\31\16\100\1\101\1\102"+
    "\1\103\1\100\1\104\54\100\16\105\1\106\1\105\1\107"+
    "\1\102\1\110\54\105\4\111\1\112\15\111\1\113\54\111"+
    "\11\114\1\115\3\114\1\115\1\116\1\114\1\117\1\114"+
    "\1\120\54\114\3\121\1\122\2\121\3\122\25\121\22\122"+
    "\1\121\1\122\1\121\1\122\1\121\3\122\7\121\77\123"+
    "\3\124\1\125\1\126\1\124\3\125\25\124\22\125\1\124"+
    "\1\125\1\124\1\125\1\124\3\125\7\124\1\17\1\127"+
    "\1\130\1\27\1\130\1\131\3\27\2\132\2\130\1\132"+
    "\1\133\1\130\1\132\15\130\22\27\1\130\1\27\1\130"+
    "\1\27\1\130\3\27\1\130\1\31\1\134\2\132\2\130"+
    "\30\135\1\136\46\135\30\137\1\140\45\137\1\141\11\142"+
    "\1\143\3\142\1\144\6\142\1\145\5\142\1\146\42\142"+
    "\1\147\1\142\11\150\2\151\2\150\1\151\61\150\1\0"+
    "\1\20\1\152\1\153\1\0\1\20\72\0\1\152\3\0"+
    "\1\152\15\0\1\154\54\0\1\27\1\0\1\27\1\0"+
    "\1\27\1\155\2\27\25\0\3\27\1\156\5\27\1\157"+
    "\4\27\1\160\2\27\1\161\1\0\1\162\1\0\1\27"+
    "\1\0\3\27\13\0\1\154\16\0\1\154\1\163\53\0"+
    "\1\20\1\152\1\153\1\0\1\20\1\164\71\0\1\27"+
    "\1\0\1\27\1\0\4\27\25\0\1\51\21\27\1\0"+
    "\1\27\1\0\1\27\1\0\3\27\10\0\1\27\1\0"+
    "\1\27\1\0\4\27\6\0\1\34\7\0\1\165\6\0"+
    "\1\27\1\166\20\27\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\3\0\1\167\4\0\1\27\1\0\1\27\1\0"+
    "\4\27\25\0\22\27\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\20\0\2\30\2\0\1\30\64\0\1\170\2\0"+
    "\3\170\25\0\22\170\1\0\1\170\1\0\1\170\1\0"+
    "\3\170\7\0\16\171\1\172\1\173\1\174\1\171\1\175"+
    "\54\171\23\0\1\176\1\154\75\0\1\154\1\176\75\0"+
    "\1\154\1\0\1\154\74\0\1\176\76\0\2\154\2\0"+
    "\1\177\72\0\1\154\76\0\1\154\4\0\1\200\1\76"+
    "\70\0\1\154\1\201\75\0\1\154\7\0\1\154\66\0"+
    "\1\154\10\0\1\154\43\0\1\27\1\0\1\27\1\0"+
    "\4\27\25\0\1\27\1\202\20\27\1\0\1\27\1\0"+
    "\1\27\1\0\3\27\10\0\1\27\1\0\1\203\1\0"+
    "\4\27\25\0\22\27\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\10\0\1\27\1\0\1\27\1\0\2\27\1\204"+
    "\1\27\25\0\1\27\1\205\1\27\1\206\6\27\1\207"+
    "\7\27\1\0\1\27\1\0\1\27\1\0\3\27\10\0"+
    "\1\27\1\0\1\210\1\0\4\27\25\0\22\27\1\0"+
    "\1\27\1\0\1\27\1\0\3\27\10\0\1\27\1\0"+
    "\1\211\1\0\4\27\25\0\1\212\4\27\1\213\14\27"+
    "\1\0\1\27\1\0\1\27\1\0\3\27\10\0\1\27"+
    "\1\0\1\27\1\0\4\27\25\0\3\27\1\214\3\27"+
    "\1\215\2\27\1\216\6\27\1\217\1\0\1\27\1\0"+
    "\1\27\1\0\3\27\10\0\1\27\1\0\1\27\1\0"+
    "\4\27\25\0\1\27\1\220\12\27\1\221\5\27\1\0"+
    "\1\27\1\0\1\27\1\0\3\27\10\0\1\27\1\0"+
    "\1\27\1\0\4\27\25\0\1\222\1\223\1\224\2\27"+
    "\1\225\2\27\1\226\11\27\1\0\1\27\1\0\1\27"+
    "\1\0\3\27\10\0\1\27\1\0\1\27\1\0\4\27"+
    "\25\0\3\27\1\227\6\27\1\230\7\27\1\0\1\27"+
    "\1\0\1\27\1\0\3\27\10\0\1\27\1\0\1\27"+
    "\1\0\4\27\25\0\1\231\1\27\1\232\13\27\1\233"+
    "\3\27\1\0\1\27\1\0\1\27\1\0\3\27\10\0"+
    "\1\27\1\0\1\234\1\0\4\27\25\0\6\27\1\235"+
    "\6\27\1\236\4\27\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\10\0\1\27\1\0\1\27\1\0\4\27\25\0"+
    "\14\27\1\237\5\27\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\10\0\1\27\1\0\1\27\1\0\4\27\25\0"+
    "\5\27\1\240\14\27\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\10\0\1\27\1\0\1\27\1\0\4\27\25\0"+
    "\1\27\1\241\1\242\5\27\1\243\11\27\1\0\1\27"+
    "\1\0\1\27\1\0\3\27\67\0\1\244\17\0\1\27"+
    "\1\0\1\27\1\0\4\27\25\0\2\27\1\245\17\27"+
    "\1\0\1\27\1\0\1\27\1\0\3\27\16\0\1\246"+
    "\2\0\1\247\23\0\1\250\1\251\1\252\1\0\1\253"+
    "\1\254\1\0\1\255\1\256\1\0\1\257\27\0\1\27"+
    "\1\0\1\27\1\0\4\27\25\0\16\27\1\260\3\27"+
    "\1\0\1\27\1\0\1\27\1\0\3\27\10\0\1\27"+
    "\1\0\1\27\1\0\4\27\25\0\22\27\1\0\1\27"+
    "\1\0\1\27\1\0\1\27\1\261\1\27\7\0\20\167"+
    "\1\262\52\167\1\173\3\167\24\0\1\263\52\0\16\100"+
    "\1\264\1\0\1\265\1\100\1\266\57\100\1\267\2\100"+
    "\3\267\5\100\1\270\1\271\1\265\1\100\1\272\13\100"+
    "\22\267\1\100\1\267\1\100\1\267\1\100\3\267\124\100"+
    "\1\273\1\271\1\265\1\100\1\274\54\100\16\105\1\275"+
    "\1\105\1\276\1\0\1\277\57\105\1\267\2\105\3\267"+
    "\5\105\1\300\1\105\1\276\1\301\1\272\13\105\22\267"+
    "\1\105\1\267\1\105\1\267\1\105\3\267\124\105\1\273"+
    "\1\105\1\276\1\301\1\302\54\105\24\0\1\303\70\0"+
    "\1\273\60\0\11\114\1\115\3\114\1\115\1\304\1\114"+
    "\1\305\1\114\1\306\57\114\1\307\2\114\3\307\1\115"+
    "\3\114\1\115\1\304\1\114\1\305\1\114\1\306\13\114"+
    "\22\307\1\114\1\307\1\114\1\307\1\114\3\307\12\114"+
    "\1\267\2\114\3\267\1\115\3\114\1\115\1\310\1\114"+
    "\1\305\1\114\1\272\13\114\22\267\1\114\1\267\1\114"+
    "\1\267\1\114\3\267\20\114\1\115\3\114\1\115\72\114"+
    "\1\115\3\114\1\115\1\273\1\114\1\305\1\114\1\311"+
    "\54\114\1\0\1\312\1\0\1\312\1\0\4\312\1\313"+
    "\2\0\1\314\1\313\20\0\22\312\1\0\1\312\1\0"+
    "\1\312\1\0\3\312\10\0\1\125\1\0\1\125\1\0"+
    "\4\125\25\0\22\125\1\0\1\125\1\0\1\125\1\0"+
    "\3\125\33\0\1\315\53\0\1\127\3\0\1\127\72\0"+
    "\1\127\3\0\1\127\1\164\73\0\1\316\2\0\3\316"+
    "\25\0\22\316\1\0\1\316\1\0\1\316\1\0\3\316"+
    "\7\0\30\135\1\0\46\135\31\0\1\317\76\0\1\320"+
    "\50\0\1\321\33\0\1\322\1\323\1\324\1\325\1\326"+
    "\1\327\1\330\1\331\1\332\1\333\3\0\1\334\1\0"+
    "\1\335\1\336\1\0\1\337\1\0\1\340\13\0\11\142"+
    "\1\144\3\142\1\144\6\142\1\144\5\142\1\144\42\142"+
    "\1\144\1\142\15\0\1\341\105\0\1\342\63\0\2\151"+
    "\2\0\1\151\62\0\1\152\1\0\1\153\1\0\1\152"+
    "\72\0\1\127\2\0\1\343\1\127\17\0\1\343\52\0"+
    "\1\27\1\0\1\27\1\0\4\27\25\0\5\27\1\344"+
    "\1\345\13\27\1\0\1\27\1\0\1\27\1\0\3\27"+
    "\10\0\1\27\1\0\1\27\1\0\4\27\25\0\4\27"+
    "\1\346\15\27\1\0\1\27\1\0\1\27\1\0\3\27"+
    "\10\0\1\27\1\0\1\27\1\0\4\27\25\0\14\27"+
    "\1\347\5\27\1\0\1\27\1\0\1\27\1\0\3\27"+
    "\10\0\1\27\1\0\1\27\1\0\4\27\25\0\12\27"+
    "\1\350\7\27\1\0\1\27\1\0\1\27\1\0\3\27"+
    "\10\0\1\27\1\0\1\27\1\0\4\27\25\0\20\27"+
    "\1\351\1\27\1\0\1\27\1\0\1\27\1\0\3\27"+
    "\10\0\1\27\1\0\1\27\1\0\4\27\25\0\2\27"+
    "\1\352\17\27\1\0\1\27\1\0\1\27\1\0\3\27"+
    "\10\0\1\353\1\0\1\353\1\0\1\353\1\0\1\353"+
    "\30\0\1\353\1\0\1\353\2\0\1\353\1\0\1\353"+
    "\56\0\1\354\50\0\1\27\1\0\1\355\1\0\4\27"+
    "\25\0\22\27\1\0\1\27\1\0\1\27\1\0\3\27"+
    "\10\0\1\170\1\0\1\170\1\0\4\170\25\0\22\170"+
    "\1\0\1\170\1\0\1\170\1\0\3\170\7\0\3\171"+
    "\1\0\2\171\3\0\5\171\1\172\1\173\1\174\1\171"+
    "\1\0\13\171\22\0\1\171\1\0\1\171\1\0\1\171"+
    "\3\0\124\171\1\0\1\173\1\174\1\171\1\175\54\171"+
    "\23\0\1\154\3\0\1\356\77\0\1\357\57\0\2\201"+
    "\2\0\1\201\62\0\1\27\1\0\1\27\1\0\4\27"+
    "\25\0\6\27\1\360\13\27\1\0\1\27\1\0\1\27"+
    "\1\0\2\27\1\361\10\0\1\27\1\0\1\27\1\0"+
    "\4\27\25\0\12\27\1\362\7\27\1\0\1\27\1\0"+
    "\1\27\1\0\3\27\10\0\1\27\1\0\1\27\1\0"+
    "\4\27\25\0\1\27\1\363\20\27\1\0\1\27\1\0"+
    "\1\27\1\0\3\27\10\0\1\27\1\0\1\27\1\0"+
    "\4\27\25\0\4\27\1\202\15\27\1\0\1\27\1\0"+
    "\1\27\1\0\3\27\10\0\1\27\1\0\1\27\1\0"+
    "\4\27\25\0\15\27\1\364\4\27\1\0\1\27\1\0"+
    "\1\27\1\0\3\27\10\0\1\27\1\0\1\27\1\0"+
    "\4\27\25\0\7\27\1\365\1\27\1\366\10\27\1\0"+
    "\1\27\1\0\1\27\1\0\3\27\10\0\1\27\1\0"+
    "\1\367\1\0\4\27\25\0\22\27\1\0\1\27\1\0"+
    "\1\27\1\0\3\27\10\0\1\27\1\0\1\27\1\0"+
    "\4\27\25\0\6\27\1\370\2\27\1\371\1\372\7\27"+
    "\1\0\1\27\1\0\1\27\1\0\3\27\10\0\1\27"+
    "\1\0\1\27\1\0\4\27\25\0\12\27\1\373\7\27"+
    "\1\0\1\27\1\0\1\27\1\0\3\27\10\0\1\27"+
    "\1\0\1\27\1\0\4\27\25\0\20\27\1\374\1\27"+
    "\1\0\1\27\1\0\1\27\1\0\3\27\10\0\1\27"+
    "\1\0\1\27\1\0\4\27\25\0\10\27\1\375\2\27"+
    "\1\376\6\27\1\0\1\27\1\0\1\27\1\0\3\27"+
    "\10\0\1\27\1\0\1\27\1\0\4\27\25\0\1\27"+
    "\1\377\20\27\1\0\1\27\1\0\1\27\1\0\3\27"+
    "\10\0\1\27\1\0\1\27\1\0\4\27\25\0\1\27"+
    "\1\u0100\20\27\1\0\1\27\1\0\1\27\1\0\3\27"+
    "\10\0\1\27\1\0\1\27\1\0\4\27\25\0\1\u0101"+
    "\21\27\1\0\1\27\1\0\1\27\1\0\3\27\10\0"+
    "\1\27\1\0\1\27\1\0\4\27\25\0\16\27\1\u0102"+
    "\3\27\1\0\1\27\1\0\1\27\1\0\3\27\10\0"+
    "\1\27\1\0\1\27\1\0\4\27\25\0\3\27\1\u0103"+
    "\16\27\1\0\1\27\1\0\1\27\1\0\3\27\10\0"+
    "\1\27\1\0\1\27\1\0\4\27\25\0\3\27\1\u0104"+
    "\16\27\1\0\1\27\1\0\1\27\1\0\3\27\10\0"+
    "\1\27\1\0\1\27\1\0\4\27\25\0\12\27\1\u0105"+
    "\7\27\1\0\1\27\1\0\1\27\1\0\3\27\10\0"+
    "\1\27\1\0\1\u0106\1\0\4\27\25\0\22\27\1\0"+
    "\1\27\1\0\1\27\1\0\3\27\10\0\1\27\1\0"+
    "\1\27\1\0\4\27\25\0\3\27\1\u0107\16\27\1\0"+
    "\1\27\1\0\1\27\1\0\3\27\10\0\1\27\1\0"+
    "\1\27\1\0\4\27\25\0\6\27\1\u0108\3\27\1\u0109"+
    "\7\27\1\0\1\27\1\0\1\27\1\0\3\27\10\0"+
    "\1\27\1\0\1\27\1\0\4\27\25\0\1\u010a\1\27"+
    "\1\u010b\17\27\1\0\1\27\1\0\1\27\1\0\3\27"+
    "\10\0\1\27\1\0\1\27\1\0\4\27\25\0\16\27"+
    "\1\u010c\3\27\1\0\1\27\1\0\1\27\1\0\3\27"+
    "\10\0\1\27\1\0\1\27\1\0\4\27\25\0\2\27"+
    "\1\u010d\17\27\1\0\1\27\1\0\1\27\1\0\3\27"+
    "\10\0\1\27\1\0\1\27\1\0\4\27\25\0\5\27"+
    "\1\u010e\14\27\1\0\1\27\1\0\1\27\1\0\3\27"+
    "\10\0\1\27\1\0\1\27\1\0\4\27\25\0\5\27"+
    "\1\u010f\14\27\1\0\1\27\1\0\1\27\1\0\3\27"+
    "\10\0\1\27\1\0\1\27\1\0\4\27\25\0\12\27"+
    "\1\u0110\7\27\1\0\1\27\1\0\1\27\1\0\3\27"+
    "\10\0\1\27\1\0\1\27\1\0\4\27\25\0\1\u0111"+
    "\4\27\1\u0112\14\27\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\10\0\1\27\1\0\1\27\1\0\4\27\25\0"+
    "\1\27\1\u0113\20\27\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\10\0\1\27\1\0\1\27\1\0\2\27\1\u0114"+
    "\1\27\25\0\22\27\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\10\0\1\27\1\0\1\27\1\0\4\27\25\0"+
    "\1\27\1\u0115\20\27\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\45\0\1\u0116\4\0\1\u0117\42\0\1\u0118\72\0"+
    "\1\u0119\132\0\1\u011a\75\0\1\u011b\101\0\1\u011c\111\0"+
    "\1\u011d\63\0\1\u011e\101\0\1\u011f\33\0\1\27\1\0"+
    "\1\27\1\0\4\27\25\0\1\u0120\21\27\1\0\1\27"+
    "\1\0\1\27\1\0\3\27\10\0\1\27\1\0\1\27"+
    "\1\0\4\27\25\0\7\27\1\u0121\1\27\1\u0122\2\27"+
    "\1\u0123\1\27\1\u0124\2\27\1\u0125\1\0\1\27\1\0"+
    "\1\27\1\0\3\27\7\0\77\167\11\0\2\263\2\0"+
    "\1\263\61\0\3\100\1\0\2\100\3\0\5\100\1\270"+
    "\1\271\1\265\1\100\1\0\13\100\22\0\1\100\1\0"+
    "\1\100\1\0\1\100\3\0\25\100\1\0\1\271\1\265"+
    "\1\100\1\274\54\100\1\0\1\267\1\0\1\267\1\0"+
    "\4\267\25\0\22\267\1\0\1\267\1\0\1\267\1\0"+
    "\3\267\1\0\1\u0126\5\0\3\105\1\0\2\105\3\0"+
    "\5\105\1\300\1\105\1\276\1\301\1\0\13\105\22\0"+
    "\1\105\1\0\1\105\1\0\1\105\3\0\25\105\1\0"+
    "\1\105\1\276\1\301\1\302\54\105\3\114\1\0\2\114"+
    "\3\0\1\115\3\114\1\115\1\310\1\114\1\305\1\114"+
    "\1\0\13\114\22\0\1\114\1\0\1\114\1\0\1\114"+
    "\3\0\20\114\1\115\3\114\1\115\1\0\1\114\1\305"+
    "\1\114\1\311\55\114\1\307\1\114\1\307\1\114\4\307"+
    "\1\u0127\2\114\1\u0128\1\u0127\1\304\1\114\1\305\1\114"+
    "\1\306\13\114\22\307\1\114\1\307\1\114\1\307\1\114"+
    "\3\307\7\114\11\0\1\313\3\0\1\313\62\0\1\316"+
    "\1\0\1\316\1\0\4\316\25\0\22\316\1\0\1\316"+
    "\1\0\1\316\1\0\3\316\15\0\1\u0129\73\0\1\u012a"+
    "\102\0\1\u012b\36\0\1\u012c\1\u012d\67\0\1\u012e\41\0"+
    "\1\u012f\134\0\1\u0130\21\0\1\u0131\51\0\1\u0132\7\0"+
    "\1\u0133\3\0\1\u0134\67\0\1\u0135\103\0\1\u0136\64\0"+
    "\1\u0137\1\0\1\u0138\41\0\1\u0139\37\0\1\u013a\1\u013b"+
    "\1\0\1\u013c\73\0\1\u013d\72\0\1\u013e\1\u013f\41\0"+
    "\1\u0140\34\0\1\u0141\41\0\1\u0142\34\0\1\u0143\112\0"+
    "\1\u0144\33\0\2\342\2\0\1\342\62\0\1\27\1\0"+
    "\1\27\1\0\4\27\25\0\6\27\1\u0145\13\27\1\0"+
    "\1\27\1\0\1\27\1\0\3\27\10\0\1\27\1\0"+
    "\1\u0146\1\0\4\27\25\0\22\27\1\0\1\27\1\0"+
    "\1\27\1\0\3\27\10\0\1\27\1\0\1\27\1\0"+
    "\4\27\25\0\4\27\1\u0147\1\u0148\1\27\1\u0149\2\27"+
    "\1\u014a\2\27\1\u014b\4\27\1\0\1\27\1\0\1\27"+
    "\1\0\3\27\10\0\1\27\1\0\1\27\1\0\4\27"+
    "\25\0\1\u014c\21\27\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\10\0\1\27\1\0\1\u014d\1\0\4\27\25\0"+
    "\22\27\1\0\1\27\1\0\1\27\1\0\3\27\10\0"+
    "\1\27\1\0\1\27\1\0\4\27\25\0\6\27\1\u014e"+
    "\13\27\1\0\1\27\1\0\1\27\1\0\3\27\10\0"+
    "\1\27\1\0\1\27\1\0\4\27\25\0\16\27\1\u014f"+
    "\3\27\1\0\1\27\1\0\1\27\1\0\3\27\36\0"+
    "\1\356\50\0\1\27\1\0\1\27\1\0\4\27\25\0"+
    "\2\27\1\u0150\17\27\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\12\0\1\u0151\2\0\3\u0151\1\0\1\356\23\0"+
    "\22\u0151\1\0\1\u0151\1\0\1\u0151\1\0\3\u0151\20\0"+
    "\2\u0152\2\0\1\u0152\62\0\1\27\1\0\1\27\1\0"+
    "\4\27\25\0\10\27\1\u0153\11\27\1\0\1\27\1\0"+
    "\1\27\1\0\3\27\10\0\1\27\1\0\1\27\1\0"+
    "\4\27\25\0\10\27\1\u0154\11\27\1\0\1\27\1\0"+
    "\1\27\1\0\3\27\10\0\1\27\1\0\1\27\1\0"+
    "\4\27\25\0\6\27\1\u0155\13\27\1\0\1\27\1\0"+
    "\1\27\1\0\3\27\10\0\1\27\1\0\1\27\1\0"+
    "\4\27\25\0\2\27\1\u0156\17\27\1\0\1\27\1\0"+
    "\1\27\1\0\3\27\10\0\1\27\1\0\1\27\1\0"+
    "\4\27\25\0\2\27\1\u0157\17\27\1\0\1\27\1\0"+
    "\1\27\1\0\3\27\10\0\1\27\1\0\1\27\1\0"+
    "\4\27\25\0\16\27\1\u0158\3\27\1\0\1\27\1\0"+
    "\1\27\1\0\3\27\10\0\1\27\1\0\1\u0159\1\0"+
    "\4\27\25\0\22\27\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\10\0\1\27\1\0\1\27\1\0\4\27\25\0"+
    "\16\27\1\u015a\3\27\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\10\0\1\27\1\0\1\27\1\0\4\27\25\0"+
    "\6\27\1\u015b\13\27\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\10\0\1\27\1\0\1\u015c\1\0\4\27\25\0"+
    "\22\27\1\0\1\27\1\0\1\27\1\0\3\27\10\0"+
    "\1\27\1\0\1\27\1\0\4\27\25\0\16\27\1\u015d"+
    "\3\27\1\0\1\27\1\0\1\27\1\0\3\27\10\0"+
    "\1\27\1\0\1\u015e\1\0\4\27\25\0\22\27\1\0"+
    "\1\27\1\0\1\27\1\0\3\27\10\0\1\27\1\0"+
    "\1\27\1\0\4\27\25\0\1\u015f\21\27\1\0\1\27"+
    "\1\0\1\27\1\0\3\27\10\0\1\27\1\0\1\u0160"+
    "\1\0\4\27\25\0\22\27\1\0\1\27\1\0\1\27"+
    "\1\0\3\27\10\0\1\27\1\0\1\27\1\0\4\27"+
    "\25\0\21\27\1\u0161\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\10\0\1\27\1\0\1\27\1\0\4\27\25\0"+
    "\12\27\1\u0162\7\27\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\10\0\1\27\1\0\1\27\1\0\4\27\25\0"+
    "\2\27\1\u0163\17\27\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\10\0\1\27\1\0\1\27\1\0\4\27\25\0"+
    "\11\27\1\u0164\10\27\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\10\0\1\27\1\0\1\u0165\1\0\4\27\25\0"+
    "\22\27\1\0\1\27\1\0\1\27\1\0\3\27\10\0"+
    "\1\27\1\0\1\27\1\0\4\27\25\0\6\27\1\u0166"+
    "\3\27\1\u0167\7\27\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\10\0\1\27\1\0\1\27\1\0\4\27\25\0"+
    "\11\27\1\u0168\10\27\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\10\0\1\27\1\0\1\u0169\1\0\4\27\25\0"+
    "\22\27\1\0\1\27\1\0\1\27\1\0\3\27\10\0"+
    "\1\27\1\0\1\27\1\0\4\27\25\0\3\27\1\u016a"+
    "\16\27\1\0\1\27\1\0\1\27\1\0\3\27\10\0"+
    "\1\27\1\0\1\27\1\0\4\27\25\0\12\27\1\u016b"+
    "\7\27\1\0\1\27\1\0\1\27\1\0\3\27\10\0"+
    "\1\27\1\0\1\27\1\0\4\27\25\0\7\27\1\u016c"+
    "\12\27\1\0\1\27\1\0\1\27\1\0\3\27\10\0"+
    "\1\27\1\0\1\27\1\0\4\27\25\0\6\27\1\u016d"+
    "\13\27\1\0\1\27\1\0\1\27\1\0\3\27\10\0"+
    "\1\27\1\0\1\27\1\0\4\27\25\0\6\27\1\u016e"+
    "\13\27\1\0\1\27\1\0\1\27\1\0\3\27\10\0"+
    "\1\27\1\0\1\27\1\0\4\27\25\0\16\27\1\u016f"+
    "\3\27\1\0\1\27\1\0\1\27\1\0\3\27\10\0"+
    "\1\27\1\0\1\27\1\0\4\27\25\0\6\27\1\u0170"+
    "\13\27\1\0\1\27\1\0\1\27\1\0\3\27\10\0"+
    "\1\27\1\0\1\27\1\0\4\27\25\0\6\27\1\u0171"+
    "\13\27\1\0\1\27\1\0\1\27\1\0\3\27\10\0"+
    "\1\27\1\0\1\27\1\0\4\27\25\0\3\27\1\u0172"+
    "\16\27\1\0\1\u0173\1\0\1\27\1\0\3\27\10\0"+
    "\1\27\1\0\1\u0174\1\0\4\27\25\0\22\27\1\0"+
    "\1\27\1\0\1\27\1\0\3\27\10\0\1\27\1\0"+
    "\1\27\1\0\4\27\25\0\16\27\1\u0175\3\27\1\0"+
    "\1\27\1\0\1\27\1\0\3\27\45\0\1\u0176\101\0"+
    "\1\u0177\122\0\1\u0178\51\0\1\u0179\75\0\1\u017a\105\0"+
    "\1\u017b\74\0\1\u017c\70\0\1\u017d\110\0\1\u017e\65\0"+
    "\1\u017f\40\0\1\27\1\0\1\27\1\0\2\27\1\u0180"+
    "\1\27\25\0\22\27\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\10\0\1\27\1\0\1\27\1\0\4\27\25\0"+
    "\5\27\1\u0181\2\27\1\u0182\11\27\1\0\1\27\1\0"+
    "\1\27\1\0\3\27\10\0\1\27\1\0\1\27\1\0"+
    "\4\27\25\0\16\27\1\u0183\3\27\1\0\1\27\1\0"+
    "\1\27\1\0\3\27\10\0\1\27\1\0\1\27\1\0"+
    "\4\27\25\0\2\27\1\u0184\17\27\1\0\1\27\1\0"+
    "\1\27\1\0\3\27\10\0\1\27\1\0\1\27\1\0"+
    "\4\27\25\0\5\27\1\u0185\14\27\1\0\1\27\1\0"+
    "\1\27\1\0\3\27\10\0\1\27\1\0\1\u0186\1\0"+
    "\4\27\25\0\22\27\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\7\0\11\114\1\u0127\3\114\1\u0127\1\304\1\114"+
    "\1\305\1\114\1\306\54\114\40\0\1\u0187\6\0\1\u0188"+
    "\73\0\1\u0189\102\0\1\u018a\72\0\1\u018b\101\0\1\u018c"+
    "\106\0\1\u018d\67\0\1\u018e\5\0\1\u018f\64\0\1\u0190"+
    "\73\0\1\u0191\77\0\1\u0192\100\0\1\u0193\71\0\1\u0194"+
    "\100\0\1\u0195\12\0\1\u0196\25\0\1\u0197\151\0\1\u0198"+
    "\64\0\1\u0199\35\0\1\u019a\134\0\1\u019b\75\0\1\u019c"+
    "\45\0\1\u019d\130\0\1\u019e\5\0\1\u019f\65\0\1\u01a0"+
    "\77\0\1\u01a1\7\0\1\u01a2\73\0\1\u01a3\115\0\1\u01a4"+
    "\52\0\1\u01a5\76\0\1\u01a6\75\0\1\u01a7\41\0\1\27"+
    "\1\0\1\27\1\0\4\27\25\0\3\27\1\u01a8\16\27"+
    "\1\0\1\27\1\0\1\27\1\0\3\27\10\0\1\27"+
    "\1\0\1\u01a9\1\0\4\27\25\0\22\27\1\0\1\27"+
    "\1\0\1\27\1\0\3\27\10\0\1\27\1\0\1\27"+
    "\1\0\4\27\25\0\7\27\1\u01aa\12\27\1\0\1\27"+
    "\1\0\1\27\1\0\3\27\10\0\1\27\1\0\1\27"+
    "\1\0\4\27\25\0\1\u01ab\21\27\1\0\1\27\1\0"+
    "\1\27\1\0\3\27\10\0\1\27\1\0\1\27\1\0"+
    "\4\27\25\0\15\27\1\u01ac\4\27\1\0\1\27\1\0"+
    "\1\27\1\0\3\27\10\0\1\27\1\0\1\27\1\0"+
    "\4\27\25\0\14\27\1\u01ad\5\27\1\0\1\27\1\0"+
    "\1\27\1\0\3\27\10\0\1\27\1\0\1\27\1\0"+
    "\4\27\25\0\5\27\1\u01ae\14\27\1\0\1\27\1\0"+
    "\1\27\1\0\3\27\10\0\1\27\1\0\1\27\1\0"+
    "\4\27\25\0\13\27\1\u01af\6\27\1\0\1\27\1\0"+
    "\1\27\1\0\3\27\10\0\1\27\1\0\1\27\1\0"+
    "\4\27\25\0\17\27\1\u01b0\2\27\1\0\1\27\1\0"+
    "\1\27\1\0\3\27\10\0\1\u0151\1\0\1\u0151\1\0"+
    "\4\u0151\1\u01b1\3\0\1\u01b2\20\0\22\u0151\1\0\1\u0151"+
    "\1\0\1\u0151\1\0\3\u0151\10\0\1\27\1\0\1\27"+
    "\1\0\4\27\25\0\1\27\1\u01b3\20\27\1\0\1\27"+
    "\1\0\1\27\1\0\3\27\10\0\1\27\1\0\1\27"+
    "\1\0\4\27\25\0\5\27\1\u01b4\14\27\1\0\1\27"+
    "\1\0\1\27\1\0\3\27\10\0\1\27\1\0\1\27"+
    "\1\0\4\27\25\0\1\27\1\u01b5\20\27\1\0\1\27"+
    "\1\0\1\27\1\0\3\27\10\0\1\27\1\0\1\27"+
    "\1\0\4\27\25\0\13\27\1\u01b6\6\27\1\0\1\27"+
    "\1\0\1\27\1\0\3\27\10\0\1\27\1\0\1\27"+
    "\1\0\4\27\25\0\10\27\1\u01b7\11\27\1\0\1\27"+
    "\1\0\1\27\1\0\3\27\10\0\1\27\1\0\1\27"+
    "\1\0\4\27\25\0\2\27\1\u01b8\17\27\1\0\1\27"+
    "\1\0\1\27\1\0\3\27\10\0\1\27\1\0\1\27"+
    "\1\0\4\27\25\0\1\27\1\u01b9\20\27\1\0\1\27"+
    "\1\0\1\27\1\0\3\27\10\0\1\27\1\0\1\27"+
    "\1\0\4\27\25\0\10\27\1\u01ba\11\27\1\0\1\27"+
    "\1\0\1\27\1\0\3\27\10\0\1\27\1\0\1\27"+
    "\1\0\4\27\25\0\2\27\1\u01bb\17\27\1\0\1\27"+
    "\1\0\1\27\1\0\3\27\10\0\1\27\1\0\1\27"+
    "\1\0\4\27\25\0\6\27\1\u01bc\13\27\1\0\1\27"+
    "\1\0\1\27\1\0\3\27\10\0\1\27\1\0\1\u01bd"+
    "\1\0\4\27\25\0\22\27\1\0\1\27\1\0\1\27"+
    "\1\0\3\27\10\0\1\27\1\0\1\27\1\0\4\27"+
    "\25\0\15\27\1\u01be\4\27\1\0\1\27\1\0\1\27"+
    "\1\0\3\27\10\0\1\27\1\0\1\27\1\0\4\27"+
    "\25\0\2\27\1\u01bf\17\27\1\0\1\27\1\0\1\27"+
    "\1\0\3\27\10\0\1\27\1\0\1\u01c0\1\0\4\27"+
    "\25\0\22\27\1\0\1\27\1\0\1\27\1\0\3\27"+
    "\10\0\1\27\1\0\1\27\1\0\4\27\25\0\16\27"+
    "\1\u01c1\3\27\1\0\1\27\1\0\1\27\1\0\3\27"+
    "\10\0\1\27\1\0\1\27\1\0\4\27\25\0\6\27"+
    "\1\u01c2\13\27\1\0\1\27\1\0\1\27\1\0\3\27"+
    "\10\0\1\27\1\0\1\27\1\0\4\27\25\0\6\27"+
    "\1\u01c3\13\27\1\0\1\27\1\0\1\27\1\0\3\27"+
    "\10\0\1\27\1\0\1\27\1\0\4\27\25\0\5\27"+
    "\1\u01c4\14\27\1\0\1\27\1\0\1\27\1\0\3\27"+
    "\10\0\1\27\1\0\1\27\1\0\4\27\25\0\6\27"+
    "\1\u01c5\13\27\1\0\1\27\1\0\1\27\1\0\3\27"+
    "\10\0\1\27\1\0\1\27\1\0\4\27\25\0\14\27"+
    "\1\u01c6\5\27\1\0\1\27\1\0\1\27\1\0\3\27"+
    "\10\0\1\27\1\0\1\u01c7\1\0\4\27\25\0\22\27"+
    "\1\0\1\27\1\0\1\27\1\0\3\27\10\0\1\27"+
    "\1\0\1\27\1\0\4\27\25\0\12\27\1\u01c8\7\27"+
    "\1\0\1\27\1\0\1\27\1\0\3\27\10\0\1\27"+
    "\1\0\1\27\1\0\4\27\25\0\5\27\1\u01c9\14\27"+
    "\1\0\1\27\1\0\1\27\1\0\3\27\10\0\1\27"+
    "\1\0\1\27\1\0\4\27\25\0\11\27\1\u01ca\10\27"+
    "\1\0\1\27\1\0\1\27\1\0\3\27\10\0\1\27"+
    "\1\0\1\u01cb\1\0\4\27\25\0\22\27\1\0\1\27"+
    "\1\0\1\27\1\0\3\27\10\0\1\27\1\0\1\u01cc"+
    "\1\0\4\27\25\0\22\27\1\0\1\27\1\0\1\27"+
    "\1\0\3\27\10\0\1\27\1\0\1\27\1\0\4\27"+
    "\25\0\6\27\1\u01cd\13\27\1\0\1\27\1\0\1\27"+
    "\1\0\3\27\10\0\1\27\1\0\1\27\1\0\4\27"+
    "\25\0\2\27\1\u01ce\17\27\1\0\1\27\1\0\1\27"+
    "\1\0\3\27\10\0\1\27\1\0\1\27\1\0\4\27"+
    "\25\0\3\27\1\u01cf\16\27\1\0\1\27\1\0\1\27"+
    "\1\0\3\27\10\0\1\27\1\0\1\27\1\0\4\27"+
    "\25\0\5\27\1\u01d0\14\27\1\0\1\27\1\0\1\27"+
    "\1\0\3\27\63\0\1\u01d1\62\0\1\u01d2\41\0\1\u01d3"+
    "\147\0\1\u01d4\62\0\1\u01d5\45\0\1\u01d6\72\0\1\u01d7"+
    "\6\0\1\u01d4\51\0\1\u01d8\52\0\1\u01d9\41\0\1\u01d9"+
    "\136\0\1\u01da\34\0\1\27\1\0\1\27\1\0\4\27"+
    "\25\0\2\27\1\u01db\17\27\1\0\1\27\1\0\1\27"+
    "\1\0\3\27\10\0\1\27\1\0\1\27\1\0\4\27"+
    "\25\0\16\27\1\u01dc\3\27\1\0\1\27\1\0\1\27"+
    "\1\0\3\27\10\0\1\27\1\0\1\27\1\0\4\27"+
    "\25\0\3\27\1\u01dd\16\27\1\0\1\27\1\0\1\27"+
    "\1\0\3\27\10\0\1\27\1\0\1\27\1\0\4\27"+
    "\25\0\2\27\1\u01de\17\27\1\0\1\27\1\0\1\27"+
    "\1\0\3\27\10\0\1\27\1\0\1\27\1\0\4\27"+
    "\25\0\16\27\1\u01df\3\27\1\0\1\27\1\0\1\27"+
    "\1\0\3\27\10\0\1\27\1\0\1\27\1\0\4\27"+
    "\25\0\3\27\1\u01e0\16\27\1\0\1\27\1\0\1\27"+
    "\1\0\3\27\10\0\1\27\1\0\1\27\1\0\4\27"+
    "\25\0\6\27\1\u01e1\13\27\1\0\1\27\1\0\1\27"+
    "\1\0\3\27\66\0\1\u01e2\22\0\1\u01e3\141\0\1\u01e4"+
    "\74\0\1\u01e5\104\0\1\u01e6\27\0\1\u01e7\76\0\1\u01e8"+
    "\142\0\1\u01e9\66\0\1\u01ea\42\0\1\u01eb\131\0\1\u01ec"+
    "\76\0\1\u01ed\76\0\1\u01ee\76\0\1\u01ef\100\0\1\u01f0"+
    "\41\0\1\u01f1\143\0\1\u01f2\77\0\1\u01f3\30\0\1\u01f4"+
    "\142\0\1\u01f5\73\0\1\u01f6\110\0\1\u01f7\75\0\1\u01f8"+
    "\24\0\1\u01f9\151\0\1\u01fa\60\0\1\u01fb\113\0\1\u01fc"+
    "\73\0\1\u01fd\67\0\1\u01fe\103\0\1\u01ff\35\0\1\u0200"+
    "\70\0\1\27\1\0\1\27\1\0\4\27\25\0\4\27"+
    "\1\u0201\15\27\1\0\1\27\1\0\1\27\1\0\3\27"+
    "\10\0\1\27\1\0\1\27\1\0\4\27\25\0\11\27"+
    "\1\u0202\10\27\1\0\1\27\1\0\1\27\1\0\3\27"+
    "\10\0\1\27\1\0\1\27\1\0\4\27\25\0\1\27"+
    "\1\u0203\20\27\1\0\1\27\1\0\1\27\1\0\3\27"+
    "\10\0\1\27\1\0\1\27\1\0\4\27\25\0\5\27"+
    "\1\u0204\14\27\1\0\1\27\1\0\1\27\1\0\3\27"+
    "\10\0\1\27\1\0\1\27\1\0\4\27\25\0\5\27"+
    "\1\u0205\14\27\1\0\1\27\1\0\1\27\1\0\3\27"+
    "\10\0\1\27\1\0\1\27\1\0\4\27\25\0\7\27"+
    "\1\u0206\12\27\1\0\1\27\1\0\1\27\1\0\3\27"+
    "\24\0\1\u01b2\62\0\1\27\1\0\1\27\1\0\4\27"+
    "\25\0\3\27\1\u0207\16\27\1\0\1\27\1\0\1\27"+
    "\1\0\3\27\10\0\1\27\1\0\1\27\1\0\4\27"+
    "\25\0\1\27\1\u0208\20\27\1\0\1\27\1\0\1\27"+
    "\1\0\3\27\10\0\1\27\1\0\1\27\1\0\4\27"+
    "\25\0\2\27\1\u0209\17\27\1\0\1\27\1\0\1\27"+
    "\1\0\3\27\10\0\1\27\1\0\1\27\1\0\4\27"+
    "\25\0\16\27\1\u020a\3\27\1\0\1\27\1\0\1\27"+
    "\1\0\3\27\10\0\1\27\1\0\1\27\1\0\4\27"+
    "\25\0\1\27\1\u020b\20\27\1\0\1\27\1\0\1\27"+
    "\1\0\3\27\10\0\1\27\1\0\1\27\1\0\4\27"+
    "\25\0\7\27\1\u020c\12\27\1\0\1\27\1\0\1\27"+
    "\1\0\3\27\10\0\1\27\1\0\1\27\1\0\4\27"+
    "\25\0\4\27\1\u020d\15\27\1\0\1\27\1\0\1\27"+
    "\1\0\3\27\10\0\1\27\1\0\1\27\1\0\4\27"+
    "\25\0\3\27\1\u020e\16\27\1\0\1\27\1\0\1\27"+
    "\1\0\3\27\10\0\1\27\1\0\1\27\1\0\4\27"+
    "\25\0\21\27\1\u020f\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\10\0\1\27\1\0\1\27\1\0\4\27\25\0"+
    "\11\27\1\u0210\10\27\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\10\0\1\27\1\0\1\27\1\0\4\27\25\0"+
    "\5\27\1\u0211\14\27\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\10\0\1\27\1\0\1\27\1\0\4\27\25\0"+
    "\3\27\1\u0212\16\27\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\10\0\1\27\1\0\1\27\1\0\4\27\25\0"+
    "\11\27\1\u0213\10\27\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\10\0\1\27\1\0\1\27\1\0\4\27\25\0"+
    "\14\27\1\u0214\5\27\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\10\0\1\27\1\0\1\27\1\0\4\27\25\0"+
    "\11\27\1\u0215\10\27\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\10\0\1\27\1\0\1\27\1\0\4\27\25\0"+
    "\6\27\1\u0216\13\27\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\10\0\1\27\1\0\1\27\1\0\4\27\25\0"+
    "\6\27\1\u0217\13\27\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\10\0\1\27\1\0\1\27\1\0\4\27\25\0"+
    "\11\27\1\u0218\10\27\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\12\0\1\u0219\6\0\1\u01d4\51\0\1\u01d8\51\0"+
    "\1\u01d5\106\0\1\u01d9\41\0\1\u01d4\51\0\1\u01d8\63\0"+
    "\1\u01d4\101\0\1\u021a\105\0\1\u021b\57\0\1\u01d4\73\0"+
    "\1\u021c\36\0\1\27\1\0\1\27\1\0\4\27\25\0"+
    "\16\27\1\u021d\3\27\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\10\0\1\27\1\0\1\u021e\1\0\4\27\25\0"+
    "\22\27\1\0\1\27\1\0\1\27\1\0\3\27\10\0"+
    "\1\27\1\0\1\27\1\0\4\27\25\0\11\27\1\u021f"+
    "\10\27\1\0\1\27\1\0\1\27\1\0\3\27\10\0"+
    "\1\27\1\0\1\27\1\0\4\27\25\0\12\27\1\u0220"+
    "\7\27\1\0\1\27\1\0\1\27\1\0\3\27\10\0"+
    "\1\27\1\0\1\27\1\0\4\27\25\0\6\27\1\u0221"+
    "\13\27\1\0\1\27\1\0\1\27\1\0\3\27\10\0"+
    "\1\27\1\0\1\u0222\1\0\4\27\25\0\22\27\1\0"+
    "\1\27\1\0\1\27\1\0\3\27\10\0\1\27\1\0"+
    "\1\27\1\0\4\27\25\0\14\27\1\u0223\5\27\1\0"+
    "\1\27\1\0\1\27\1\0\3\27\65\0\1\u0224\76\0"+
    "\1\u0225\57\0\1\u0226\76\0\1\u0227\75\0\1\u0228\110\0"+
    "\1\u0229\31\0\1\u022a\132\0\1\u022b\76\0\1\u022c\76\0"+
    "\1\u022d\112\0\1\u022e\77\0\1\u022f\72\0\1\u0230\65\0"+
    "\1\u0231\122\0\1\u0232\16\0\1\u0233\136\0\1\u0234\73\0"+
    "\1\u0235\77\0\1\u0236\40\0\1\u0237\152\0\1\u0238\57\0"+
    "\1\u0239\74\0\1\u023a\107\0\1\u023b\72\0\1\u023c\73\0"+
    "\1\u023d\37\0\1\27\1\0\1\27\1\0\4\27\25\0"+
    "\12\27\1\u023e\7\27\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\10\0\1\27\1\0\1\27\1\0\4\27\25\0"+
    "\16\27\1\u023f\3\27\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\10\0\1\27\1\0\1\u0240\1\0\4\27\25\0"+
    "\22\27\1\0\1\27\1\0\1\27\1\0\3\27\10\0"+
    "\1\27\1\0\1\27\1\0\4\27\25\0\6\27\1\u0241"+
    "\13\27\1\0\1\27\1\0\1\27\1\0\3\27\10\0"+
    "\1\27\1\0\1\27\1\0\4\27\25\0\16\27\1\u0242"+
    "\3\27\1\0\1\27\1\0\1\27\1\0\3\27\10\0"+
    "\1\27\1\0\1\u0243\1\0\4\27\25\0\22\27\1\0"+
    "\1\27\1\0\1\27\1\0\3\27\10\0\1\27\1\0"+
    "\1\27\1\0\4\27\25\0\11\27\1\u0244\10\27\1\0"+
    "\1\27\1\0\1\27\1\0\3\27\10\0\1\27\1\0"+
    "\1\27\1\0\4\27\25\0\6\27\1\u0245\13\27\1\0"+
    "\1\27\1\0\1\27\1\0\3\27\10\0\1\27\1\0"+
    "\1\u0246\1\0\4\27\25\0\22\27\1\0\1\27\1\0"+
    "\1\27\1\0\3\27\10\0\1\27\1\0\1\27\1\0"+
    "\4\27\25\0\2\27\1\u0247\17\27\1\0\1\27\1\0"+
    "\1\27\1\0\3\27\10\0\1\27\1\0\1\u0248\1\0"+
    "\4\27\25\0\22\27\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\10\0\1\27\1\0\1\27\1\0\4\27\25\0"+
    "\11\27\1\u0249\10\27\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\10\0\1\27\1\0\1\u024a\1\0\4\27\25\0"+
    "\22\27\1\0\1\27\1\0\1\27\1\0\3\27\10\0"+
    "\1\27\1\0\1\27\1\0\4\27\25\0\14\27\1\u024b"+
    "\5\27\1\0\1\27\1\0\1\27\1\0\3\27\10\0"+
    "\1\27\1\0\1\27\1\0\4\27\25\0\1\u024c\21\27"+
    "\1\0\1\27\1\0\1\27\1\0\3\27\10\0\1\27"+
    "\1\0\1\27\1\0\4\27\25\0\10\27\1\u024d\11\27"+
    "\1\0\1\27\1\0\1\27\1\0\3\27\10\0\1\27"+
    "\1\0\1\27\1\0\4\27\25\0\6\27\1\u024e\13\27"+
    "\1\0\1\27\1\0\1\27\1\0\3\27\10\0\1\27"+
    "\1\0\1\u024f\1\0\4\27\25\0\22\27\1\0\1\27"+
    "\1\0\1\27\1\0\3\27\47\0\1\u0250\41\0\1\u01d4"+
    "\76\0\1\u0251\156\0\1\u01d4\14\0\1\27\1\0\1\27"+
    "\1\0\4\27\25\0\22\27\1\0\1\27\1\0\1\27"+
    "\1\0\1\27\1\u0252\1\27\10\0\1\27\1\0\1\27"+
    "\1\0\4\27\25\0\6\27\1\u0253\13\27\1\0\1\27"+
    "\1\0\1\27\1\0\3\27\10\0\1\27\1\0\1\27"+
    "\1\0\4\27\25\0\12\27\1\u0254\7\27\1\0\1\27"+
    "\1\0\1\27\1\0\3\27\10\0\1\27\1\0\1\27"+
    "\1\0\4\27\25\0\22\27\1\0\1\27\1\0\1\27"+
    "\1\0\1\27\1\u0255\1\27\10\0\1\27\1\0\1\27"+
    "\1\0\4\27\25\0\22\27\1\0\1\27\1\0\1\27"+
    "\1\0\1\27\1\u0256\1\27\10\0\1\27\1\0\1\27"+
    "\1\0\4\27\25\0\1\u0257\21\27\1\0\1\27\1\0"+
    "\1\27\1\0\3\27\63\0\1\u0258\66\0\1\u0259\73\0"+
    "\1\u025a\75\0\1\u025b\75\0\1\u025c\107\0\1\u025d\75\0"+
    "\1\u025e\70\0\1\u025f\40\0\1\u0260\136\0\1\u0261\103\0"+
    "\1\u0262\64\0\1\u0263\103\0\1\u0264\71\0\1\u0265\107\0"+
    "\1\u0266\76\0\1\u0267\77\0\1\u0268\65\0\1\u0269\122\0"+
    "\1\u026a\55\0\1\u026b\72\0\1\u026c\114\0\1\u026d\23\0"+
    "\1\27\1\0\1\27\1\0\4\27\25\0\2\27\1\u026e"+
    "\17\27\1\0\1\27\1\0\1\27\1\0\3\27\10\0"+
    "\1\27\1\0\1\27\1\0\4\27\25\0\2\27\1\u026f"+
    "\17\27\1\0\1\27\1\0\1\27\1\0\3\27\10\0"+
    "\1\27\1\0\1\27\1\0\4\27\25\0\11\27\1\u0270"+
    "\10\27\1\0\1\27\1\0\1\27\1\0\3\27\10\0"+
    "\1\27\1\0\1\u0271\1\0\4\27\25\0\22\27\1\0"+
    "\1\27\1\0\1\27\1\0\3\27\10\0\1\27\1\0"+
    "\1\27\1\0\4\27\25\0\22\27\1\0\1\27\1\0"+
    "\1\27\1\0\1\27\1\u0272\1\27\10\0\1\27\1\0"+
    "\1\27\1\0\4\27\25\0\6\27\1\u0273\13\27\1\0"+
    "\1\27\1\0\1\27\1\0\3\27\10\0\1\27\1\0"+
    "\1\27\1\0\4\27\25\0\11\27\1\u0274\10\27\1\0"+
    "\1\27\1\0\1\27\1\0\3\27\10\0\1\27\1\0"+
    "\1\27\1\0\4\27\25\0\22\27\1\0\1\27\1\0"+
    "\1\27\1\0\1\27\1\u0275\1\27\10\0\1\27\1\0"+
    "\1\u0276\1\0\4\27\25\0\22\27\1\0\1\27\1\0"+
    "\1\27\1\0\3\27\10\0\1\27\1\0\1\27\1\0"+
    "\4\27\25\0\3\27\1\u0277\16\27\1\0\1\27\1\0"+
    "\1\27\1\0\3\27\10\0\1\27\1\0\1\27\1\0"+
    "\4\27\25\0\3\27\1\u0278\16\27\1\0\1\27\1\0"+
    "\1\27\1\0\3\27\10\0\1\27\1\0\1\u0279\1\0"+
    "\4\27\25\0\22\27\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\10\0\1\27\1\0\1\u027a\1\0\4\27\25\0"+
    "\22\27\1\0\1\27\1\0\1\27\1\0\3\27\50\0"+
    "\1\u01d4\74\0\1\u01d4\40\0\1\27\1\0\1\27\1\0"+
    "\4\27\25\0\22\27\1\0\1\27\1\0\1\27\1\0"+
    "\1\27\1\u027b\1\27\10\0\1\27\1\0\1\27\1\0"+
    "\4\27\25\0\5\27\1\u027c\14\27\1\0\1\27\1\0"+
    "\1\27\1\0\3\27\10\0\1\27\1\0\1\27\1\0"+
    "\4\27\25\0\22\27\1\0\1\27\1\0\1\27\1\0"+
    "\1\27\1\u027d\1\27\10\0\1\27\1\0\1\27\1\0"+
    "\4\27\25\0\11\27\1\u027e\10\27\1\0\1\27\1\0"+
    "\1\27\1\0\3\27\10\0\1\27\1\0\1\27\1\0"+
    "\4\27\25\0\22\27\1\0\1\27\1\0\1\27\1\0"+
    "\1\27\1\u027f\1\27\10\0\1\27\1\0\1\27\1\0"+
    "\4\27\25\0\4\27\1\u0280\15\27\1\0\1\27\1\0"+
    "\1\27\1\0\3\27\12\0\1\u0281\136\0\1\u0282\102\0"+
    "\1\u0283\67\0\1\u0284\76\0\1\u0285\76\0\1\u0286\104\0"+
    "\1\u0287\113\0\1\u0288\52\0\1\u0289\120\0\1\u028a\72\0"+
    "\1\u028b\24\0\1\u028c\137\0\1\u028d\35\0\1\u028e\134\0"+
    "\1\u028f\36\0\1\27\1\0\1\27\1\0\4\27\25\0"+
    "\1\27\1\u0290\20\27\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\10\0\1\27\1\0\1\27\1\0\4\27\25\0"+
    "\11\27\1\u0291\10\27\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\10\0\1\27\1\0\1\27\1\0\4\27\25\0"+
    "\14\27\1\u0292\5\27\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\10\0\1\27\1\0\1\27\1\0\4\27\25\0"+
    "\1\u0293\21\27\1\0\1\27\1\0\1\27\1\0\3\27"+
    "\10\0\1\27\1\0\1\u0294\1\0\4\27\25\0\22\27"+
    "\1\0\1\27\1\0\1\27\1\0\3\27\10\0\1\27"+
    "\1\0\1\27\1\0\4\27\25\0\1\u0295\21\27\1\0"+
    "\1\27\1\0\1\27\1\0\3\27\10\0\1\27\1\0"+
    "\1\27\1\0\4\27\25\0\1\u0296\21\27\1\0\1\27"+
    "\1\0\1\27\1\0\3\27\10\0\1\27\1\0\1\27"+
    "\1\0\4\27\25\0\6\27\1\u0297\13\27\1\0\1\27"+
    "\1\0\1\27\1\0\3\27\10\0\1\27\1\0\1\27"+
    "\1\0\4\27\25\0\4\27\1\u0298\15\27\1\0\1\27"+
    "\1\0\1\27\1\0\3\27\10\0\1\27\1\0\1\27"+
    "\1\0\4\27\25\0\1\u0299\21\27\1\0\1\27\1\0"+
    "\1\27\1\0\3\27\10\0\1\27\1\0\1\27\1\0"+
    "\4\27\25\0\22\27\1\0\1\27\1\0\1\27\1\0"+
    "\1\27\1\u029a\1\27\10\0\1\27\1\0\1\27\1\0"+
    "\4\27\25\0\1\u029b\21\27\1\0\1\27\1\0\1\27"+
    "\1\0\3\27\10\0\1\27\1\0\1\27\1\0\4\27"+
    "\25\0\22\27\1\0\1\27\1\0\1\27\1\0\1\27"+
    "\1\u029c\1\27\45\0\1\u029d\104\0\1\u029e\76\0\1\u029f"+
    "\106\0\1\u02a0\76\0\1\u02a1\61\0\1\u02a2\111\0\1\u02a3"+
    "\75\0\1\u02a4\65\0\1\u02a5\76\0\1\u02a6\107\0\1\u02a7"+
    "\26\0\1\27\1\0\1\u02a8\1\0\4\27\25\0\22\27"+
    "\1\0\1\27\1\0\1\27\1\0\3\27\10\0\1\27"+
    "\1\0\1\27\1\0\4\27\25\0\14\27\1\u02a9\5\27"+
    "\1\0\1\27\1\0\1\27\1\0\3\27\10\0\1\27"+
    "\1\0\1\27\1\0\4\27\25\0\3\27\1\u02aa\16\27"+
    "\1\0\1\27\1\0\1\27\1\0\3\27\10\0\1\27"+
    "\1\0\1\27\1\0\4\27\25\0\3\27\1\u02ab\16\27"+
    "\1\0\1\27\1\0\1\27\1\0\3\27\10\0\1\27"+
    "\1\0\1\27\1\0\4\27\25\0\7\27\1\u02ac\12\27"+
    "\1\0\1\27\1\0\1\27\1\0\3\27\10\0\1\27"+
    "\1\0\1\27\1\0\4\27\25\0\12\27\1\u02ad\7\27"+
    "\1\0\1\27\1\0\1\27\1\0\3\27\10\0\1\27"+
    "\1\0\1\27\1\0\4\27\25\0\3\27\1\u02ae\16\27"+
    "\1\0\1\27\1\0\1\27\1\0\3\27\10\0\1\27"+
    "\1\0\1\27\1\0\4\27\25\0\21\27\1\u02af\1\0"+
    "\1\27\1\0\1\27\1\0\3\27\10\0\1\27\1\0"+
    "\1\27\1\0\4\27\25\0\22\27\1\0\1\27\1\0"+
    "\1\27\1\0\1\27\1\u02b0\1\27\50\0\1\u02b1\40\0"+
    "\1\u02b2\142\0\1\u02b3\73\0\1\u02b4\71\0\1\u02b5\122\0"+
    "\1\u02b6\14\0\1\27\1\0\1\27\1\0\4\27\25\0"+
    "\11\27\1\u02b7\10\27\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\10\0\1\27\1\0\1\27\1\0\4\27\25\0"+
    "\11\27\1\u02b8\10\27\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\10\0\1\27\1\0\1\27\1\0\4\27\25\0"+
    "\22\27\1\0\1\27\1\0\1\27\1\0\1\27\1\u02b9"+
    "\1\27\10\0\1\27\1\0\1\27\1\0\4\27\25\0"+
    "\20\27\1\u02ba\1\27\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\51\0\1\u02bb\37\0\1\u02bc\76\0\1\u02bd\74\0"+
    "\1\27\1\0\1\u02be\1\0\4\27\25\0\22\27\1\0"+
    "\1\27\1\0\1\27\1\0\3\27\10\0\1\27\1\0"+
    "\1\u02bf\1\0\4\27\25\0\22\27\1\0\1\27\1\0"+
    "\1\27\1\0\3\27\10\0\1\27\1\0\1\27\1\0"+
    "\4\27\25\0\22\27\1\0\1\27\1\0\1\27\1\0"+
    "\1\27\1\u02c0\1\27\10\0\1\27\1\0\1\27\1\0"+
    "\4\27\25\0\5\27\1\u02c1\14\27\1\0\1\27\1\0"+
    "\1\27\1\0\3\27\10\0\1\27\1\0\1\27\1\0"+
    "\4\27\25\0\16\27\1\u02c2\3\27\1\0\1\27\1\0"+
    "\1\27\1\0\3\27\10\0\1\27\1\0\1\u02c3\1\0"+
    "\4\27\25\0\22\27\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\10\0\1\27\1\0\1\27\1\0\4\27\25\0"+
    "\1\27\1\u02c4\20\27\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\7\0";

  /** 
   * The transition table of the DFA
   */
  final private static int yytrans [] = yy_unpack();


  /* error codes */
  final private static int YY_UNKNOWN_ERROR = 0;
  final private static int YY_ILLEGAL_STATE = 1;
  final private static int YY_NO_MATCH = 2;
  final private static int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  final private static String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Internal error: unknown state",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final static byte YY_ATTRIBUTE[] = {
     8,  0,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  9,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  9,  9,  1,  1,  9,  9,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  9,  1,  9,  1,  1, 
     1,  9,  1,  1,  1,  1,  1,  1,  9,  1,  1,  1,  1,  1,  1,  1, 
     9,  1,  9,  9,  1,  1,  1,  9,  1,  9,  1,  9,  1,  1,  9,  1, 
     1,  1,  1,  9,  9,  1,  1,  9,  1,  1,  0,  9,  1,  1,  1,  1, 
     1,  1,  9,  0,  0,  1,  0,  1,  0,  0,  9,  0,  0,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  9,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1, 
     1,  0,  1,  0,  0,  0,  1,  1,  9,  9,  9,  1,  0,  0,  0,  1, 
     9,  1,  9,  0,  0,  0,  1,  1,  1,  0,  9,  0,  9,  1,  9,  9, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     9,  1,  0,  1,  1,  1,  1,  1,  1,  1,  1,  0,  1,  0,  0,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1, 
     1,  1,  1,  1,  1,  9,  9,  1,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1, 
     1,  1,  1,  1,  1,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  9,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  9,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     0,  0,  0,  0,  0,  0,  0,  9,  0,  0,  1,  1,  1,  1,  1,  1, 
     1,  0,  0,  0,  0,  0,  0,  9,  9,  0,  0,  0,  9,  0,  0,  0, 
     0,  9,  0,  0,  0,  0,  0,  9,  0,  0,  0,  0,  0,  0,  0,  0, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  0,  0,  0,  0,  1,  1,  1,  1, 
     1,  1,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  9,  0, 
     0,  0,  9,  0,  0,  0,  0,  9,  0,  0,  9,  0,  0,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0, 
     0,  1,  1,  1,  1,  1,  1,  0,  0,  9,  0,  9,  9,  0,  0,  9, 
     0,  9,  0,  0,  0,  1,  0,  0,  0,  0,  9,  0,  9,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     9,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  9,  0,  9,  9,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  9,  0,  9, 
     9,  0,  0,  9,  0,  0,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     9,  0,  0,  9,  9,  0,  1,  1,  1,  1,  9,  9,  9,  1,  1,  1, 
     1,  1,  1,  1
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string - Set the buffer size to 4K to keep good performance */
  private char yy_buffer[] = new char[1024];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn; 

  /** 
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean yy_atBOL = true;

  /** yy_atEOF == true <=> the scanner is at the EOF */
  private boolean yy_atEOF;

  /* user code: */
    public PhpLexer5(int state){
        initialize(state);
    }
    public void reset(char array[], int offset, int length) {
        this.yy_buffer = array;
        this.yy_currentPos = offset;
        this.yy_markedPos = offset;
        this.yy_pushbackPos = offset;
        this.yychar = offset;
        this.yy_endRead = offset + length;
        this.yy_startRead = offset;
        this.yy_atEOF = yy_currentPos >= yy_endRead;
        this.firstPos = offset;
    }

    public void reset(java.io.Reader  reader, char[] buffer, int[] parameters){
    	this.yy_reader = reader;
    	this.yy_buffer = buffer;
    	this.yy_markedPos = parameters[0];
    	this.yy_pushbackPos = parameters[1];
    	this.yy_currentPos = parameters[2];
    	this.yy_startRead = parameters[3];
    	this.yy_endRead = parameters[4];
    	this.yyline = parameters[5];  
    	initialize(parameters[6]);
    }

    protected boolean isHeredocState(int state){
    	    	return state == ST_PHP_HEREDOC || state == ST_PHP_START_HEREDOC || state == ST_PHP_END_HEREDOC;
    }
    
    public int[] getParamenters(){
    	return new int[]{yy_markedPos, yy_pushbackPos, yy_currentPos, yy_startRead, yy_endRead, yyline, yy_lexical_state};
    }

    protected int getYy_lexical_state() {
        return yy_lexical_state;
    }

    protected int getYy_markedPos() {
        return yy_markedPos;
    }

    protected int getYy_endRead() {
        return yy_endRead;
    }

    public char[] getYy_buffer() {
        return yy_buffer;
    }
    
    protected int getYy_startRead() {
    	return this.yy_startRead;
    }

    protected int getYy_pushBackPosition() {
    	return this.yy_pushbackPos;
    }

	protected void pushBack(int i) {
		yypushback(i);
	}

	// A pool of states. To avoid creation of a new state on each createMemento.
	private static final IntHashtable lexerStates = new IntHashtable(100);
	
	IntHashtable getLexerStates() {
		return lexerStates;
	}


 // End user code



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public PhpLexer5(java.io.Reader in) {
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public PhpLexer5(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the split, compressed DFA transition table.
   *
   * @return the unpacked transition table
   */
  private static int [] yy_unpack() {
    int [] trans = new int[35091];
    int offset = 0;
    offset = yy_unpack(yy_packed0, offset, trans);
    return trans;
  }

  /** 
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the index of the last entry
   */
  private static int yy_unpack(String packed, int offset, int [] trans) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] yy_unpack_cmap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 190) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   IOException  if any I/O-Error occurs
   */
  private boolean yy_refill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead, 
                       yy_buffer, 0, 
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead, 
                                            yy_buffer.length-yy_endRead);

    if (numRead < 0) {
      return true;
    }
    else {
      yy_endRead+= numRead;  
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */

    if (yy_reader != null)
      yy_reader.close();
  }


  /**
   * Closes the current stream, and resets the
   * scanner to read from a new input stream.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  final public void yyreset(java.io.Reader reader) throws java.io.IOException {
    yyclose();
    yy_reader = reader;
    yy_atBOL  = true;
    yy_atEOF  = false;
    yy_endRead = yy_startRead = 0;
    yy_currentPos = yy_markedPos = yy_pushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    yy_lexical_state = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return yy_lexical_state;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  final public char yycharat(int pos) {
    return yy_buffer[yy_startRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    String message;
    try {
      message = YY_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = YY_ERROR_MSG[YY_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      yy_ScanError(YY_PUSHBACK_2BIG);

    yy_markedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public String yylex() throws java.io.IOException {
    int yy_input;
    int yy_action;

    // cached fields:
    int yy_currentPos_l;
    int yy_startRead_l;
    int yy_markedPos_l;
    int yy_endRead_l = yy_endRead;
    char [] yy_buffer_l = yy_buffer;
    char [] yycmap_l = yycmap;

    int [] yytrans_l = yytrans;
    int [] yy_rowMap_l = yy_rowMap;
    byte [] yy_attr_l = YY_ATTRIBUTE;

    while (true) {
      yy_markedPos_l = yy_markedPos;

      yy_action = -1;

      yy_startRead_l = yy_currentPos_l = yy_currentPos = 
                       yy_startRead = yy_markedPos_l;
  
      yy_state = yy_lexical_state;


      yy_forAction: {
        while (true) {
    
          if (yy_currentPos_l < yy_endRead_l)
            yy_input = yy_buffer_l[yy_currentPos_l++];
          else if (yy_atEOF) {
            yy_input = YYEOF;
            break yy_forAction;
          }
          else {
            // store back cached positions
            yy_currentPos  = yy_currentPos_l;
            yy_markedPos   = yy_markedPos_l;
            boolean eof = yy_refill();
            // get translated positions and possibly new buffer
            yy_currentPos_l  = yy_currentPos;
            yy_markedPos_l   = yy_markedPos;
            yy_buffer_l      = yy_buffer;
            yy_endRead_l     = yy_endRead;
            if (eof) {
              yy_input = YYEOF;
              break yy_forAction;
            }
            else {
              yy_input = yy_buffer_l[yy_currentPos_l++];
            }
          }
          int yy_next = yytrans_l[ yy_rowMap_l[yy_state] + yycmap_l[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = yy_attr_l[yy_state];
          if ( (yy_attributes & 1) == 1 ) {
            yy_action = yy_state; 
            yy_markedPos_l = yy_currentPos_l; 
            if ( (yy_attributes & 8) == 8 ) break yy_forAction;
          }

        }
      }

      // store back cached position
      yy_markedPos = yy_markedPos_l;

      switch (yy_action) {

        case 104: 
          { popState();return WHITESPACE; }
        case 709: break;
        case 409: 
          { return PHPDOC_SEE; }
        case 710: break;
        case 421: 
          { return PHPDOC_VAR; }
        case 711: break;
        case 487: 
          { return PHPDOC_NAME; }
        case 712: break;
        case 488: 
          { return PHPDOC_DESC; }
        case 713: break;
        case 492: 
          { return PHPDOC_TODO; }
        case 714: break;
        case 497: 
          { return PHPDOC_USES; }
        case 715: break;
        case 503: 
          { return PHPDOC_LINK; }
        case 716: break;
        case 678: 
          { return PHPDOC_PROPERTY; }
        case 717: break;
        case 675: 
          { return PHPDOC_CATEGORY; }
        case 718: break;
        case 672: 
          { return PHPDOC_TUTORIAL; }
        case 719: break;
        case 671: 
          { return PHPDOC_INTERNAL; }
        case 720: break;
        case 94: 
        case 95: 
        case 96: 
          { return PHPDOC_COMMENT; }
        case 721: break;
        case 640: 
          { return PHPDOC_EXAMPLE; }
        case 722: break;
        case 651: 
          { return PHPDOC_LICENSE; }
        case 723: break;
        case 653: 
          { return PHPDOC_PACKAGE; }
        case 724: break;
        case 654: 
          { return PHPDOC_VERSION; }
        case 725: break;
        case 669: 
          { return PHPDOC_ABSTRACT; }
        case 726: break;
        case 103: 
          { return UNKNOWN_TOKEN; }
        case 727: break;
        case 558: 
          { return PHPDOC_FINAL; }
        case 728: break;
        case 562: 
          { return PHPDOC_SINCE; }
        case 729: break;
        case 567: 
          { return PHPDOC_PARAM; }
        case 730: break;
        case 570: 
          { return PHPDOC_MAGIC; }
        case 731: break;
        case 601: 
          { return PHPDOC_RETURN; }
        case 732: break;
        case 603: 
          { return PHPDOC_AUTHOR; }
        case 733: break;
        case 604: 
          { return PHPDOC_ACCESS; }
        case 734: break;
        case 607: 
          { return PHPDOC_IGNORE; }
        case 735: break;
        case 609: 
          { return PHPDOC_THROWS; }
        case 736: break;
        case 613: 
          { return PHPDOC_STATIC; }
        case 737: break;
        case 618: 
          { return PHPDOC_METHOD; }
        case 738: break;
        case 620: 
          { return PHPDOC_GLOBAL; }
        case 739: break;
        case 700: 
          { return PHPDOC_SUBPACKAGE; }
        case 740: break;
        case 699: 
          { return PHPDOC_FILESOURCE; }
        case 741: break;
        case 698: 
          { return PHPDOC_DEPRECATED; }
        case 742: break;
        case 692: 
          { return PHPDOC_STATICVAR; }
        case 743: break;
        case 691: 
          { return PHPDOC_COPYRIGHT; }
        case 744: break;
        case 688: 
          { return PHPDOC_EXCEPTION; }
        case 745: break;
        case 87: 
        case 90: 
          { //the difference from the original rules comes from the fact that we took ';' out out of tokens 
	return UNKNOWN_TOKEN;
 }
        case 746: break;
        case 207: 
          { 
    popState();
    return PHPDOC_COMMENT_END;
 }
        case 747: break;
        case 59: 
          { 
    if (!phpStack.isEmpty()) {
        popState();
    }
    return  PHP_CURLY_CLOSE;
 }
        case 748: break;
        case 202: 
          { 
    int label_len = yylength() - 1;

    if (yytext().charAt(label_len-1)==';') {
	    label_len--;
    }

    if (label_len==heredoc_len && yytext().substring(0,label_len).equals(heredoc)) {
        heredoc=null;
        heredoc_len=0;
        yybegin(ST_PHP_IN_SCRIPTING);
        return PHP_HEREDOC_TAG;
    } else {
        return PHP_CONSTANT_ENCAPSED_STRING;
    }
 }
        case 749: break;
        case 276: 
          { 
    return PHP_VAR;
 }
        case 750: break;
        case 261: 
          { 
    return PHP_USE;
 }
        case 751: break;
        case 255: 
          { 
    return PHP_FOR;
 }
        case 752: break;
        case 253: 
          { 
    return PHP_TRY;
 }
        case 753: break;
        case 246: 
          { 
    return PHP_DIE;
 }
        case 754: break;
        case 243: 
          { 
    return PHP_NEW;
 }
        case 755: break;
        case 199: 
        case 200: 
          { 
    yypushback(1);
    return PHP_ENCAPSED_AND_WHITESPACE;
 }
        case 756: break;
        case 183: 
        case 184: 
        case 187: 
          { 
    yypushback(1);
    return PHP_ENCAPSED_AND_WHITESPACE;
 }
        case 757: break;
        case 140: 
          { 
    return PHP_IF;
 }
        case 758: break;
        case 137: 
          { 
    return PHP_DO;
 }
        case 759: break;
        case 134: 
          { 
    return PHP_AS;
 }
        case 760: break;
        case 225: 
          { 
	if (asp_tags) {
	    return PHP_CLOSETAG;
	}
	String text = yytext();
	if(text.indexOf('\r') != -1 || text.indexOf('\n') != -1 ){
		popState();
	}
	return PHP_LINE_COMMENT;
 }
        case 761: break;
        case 224: 
          { 
    popState();
    return PHP_LINE_COMMENT;
 }
        case 762: break;
        case 206: 
          { 
    popState();
    return PHP_COMMENT_END;
 }
        case 763: break;
        case 80: 
        case 81: 
          { 
	yypushback(1);
	yybegin(ST_PHP_HEREDOC);
 }
        case 764: break;
        case 89: 
          { 
	yypushback(1);
	popState();
	return PHP_ENCAPSED_AND_WHITESPACE;
 }
        case 765: break;
        case 91: 
          { 
	popState();
	return PHP_TOKEN;
 }
        case 766: break;
        case 432: 
        case 433: 
          { 
    int bprefix = (yytext().charAt(0) != '<') ? 1 : 0;
    int startString=3+bprefix;
    heredoc_len = yylength()-bprefix-3-1-(yytext().charAt(yylength()-2)=='\r'?1:0);
    while ((yytext().charAt(startString) == ' ') || (yytext().charAt(startString) == '\t')) {
        startString++;
        heredoc_len--;
    }
    heredoc = yytext().substring(startString,heredoc_len+startString);
    yybegin(ST_PHP_START_HEREDOC);
    return PHP_HEREDOC_TAG;
 }
        case 767: break;
        case 294: 
          { 
    int label_len = yylength() - 1;

    if (yytext().charAt(label_len-1)==';') {
	   label_len--;
    }
    if (label_len > heredoc_len && yytext().substring(label_len - heredoc_len,label_len).equals(heredoc)) {
    	   yypushback(1);
        yybegin(ST_PHP_END_HEREDOC);
    }
        return PHP_CONSTANT_ENCAPSED_STRING;
 }
        case 768: break;
        case 14: 
        case 60: 
        case 77: 
        case 78: 
        case 79: 
          { 
    yypushback(1);
    pushState(ST_PHP_HIGHLIGHTING_ERROR);
 }
        case 769: break;
        case 702: 
          { 
    return PHP_INCLUDE_ONCE;
 }
        case 770: break;
        case 701: 
          { 
    return PHP_REQUIRE_ONCE;
 }
        case 771: break;
        case 82: 
          { 
    heredoc=null;
    heredoc_len=0;
    yybegin(ST_PHP_IN_SCRIPTING);
    return PHP_CONSTANT_ENCAPSED_STRING;
 }
        case 772: break;
        case 100: 
        case 101: 
        case 102: 
          { 
    return PHP_LINE_COMMENT;
 }
        case 773: break;
        case 293: 
          { 
	yypushback(1);
	pushState(ST_PHP_VAR_OFFSET);
	return PHP_VARIABLE;
 }
        case 774: break;
        case 185: 
          { 
    pushState(ST_PHP_IN_SCRIPTING);
    return PHP_TOKEN;
 }
        case 775: break;
        case 61: 
          { 
    pushState(ST_PHP_LINE_COMMENT);
    return PHP_LINE_COMMENT;
 }
        case 776: break;
        case 194: 
          { 
    popState();
    pushState(ST_PHP_LOOKING_FOR_PROPERTY);
    return PHP_OBJECT_OPERATOR;
     }
        case 777: break;
        case 114: 
          { 
    pushState(ST_PHP_LOOKING_FOR_PROPERTY);
    return PHP_OBJECT_OPERATOR;
 }
        case 778: break;
        case 703: 
          { 
    return PHP__FUNCTION__;
 }
        case 779: break;
        case 684: 
          { 
    return PHP_IMPLEMENTS;
 }
        case 780: break;
        case 683: 
          { 
    return PHP_INSTANCEOF;
 }
        case 781: break;
        case 680: 
          { 
    return PHP_ENDFOREACH;
 }
        case 782: break;
        case 679: 
          { 
    return PHP_ENDDECLARE;
 }
        case 783: break;
        case 234: 
          { 
    return PHP_NUMBER;
 }
        case 784: break;
        case 178: 
          { 
	return PHP_CLOSETAG;
 }
        case 785: break;
        case 68: 
          { 
    return PHP_ENCAPSED_AND_WHITESPACE;
 }
        case 786: break;
        case 65: 
          { 
    popState();
    return PHP_CONSTANT_ENCAPSED_STRING;
 }
        case 787: break;
        case 29: 
          { 
    return PHP_CURLY_OPEN;
 }
        case 788: break;
        case 15: 
        case 19: 
          { 
    return PHP_NUMBER;
 }
        case 789: break;
        case 92: 
          { 
    return PHP_COMMENT;
 }
        case 790: break;
        case 93: 
          { 
    return PHP_COMMENT;
 }
        case 791: break;
        case 105: 
          { 
    return PHP_NUMBER;
 }
        case 792: break;
        case 471: 
          { 
    return PHP_CASTING;
 }
        case 793: break;
        case 514: 
          { 
    return PHP_ENDFOR;
 }
        case 794: break;
        case 517: 
          { 
    return PHP_ELSEIF;
 }
        case 795: break;
        case 518: 
          { 
    return PHP_RETURN;
 }
        case 796: break;
        case 530: 
          { 
    return PHP_STATIC;
 }
        case 797: break;
        case 531: 
          { 
    return PHP_SWITCH;
 }
        case 798: break;
        case 534: 
          { 
    return PHP_PARENT;
 }
        case 799: break;
        case 535: 
          { 
    return PHP_PUBLIC;
 }
        case 800: break;
        case 540: 
          { 
    return PHP_GLOBAL;
 }
        case 801: break;
        case 573: 
          { 
    return PHP_EXTENDS;
 }
        case 802: break;
        case 578: 
          { 
    return PHP_REQUIRE;
 }
        case 803: break;
        case 580: 
          { 
    return PHP_DEFAULT;
 }
        case 804: break;
        case 581: 
          { 
    return PHP_DECLARE;
 }
        case 805: break;
        case 583: 
          { 
    return PHP_INCLUDE;
 }
        case 806: break;
        case 586: 
          { 
    return PHP_FOREACH;
 }
        case 807: break;
        case 590: 
          { 
    return PHP_PRIVATE;
 }
        case 808: break;
        case 634: 
          { 
    return PHP__FILE__;
 }
        case 809: break;
        case 638: 
          { 
    return PHP__LINE__;
 }
        case 810: break;
        case 163: 
          { 
    return PHP_PAAMAYIM_NEKUDOTAYIM;
 }
        case 811: break;
        case 128: 
          { 
	if (asp_tags) {
	    return PHP_CLOSETAG;
	}
	return UNKNOWN_TOKEN;
 }
        case 812: break;
        case 204: 
          { 
	return PHP_OBJECT_OPERATOR;
 }
        case 813: break;
        case 186: 
          { 
    yypushback(1);
    pushState(ST_PHP_IN_SCRIPTING);
    return PHP_CURLY_OPEN;
 }
        case 814: break;
        case 687: 
          { 
    return PHP__METHOD__;
 }
        case 815: break;
        case 191: 
        case 192: 
        case 193: 
          { 
	yypushback(1);
	return PHP_ENCAPSED_AND_WHITESPACE;
 }
        case 816: break;
        case 119: 
          { 
    return PHP_VARIABLE;
 }
        case 817: break;
        case 25: 
          { 
    return PHP_SEMICOLON;
 }
        case 818: break;
        case 86: 
        case 88: 
          { 
	return PHP_NUMBER;
 }
        case 819: break;
        case 107: 
        case 125: 
        case 126: 
        case 129: 
          { 
    return PHP_OPERATOR;
 }
        case 820: break;
        case 624: 
          { 
    return PHP_ENDWHILE;
 }
        case 821: break;
        case 626: 
          { 
    return PHP_ABSTRACT;
 }
        case 822: break;
        case 631: 
          { 
    return PHP_FUNCTION;
 }
        case 823: break;
        case 632: 
          { 
    return PHP_CONTINUE;
 }
        case 824: break;
        case 657: 
          { 
    return PHP_ENDSWITCH;
 }
        case 825: break;
        case 659: 
          { 
    return PHP_INTERFACE;
 }
        case 826: break;
        case 663: 
          { 
    return PHP_PROTECTED;
 }
        case 827: break;
        case 665: 
          { 
    return PHP__CLASS__;
 }
        case 828: break;
        case 63: 
          { 
	return PHP_ENCAPSED_AND_WHITESPACE;
 }
        case 829: break;
        case 5: 
        case 75: 
        case 76: 
        case 198: 
        case 295: 
          { 
	return PHP_ENCAPSED_AND_WHITESPACE;
 }
        case 830: break;
        case 707: 
          { 
	return PHP_HALT_COMPILER;
 }
        case 831: break;
        case 182: 
        case 205: 
          { 
    pushState(ST_PHP_QUOTES_AFTER_VARIABLE);
    return PHP_VARIABLE;
 }
        case 832: break;
        case 122: 
          { 
    return PHP_CONSTANT_ENCAPSED_STRING;
 }
        case 833: break;
        case 69: 
        case 70: 
        case 71: 
          { 
    return PHP_CONSTANT_ENCAPSED_STRING;
 }
        case 834: break;
        case 64: 
        case 66: 
        case 67: 
          { 
    return PHP_CONSTANT_ENCAPSED_STRING;
 }
        case 835: break;
        case 83: 
        case 85: 
          { 
    yypushback(1);
    popState();
 }
        case 836: break;
        case 334: 
          { 
    return PHP_EVAL;
 }
        case 837: break;
        case 332: 
          { 
    return PHP_ELSE;
 }
        case 838: break;
        case 331: 
          { 
    return PHP_ECHO;
 }
        case 839: break;
        case 324: 
          { 
    return PHP_EXIT;
 }
        case 840: break;
        case 28: 
          { 
    pushState(ST_PHP_BACKQUOTE);
    return PHP_CONSTANT_ENCAPSED_STRING;
 }
        case 841: break;
        case 16: 
        case 18: 
        case 24: 
        case 26: 
        case 30: 
        case 31: 
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
        case 54: 
        case 56: 
        case 62: 
          { 
    return PHP_TOKEN;
 }
        case 842: break;
        case 17: 
        case 20: 
        case 21: 
        case 22: 
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 52: 
        case 53: 
        case 55: 
        case 57: 
        case 58: 
        case 108: 
        case 109: 
        case 110: 
        case 111: 
        case 112: 
        case 113: 
        case 117: 
        case 130: 
        case 131: 
        case 132: 
        case 133: 
        case 135: 
        case 136: 
        case 138: 
        case 139: 
        case 141: 
        case 142: 
        case 143: 
        case 144: 
        case 145: 
        case 146: 
        case 147: 
        case 148: 
        case 149: 
        case 150: 
        case 151: 
        case 152: 
        case 153: 
        case 154: 
        case 155: 
        case 156: 
        case 157: 
        case 158: 
        case 159: 
        case 160: 
        case 161: 
        case 162: 
        case 164: 
        case 175: 
        case 176: 
        case 227: 
        case 228: 
        case 229: 
        case 230: 
        case 231: 
        case 232: 
        case 233: 
        case 236: 
        case 239: 
        case 240: 
        case 241: 
        case 242: 
        case 244: 
        case 245: 
        case 247: 
        case 248: 
        case 249: 
        case 250: 
        case 251: 
        case 252: 
        case 254: 
        case 256: 
        case 257: 
        case 258: 
        case 259: 
        case 260: 
        case 262: 
        case 263: 
        case 264: 
        case 265: 
        case 266: 
        case 267: 
        case 268: 
        case 269: 
        case 270: 
        case 271: 
        case 272: 
        case 273: 
        case 274: 
        case 275: 
        case 287: 
        case 288: 
        case 289: 
        case 290: 
        case 291: 
        case 292: 
        case 325: 
        case 326: 
        case 327: 
        case 328: 
        case 329: 
        case 330: 
        case 333: 
        case 335: 
        case 338: 
        case 339: 
        case 340: 
        case 341: 
        case 342: 
        case 343: 
        case 344: 
        case 345: 
        case 346: 
        case 347: 
        case 348: 
        case 350: 
        case 351: 
        case 353: 
        case 354: 
        case 355: 
        case 356: 
        case 357: 
        case 358: 
        case 359: 
        case 361: 
        case 362: 
        case 364: 
        case 365: 
        case 366: 
        case 368: 
        case 369: 
        case 370: 
        case 371: 
        case 372: 
        case 383: 
        case 384: 
        case 385: 
        case 386: 
        case 387: 
        case 388: 
        case 389: 
        case 423: 
        case 424: 
        case 426: 
        case 427: 
        case 428: 
        case 429: 
        case 434: 
        case 435: 
        case 436: 
        case 438: 
        case 439: 
        case 440: 
        case 441: 
        case 442: 
        case 444: 
        case 446: 
        case 449: 
        case 451: 
        case 456: 
        case 457: 
        case 459: 
        case 461: 
        case 462: 
        case 463: 
        case 474: 
        case 475: 
        case 476: 
        case 477: 
        case 478: 
        case 479: 
        case 480: 
        case 512: 
        case 513: 
        case 515: 
        case 516: 
        case 519: 
        case 520: 
        case 521: 
        case 522: 
        case 523: 
        case 524: 
        case 525: 
        case 526: 
        case 527: 
        case 528: 
        case 529: 
        case 532: 
        case 533: 
        case 541: 
        case 542: 
        case 543: 
        case 544: 
        case 545: 
        case 546: 
        case 574: 
        case 575: 
        case 576: 
        case 577: 
        case 579: 
        case 582: 
        case 584: 
        case 585: 
        case 587: 
        case 588: 
        case 589: 
        case 593: 
        case 594: 
        case 595: 
        case 596: 
        case 597: 
        case 598: 
        case 621: 
        case 622: 
        case 623: 
        case 625: 
        case 627: 
        case 628: 
        case 629: 
        case 630: 
        case 633: 
        case 635: 
        case 636: 
        case 637: 
        case 639: 
        case 655: 
        case 656: 
        case 658: 
        case 660: 
        case 661: 
        case 662: 
        case 664: 
        case 666: 
        case 667: 
        case 681: 
        case 682: 
        case 685: 
        case 686: 
        case 694: 
        case 695: 
        case 696: 
        case 697: 
        case 704: 
        case 705: 
        case 706: 
          { 
    return  PHP_STRING;
 }
        case 843: break;
        case 23: 
          { 
    return  WHITESPACE;
 }
        case 844: break;
        case 27: 
          { 
    pushState(ST_PHP_DOUBLE_QUOTES);
    return PHP_CONSTANT_ENCAPSED_STRING;
 }
        case 845: break;
        case 84: 
          { 
    popState();
    return PHP_STRING;
 }
        case 846: break;
        case 349: 
          { 
    return PHP_TRUE;
 }
        case 847: break;
        case 352: 
          { 
    return PHP_FROM;
 }
        case 848: break;
        case 360: 
          { 
    return PHP_CASE;
 }
        case 849: break;
        case 363: 
          { 
    return PHP_SELF;
 }
        case 850: break;
        case 367: 
          { 
    return PHP_LIST;
 }
        case 851: break;
        case 425: 
          { 
    return PHP_ENDIF;
 }
        case 852: break;
        case 430: 
          { 
    return PHP_EMPTY;
 }
        case 853: break;
        case 431: 
          { 
    return PHP_BREAK;
 }
        case 854: break;
        case 437: 
          { 
    return PHP_ARRAY;
 }
        case 855: break;
        case 443: 
          { 
    return PHP_ISSET;
 }
        case 856: break;
        case 445: 
          { 
    return PHP_THROW;
 }
        case 857: break;
        case 447: 
          { 
    return PHP_FALSE;
 }
        case 858: break;
        case 448: 
          { 
    return PHP_FINAL;
 }
        case 859: break;
        case 450: 
          { 
    return PHP_UNSET;
 }
        case 860: break;
        case 452: 
          { 
    return PHP_CONST;
 }
        case 861: break;
        case 453: 
          { 
    return PHP_CATCH;
 }
        case 862: break;
        case 454: 
          { 
    return PHP_CLONE;
 }
        case 863: break;
        case 455: 
          { 
    return PHP_CLASS;
 }
        case 864: break;
        case 458: 
          { 
    return PHP_WHILE;
 }
        case 865: break;
        case 460: 
          { 
    return PHP_PRINT;
 }
        case 866: break;
        case 127: 
          { 
    pushState(ST_PHP_COMMENT);
    return PHP_COMMENT_START;
 }
        case 867: break;
        case 337: 
          { 
    pushState(ST_PHP_DOC_COMMENT);
    return PHPDOC_COMMENT_START;
 }
        case 868: break;
        case 72: 
        case 73: 
        case 74: 
          { 
        yypushback(1);
        popState();
     }
        case 869: break;
        case 97: 
        case 98: 
        case 99: 
          { 
	String yytext = yytext();
	switch (yytext.charAt(yytext.length() - 1)) {
		case '?':
		case '%':
		case '>':
			yypushback(1);
			break;
		default:
			popState();
	}
	 return PHP_LINE_COMMENT;
 }
        case 870: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            return null;
          } 
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }


}
